{
    "pipes": [
        {
            "name": "BreakpointPipe",
            "id": "pipe-BreakpointPipe-ec909bd3e3cd62125ebcc64c97fac73aabf30681412d22a41da67742af8a6819192a9e328f440a1fd96ff763682533eb9cf72514b30f51fb9a43db3b72061884",
            "file": "projects/digital-delights-library/src/pipes/pipes/breakpoint.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "lastValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "breakpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "breakpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddbreakpoint",
            "sourceCode": "import { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { DdBreakPointsEnum } from '@digitaldelightsoy/design-library/src/navigation';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Pipe({\r\n    name: 'ddbreakpoint',\r\n    pure: false,\r\n})\r\nexport class BreakpointPipe implements PipeTransform, OnDestroy {\r\n    constructor(private breakpointObserver: BreakpointObserver, private cdr: ChangeDetectorRef) {}\r\n\r\n    private lastValue: boolean = false;\r\n    private subscription?: Subscription;\r\n\r\n    transform(breakpoint: keyof typeof DdBreakPointsEnum): boolean {\r\n        this.subscription?.unsubscribe();\r\n        this.subscription = this.breakpointObserver.observe(DdBreakPointsEnum[breakpoint]).subscribe((result) => {\r\n            this.lastValue = result.matches;\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        },
        {
            "name": "CurrencyPipe",
            "id": "pipe-CurrencyPipe-f6c6f41157012042fdc7f1c5c462e15d6ea859a1951c6ca7587540a09e1be24d8943f5333440b4628f4750a23c2f651edc0f0316781ba0cdd7f6ca2d47a32e7f",
            "file": "projects/digital-delights-library/src/pipes/pipes/currency.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>CurrencyPipe renders an input string or decimal to decimal.\nFI currencies are always shown with 2 decimals and other countries with 0-2 decimals.\nDecimal separator comes from Intl.NumberFormat.\nUsage:\n{{price | ddcurrency}} renders the price with currency symbol,</p>\n",
            "rawdescription": "\n\nCurrencyPipe renders an input string or decimal to decimal.\nFI currencies are always shown with 2 decimals and other countries with 0-2 decimals.\nDecimal separator comes from Intl.NumberFormat.\nUsage:\n{{price | ddcurrency}} renders the price with currency symbol,\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DdCulture>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddcurrency",
            "sourceCode": "import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable, Subscription, shareReplay } from 'rxjs';\r\nimport { DdCulture, DdLocaleService } from '../services/locale.service';\r\n\r\n/**\r\n * CurrencyPipe renders an input string or decimal to decimal.\r\n * FI currencies are always shown with 2 decimals and other countries with 0-2 decimals.\r\n * Decimal separator comes from Intl.NumberFormat.\r\n * Usage:\r\n * {{price | ddcurrency}} renders the price with currency symbol,\r\n */\r\n@Pipe({\r\n    name: 'ddcurrency',\r\n    pure: false,\r\n})\r\nexport class CurrencyPipe implements PipeTransform, OnDestroy {\r\n    constructor(private localeService: DdLocaleService, private cdr: ChangeDetectorRef) {\r\n        this.localChanges$ = this.localeService.getLocalCulture$().pipe(shareReplay(1));\r\n    }\r\n\r\n    private readonly localChanges$: Observable<DdCulture>;\r\n\r\n    private lastValue?: string;\r\n    private subscription?: Subscription;\r\n\r\n    transform(value: number | undefined | null): string | undefined {\r\n        this.subscription?.unsubscribe();\r\n\r\n        if (value === undefined || value === null) {\r\n            return '';\r\n        }\r\n\r\n        // Create subscription for language changes that will format the new value and then call markForCheck to trigger change detection.\r\n        this.subscription = this.localChanges$.subscribe((locale) => {\r\n            // Minimum decimal amount should be always 2 if there are decimals to show, so if modulo 1 is 0 then the number has no decimals.\r\n            const minimumFractionDigits: number = value % 1 === 0 ? 0 : 2;\r\n\r\n            let currencySymbol = '';\r\n\r\n            if (locale.includes('fi')) {\r\n                // add EUR with space as the currency symbol for FI\r\n                // Instead of space we're using a Non-breaking space to make prevent text wrapping from splitting value and currency\r\n                currencySymbol = `${String.fromCharCode(160)}€`;\r\n            } else if (locale.includes('sv')) {\r\n                // Sweden has different symbol\r\n                currencySymbol = ':-';\r\n            } else {\r\n                // Show rounded price symbol ',-' only if price does not have decimals.\r\n                if (!minimumFractionDigits) {\r\n                    currencySymbol = ',-';\r\n                }\r\n            }\r\n\r\n            // Create format options.\r\n            const options: Intl.NumberFormatOptions = {\r\n                style: 'decimal',\r\n                minimumFractionDigits,\r\n                maximumFractionDigits: 2,\r\n            };\r\n\r\n            const currency = new Intl.NumberFormat(locale, options).format(value);\r\n\r\n            this.lastValue = currency + currencySymbol;\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        },
        {
            "name": "DatePipe",
            "id": "pipe-DatePipe-86c8c50572a41ce7c98cdfd47c4d77fe27f9d2845b2da1dc901b1199ebb7f9a14df815fd5da3c934a10f74f5237a1488ee8697aac7f0faeebec06bfcd7c32913",
            "file": "projects/digital-delights-library/src/pipes/pipes/date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>DatePipe uses moment to render a date value from input Date of date string.</p>\n",
            "rawdescription": "\n\nDatePipe uses moment to render a date value from input Date of date string.\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "dddate",
            "sourceCode": "import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { format } from 'date-fns';\r\nimport { Observable, Subscription, shareReplay } from 'rxjs';\r\nimport { DdLocaleService } from '../services/locale.service';\r\n\r\n/**\r\n * DatePipe uses moment to render a date value from input Date of date string.\r\n */\r\n@Pipe({\r\n    name: 'dddate',\r\n    pure: false,\r\n})\r\nexport class DatePipe implements PipeTransform, OnDestroy {\r\n    constructor(private localeService: DdLocaleService, private cdr: ChangeDetectorRef) {\r\n        this.localChanges$ = this.localeService.getDateLocale$().pipe(shareReplay(1));\r\n    }\r\n\r\n    private readonly localChanges$: Observable<Locale>;\r\n\r\n    private lastValue?: string;\r\n    private subscription?: Subscription;\r\n\r\n    transform(value: Date | string | number | null | undefined): string | undefined {\r\n        this.subscription?.unsubscribe();\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        // Create tmp property from the input for the format function.\r\n        let dateValue: Date | number;\r\n        if (typeof value === 'string') {\r\n            const timestamp = Date.parse(value);\r\n\r\n            // Try to see if the date is faulty.\r\n            if (isNaN(timestamp)) {\r\n                return '';\r\n            }\r\n\r\n            dateValue = timestamp;\r\n        } else {\r\n            dateValue = value;\r\n        }\r\n\r\n        // Create subscription for language changes that will format the new value and then call markForCheck to trigger change detection.\r\n        this.subscription = this.localChanges$.subscribe((l) => {\r\n            this.lastValue = format(dateValue, this.localeService.getDateFormat(l), { locale: l }) ?? '';\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        },
        {
            "name": "DateTimePipe",
            "id": "pipe-DateTimePipe-639ebd49f03f54579b070d9075ae8505d3d11368cf765fd1178a074363773543b004b968507753fd3e830e29ade120970338464168941bc035274935dbfd4844",
            "file": "projects/digital-delights-library/src/pipes/pipes/datetime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "dddatetime",
            "sourceCode": "import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { format } from 'date-fns';\r\nimport { Observable, Subscription, shareReplay } from 'rxjs';\r\nimport { DdLocaleService } from '../services/locale.service';\r\n\r\n@Pipe({\r\n    name: 'dddatetime',\r\n    pure: false,\r\n})\r\nexport class DateTimePipe implements PipeTransform, OnDestroy {\r\n    constructor(private localeService: DdLocaleService, private cdr: ChangeDetectorRef) {\r\n        this.localChanges$ = this.localeService.getDateLocale$().pipe(shareReplay(1));\r\n    }\r\n\r\n    private readonly localChanges$: Observable<Locale>;\r\n\r\n    private lastValue?: string;\r\n    private subscription?: Subscription;\r\n\r\n    transform(value: Date | string | number | null | undefined): string | undefined {\r\n        this.subscription?.unsubscribe();\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        // Create tmp property from the input for the format function.\r\n        let dateValue: Date | number;\r\n        if (typeof value === 'string') {\r\n            const timestamp = Date.parse(value);\r\n\r\n            // Try to see if the date is faulty.\r\n            if (isNaN(timestamp)) {\r\n                return '';\r\n            }\r\n\r\n            dateValue = timestamp;\r\n        } else {\r\n            dateValue = value;\r\n        }\r\n\r\n        // Create subscription for language changes that will format the new value and then call markForCheck to trigger change detection.\r\n        this.subscription = this.localChanges$.subscribe((l) => {\r\n            this.lastValue = format(dateValue, this.localeService.getDateTimeFormat(l), { locale: l });\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        },
        {
            "name": "FilterPipe",
            "id": "pipe-FilterPipe-ffb9502599299f01600d0304b020405ddda9f4880b41249c0d507433f094afb5c381cb770911375419301ad64003b8e41b1479e3c5e0a5a8bb3708336846ce73",
            "file": "projects/digital-delights-library/src/pipes/pipes/filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>FilterPipe exposes possibility to give function which filters the input array.</p>\n",
            "rawdescription": "\nFilterPipe exposes possibility to give function which filters the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddfilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/** FilterPipe exposes possibility to give function which filters the input array. */\r\n@Pipe({\r\n    name: 'ddfilter',\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n    transform<T>(items: T[] | undefined, filterFunc: (item: T) => boolean): T[] {\r\n        if (!items?.length || !filterFunc) {\r\n            return [];\r\n        }\r\n        return items.filter((item) => filterFunc(item));\r\n    }\r\n}\r\n"
        },
        {
            "name": "FindPipe",
            "id": "pipe-FindPipe-194aca1bc28ddf5b4650279ff735a87b111b346c19a598bb6e39c5608b6def02d1f43f6f08d6181528e83316c60e3932e36387335c7a468497baedf41cfe0bc2",
            "file": "projects/digital-delights-library/src/pipes/pipes/find.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>FindPipe exposes possibility to give function which finds an element from the input array.</p>\n",
            "rawdescription": "\nFindPipe exposes possibility to give function which finds an element from the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "findFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "findFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddfind",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/** FindPipe exposes possibility to give function which finds an element from the input array. */\r\n@Pipe({\r\n    name: 'ddfind',\r\n})\r\nexport class FindPipe implements PipeTransform {\r\n    transform<T>(items: T[] | undefined, findFunc: (item: T) => boolean): T | undefined {\r\n        if (!items?.length || !findFunc) {\r\n            return undefined;\r\n        }\r\n        return items.find((item) => findFunc(item));\r\n    }\r\n}\r\n"
        },
        {
            "name": "SanitizerPipe",
            "id": "pipe-SanitizerPipe-550aae7d78da65c8ce85d3a65130a88099ab76e0410955925f5f749bf6453a969ef06293804147c9a731ca9dc98d03ad4ddb92fb5f21d29f725b6c95a08fbbcc",
            "file": "projects/digital-delights-library/src/pipes/pipes/sanitizer.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Sanitizes a string so it can be safely rendered to template.\nstringToBeSanitized | safe: &#39;type&#39;</p>\n",
            "rawdescription": "\n\nSanitizes a string so it can be safely rendered to template.\nstringToBeSanitized | safe: 'type'\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl | undefined",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "safe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl } from '@angular/platform-browser';\r\n\r\n/**\r\n * Sanitizes a string so it can be safely rendered to template.\r\n * stringToBeSanitized | safe: 'type'\r\n */\r\n@Pipe({\r\n    name: 'safe',\r\n})\r\nexport class SanitizerPipe implements PipeTransform {\r\n    constructor(protected domSanitizer: DomSanitizer) {}\r\n\r\n    transform(value: string, type: 'html' | 'style' | 'script' | 'url' | 'resourceUrl'): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl | undefined {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'html':\r\n                return this.domSanitizer.bypassSecurityTrustHtml(value);\r\n            case 'style':\r\n                return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n            case 'script':\r\n                return this.domSanitizer.bypassSecurityTrustScript(value);\r\n            case 'url':\r\n                return this.domSanitizer.bypassSecurityTrustUrl(value);\r\n            case 'resourceUrl':\r\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(value);\r\n            default:\r\n                throw new Error(`Invalid safe type specified: ${type}`);\r\n        }\r\n    }\r\n}\r\n"
        },
        {
            "name": "SelectFilterPipe",
            "id": "pipe-SelectFilterPipe-943788b2a34af592e99f238f8f3178f67306485d6aeba0ec6d021b0c30bf88f4b79b2f39003fe17ee4a65c5e38a15ba8cce59ebeccf241b23edafe2127688c94",
            "file": "projects/digital-delights-library/src/select/pipes/select-filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "SelectItem<any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SelectItem[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "SelectItem<any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddSelectFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { SelectItem } from '../select-models';\r\n\r\n@Pipe({\r\n    name: 'ddSelectFilter',\r\n})\r\nexport class SelectFilterPipe implements PipeTransform {\r\n    transform(items: SelectItem<any>[], filter: string): SelectItem<any>[] {\r\n        if (!items || !filter) {\r\n            return items;\r\n        }\r\n        // filter items array, items which match and return true will be\r\n        // kept, false will be filtered out\r\n        return items.filter((item: SelectItem<any>) => item.text.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1);\r\n    }\r\n}\r\n"
        },
        {
            "name": "ShortDatePipe",
            "id": "pipe-ShortDatePipe-a581b04f521b137a1dc4064cc930e4263da1ae9ae383c54b78a79aa8c25c470c829193c00d9723a2ed7115abd705a2868c52448c1466e2f3ef1eb1ad79f66547",
            "file": "projects/digital-delights-library/src/pipes/pipes/short-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Short date format pipe (day and month).\nNote: This can removed if moment starts to support the short date format.</p>\n",
            "rawdescription": "\n\nShort date format pipe (day and month).\nNote: This can removed if moment starts to support the short date format.\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DdCulture>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddshortdate",
            "sourceCode": "import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable, Subscription, shareReplay } from 'rxjs';\r\nimport { DdCulture, DdLocaleService } from '../services/locale.service';\r\n\r\n/**\r\n * Short date format pipe (day and month).\r\n * Note: This can removed if moment starts to support the short date format.\r\n */\r\n@Pipe({\r\n    name: 'ddshortdate',\r\n    pure: false,\r\n})\r\nexport class ShortDatePipe implements PipeTransform, OnDestroy {\r\n    constructor(private localeService: DdLocaleService, private cdr: ChangeDetectorRef) {\r\n        this.localChanges$ = this.localeService.getLocalCulture$().pipe(shareReplay(1));\r\n    }\r\n\r\n    private readonly localChanges$: Observable<DdCulture>;\r\n\r\n    private lastValue?: string;\r\n    private subscription?: Subscription;\r\n\r\n    transform(value: Date | string | number | null | undefined): string | undefined {\r\n        this.subscription?.unsubscribe();\r\n\r\n        // Try to see if the date is faulty.\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        // Create tmp property from the input for the format function.\r\n        let dateValue: Date | number;\r\n        if (typeof value === 'string') {\r\n            const timestamp = Date.parse(value);\r\n\r\n            // Try to see if the date is faulty.\r\n            if (isNaN(timestamp)) {\r\n                return '';\r\n            }\r\n\r\n            dateValue = timestamp;\r\n        } else {\r\n            dateValue = value;\r\n        }\r\n\r\n        this.subscription = this.localChanges$.subscribe((locale) => {\r\n            const options: Intl.DateTimeFormatOptions = {\r\n                day: '2-digit',\r\n                month: '2-digit',\r\n            };\r\n\r\n            /**\r\n             * '2-digit' format was returning 1 digit for Norway and Terje wanted to show short months.\r\n             * So make an exception for Norway to display month in 'short' format.\r\n             */\r\n            if (locale === 'nb-no') {\r\n                options.month = 'short';\r\n            }\r\n\r\n            // Format the date.\r\n            const formattedShortDate = new Intl.DateTimeFormat(locale, options).format(dateValue);\r\n\r\n            this.lastValue = formattedShortDate;\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        },
        {
            "name": "SortPipe",
            "id": "pipe-SortPipe-804cfb8947aa66a7e1d474d87f7ae2ebc354b7aea8956b88366eb5f9e5f7cc099ebb523c2a08691a73fa0322f939dba208888a430790199765c4ec905851bae4",
            "file": "projects/digital-delights-library/src/pipes/pipes/sort.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>SortPipe exposes possibility to give function which sorts the input array.</p>\n",
            "rawdescription": "\nSortPipe exposes possibility to give function which sorts the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "a",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "b",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "a",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "b",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddsort",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/** SortPipe exposes possibility to give function which sorts the input array. */\r\n@Pipe({\r\n    name: 'ddsort',\r\n})\r\nexport class SortPipe implements PipeTransform {\r\n    transform<T>(items: T[] | undefined, sortFunc: (a: T, b: T) => number): T[] {\r\n        if (!items?.length || !sortFunc) {\r\n            return [];\r\n        }\r\n        return items.sort((a: T, b: T) => sortFunc(a, b));\r\n    }\r\n}\r\n"
        },
        {
            "name": "TimePipe",
            "id": "pipe-TimePipe-6b2bcbf2bd0621c895e1f34325be6a5a1f27868c66d76b8264410f0cd48cdb36cf033fcbe9e0812102e5d272b4973e08bfdfc4b0dc6430a5ee04875ac6071c2e",
            "file": "projects/digital-delights-library/src/pipes/pipes/time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>DatePipe uses moment to render a date value from input Date of date string.\nMoment locale is set in expert.master.ts</p>\n",
            "rawdescription": "\n\nDatePipe uses moment to render a date value from input Date of date string.\nMoment locale is set in expert.master.ts\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddtime",
            "sourceCode": "import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { format } from 'date-fns';\r\nimport { Observable, Subscription, shareReplay } from 'rxjs';\r\nimport { DdLocaleService } from '../services/locale.service';\r\n\r\n/**\r\n * DatePipe uses moment to render a date value from input Date of date string.\r\n * Moment locale is set in expert.master.ts\r\n */\r\n@Pipe({\r\n    name: 'ddtime',\r\n    pure: false,\r\n})\r\nexport class TimePipe implements PipeTransform, OnDestroy {\r\n    constructor(private localeService: DdLocaleService, private cdr: ChangeDetectorRef) {\r\n        this.localChanges$ = this.localeService.getDateLocale$().pipe(shareReplay(1));\r\n    }\r\n\r\n    private readonly localChanges$: Observable<Locale>;\r\n\r\n    private lastValue?: string;\r\n    private subscription?: Subscription;\r\n\r\n    transform(value: Date | string | number | null | undefined): string | undefined {\r\n        this.subscription?.unsubscribe();\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        // Create tmp property from the input for the format function.\r\n        let dateValue: Date | number;\r\n        if (typeof value === 'string') {\r\n            const timestamp = Date.parse(value);\r\n\r\n            // Try to see if the date is faulty.\r\n            if (isNaN(timestamp)) {\r\n                return '';\r\n            }\r\n\r\n            dateValue = timestamp;\r\n        } else {\r\n            dateValue = value;\r\n        }\r\n\r\n        // Create subscription for language changes that will format the new value and then call markForCheck to trigger change detection.\r\n        this.subscription = this.localChanges$.subscribe((l) => {\r\n            this.lastValue = format(dateValue, 'p', { locale: l }) ?? '';\r\n            this.cdr.markForCheck();\r\n        });\r\n\r\n        return this.lastValue;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription?.unsubscribe();\r\n        delete this.subscription;\r\n    }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "BindingsDictionary",
            "id": "interface-BindingsDictionary-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Handler",
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonGroupModel",
            "id": "interface-ButtonGroupModel-07981fdfa35e5a377ec1e7cc0bcfe3489f206574e84701869b30b3a69fd5edc42a604ef7db408624ab0ba842ff5bc158889aae20781aaa5455244d16e07b2dec",
            "file": "projects/digital-delights-library/src/button/models/button-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ButtonGroupModel {\r\n    /** Text for the button. */\r\n    text: string;\r\n    /** Adds aria label to the individual button. */\r\n    ariaLabel: string;\r\n    /** Adds dd-icon to button. */\r\n    icon: string;\r\n    /** Makes the button disabled, button does not output anything when it's disabled. */\r\n    disabled?: boolean;\r\n    /** Role attribute for individual button. */\r\n    role?: string;\r\n    /** Adds url support to button click. */\r\n    url?: string | string[];\r\n    /** Allows url to be opened in new tab. */\r\n    target?: '_blank';\r\n    /** Function to be called on button click. */\r\n    buttonClick?: () => void;\r\n    /** Hide arrow icon on button. */\r\n    hideArrowIcon?: boolean;\r\n    /** Loading indicator */\r\n    loading$?: Observable<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Adds aria label to the individual button.</p>\n",
                    "line": 7,
                    "rawdescription": "\nAdds aria label to the individual button."
                },
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Function to be called on button click.</p>\n",
                    "line": 19,
                    "rawdescription": "\nFunction to be called on button click."
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Makes the button disabled, button does not output anything when it&#39;s disabled.</p>\n",
                    "line": 11,
                    "rawdescription": "\nMakes the button disabled, button does not output anything when it's disabled."
                },
                {
                    "name": "hideArrowIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Hide arrow icon on button.</p>\n",
                    "line": 21,
                    "rawdescription": "\nHide arrow icon on button."
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Adds dd-icon to button.</p>\n",
                    "line": 9,
                    "rawdescription": "\nAdds dd-icon to button."
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>Loading indicator</p>\n",
                    "line": 23,
                    "rawdescription": "\nLoading indicator"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Role attribute for individual button.</p>\n",
                    "line": 13,
                    "rawdescription": "\nRole attribute for individual button."
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 17,
                    "rawdescription": "\nAllows url to be opened in new tab."
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text for the button.</p>\n",
                    "line": 5,
                    "rawdescription": "\nText for the button."
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Adds url support to button click.</p>\n",
                    "line": 15,
                    "rawdescription": "\nAdds url support to button click."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmSelectionOverlayModel",
            "id": "interface-ConfirmSelectionOverlayModel-86497b4f40582dafa425f6ad37f1c7b456efd370cf91291521eefa7b59e275cae544a8545e8933836a0a9262f6224990b442fb66e83926491841119f20c0415b",
            "file": "projects/digital-delights-library/src/overlay/components/confirm-selection-overlay/confirm-selection-overlay.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Inject, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { OverlayAnimationState } from '../../models/animations';\r\nimport { OVERLAY_DATA } from '../../models/overlay';\r\n\r\nexport interface ConfirmSelectionOverlayModel {\r\n    heading: string;\r\n    bodyText?: string;\r\n    cancelButtonText?: string;\r\n    confirmButtonText?: string;\r\n    useAnimation?: boolean;\r\n    /** User can define action that is run when user clicks cancel button. */\r\n    cancelSelection$?: () => Observable<boolean>;\r\n    confirmSelection$: () => Observable<boolean>;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-confirm-selection-overlay',\r\n    templateUrl: './confirm-selection-overlay.component.html',\r\n    styleUrls: ['./confirm-selection-overlay.component.scss'],\r\n})\r\nexport class ConfirmSelectionOverlayComponent implements OnDestroy, OnInit {\r\n    constructor(@Inject(OVERLAY_DATA) public data: ConfirmSelectionOverlayModel) {}\r\n\r\n    @Output() closeOverlay: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    viewState?: OverlayAnimationState;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<void> = new Subject();\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next();\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.data?.useAnimation) {\r\n            this.viewState = 'in-top';\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (this.data?.cancelSelection$) {\r\n            this.data\r\n                .cancelSelection$()\r\n                .pipe(take(1), takeUntil(this._unsubscribeAllSubject))\r\n                .subscribe((success: boolean) => {\r\n                    if (success) {\r\n                        this.closeOverlay.emit(false);\r\n                    }\r\n                });\r\n        } else {\r\n            this.closeOverlay.emit(false);\r\n        }\r\n    }\r\n\r\n    confirm(): void {\r\n        if (!this.data) {\r\n            return;\r\n        }\r\n\r\n        this.data\r\n            .confirmSelection$()\r\n            .pipe(take(1), takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((success: boolean) => {\r\n                if (success) {\r\n                    this.closeOverlay.emit(true);\r\n                }\r\n            });\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "cancelButtonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "cancelSelection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>User can define action that is run when user clicks cancel button.</p>\n",
                    "line": 14,
                    "rawdescription": "\nUser can define action that is run when user clicks cancel button."
                },
                {
                    "name": "confirmButtonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "confirmSelection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "useAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DatepickerLegendTranslations",
            "id": "interface-DatepickerLegendTranslations-0bb8878028be7afcd30ad76d0cfd9127b8331b061bd84844f4cb0551c39e6bde2b74b1e4a5f416a281ae0fd6b2534e356823fb61ba98aa844356e60ac317f607",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DdLocaleService } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { Locale, addDays, addMonths, eachDayOfInterval, endOfDay, endOfMonth, format, getDate, getDay, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, isToday, setDay, startOfDay, startOfMonth, subDays } from 'date-fns';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Represents a day in the datepicker.\r\n */\r\nexport interface Day {\r\n    date: Date;\r\n    day: number;\r\n    month: number;\r\n    year: number;\r\n    inThisMonth: boolean;\r\n    isToday: boolean;\r\n    isSelected: boolean;\r\n    isSelectable: boolean;\r\n    /** If the Day is found from selectableDates it will be highlighted as green. */\r\n    isHighlighted: boolean;\r\n    hasNoFreeSlots: boolean;\r\n}\r\n\r\n/**\r\n * Configuration options for the datepicker.\r\n */\r\nexport interface DatepickerOptions {\r\n    /** The earliest date that can be selected. */\r\n    minDate?: Date | null;\r\n    /** The latest date that can be selected. */\r\n    maxDate?: Date | null;\r\n    /** The day to display as the first day of the week. Sunday is 0. */\r\n    firstCalendarDay?: number;\r\n    /** Translations for the calendar legend. */\r\n    legendTranslations?: DatepickerLegendTranslations;\r\n    /** If true, all dates within the min and max dates are selectable. */\r\n    allSelectable?: boolean;\r\n}\r\n\r\n/**\r\n * Translations for the calendar legend.\r\n */\r\nexport interface DatepickerLegendTranslations {\r\n    selectedDate?: string;\r\n    freeSlots?: string;\r\n    currentDate?: string;\r\n    allReserved?: string;\r\n    noSlotsAvailable?: string;\r\n}\r\n\r\n/**\r\n * Default configuration options for the datepicker.\r\n */\r\nexport const defaultOptions: DatepickerOptions = {\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n};\r\n\r\n/**\r\n * Provides a datepicker component.\r\n */\r\n@Component({\r\n    selector: 'dd-datepicker',\r\n    templateUrl: './datepicker.component.html',\r\n    styleUrls: ['./datepicker.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }],\r\n})\r\nexport class DatepickerComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n    constructor(localeService: DdLocaleService) {\r\n        // Fetch the language locale data.\r\n        localeService\r\n            .getDateLocale$()\r\n            .pipe(takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((locale?: Locale) => {\r\n                this.locale = locale;\r\n            });\r\n\r\n        this.days = [];\r\n    }\r\n\r\n    /** Configuration for the datepicker. */\r\n    @Input() options: DatepickerOptions = { ...defaultOptions };\r\n\r\n    /** Dates that can be selected. Also affected by @see DatepickerOptions min and max. */\r\n    @Input() selectableDates: Date[] = [];\r\n\r\n    /** Dates that can be selected and have free slots. */\r\n    @Input() noFreeSlotsDates: Date[] = [];\r\n\r\n    /**\r\n     * The date (month) that the datepicker is currently showing.\r\n     * If this value is initialized, that month is shown first.\r\n     */\r\n    @Input() date: Date = new Date();\r\n\r\n    locale?: Locale;\r\n\r\n    /** The currently selected date. */\r\n    selected: Date = new Date();\r\n    /** The days currently being shown. */\r\n    days: Day[];\r\n\r\n    /** The names of the weekdays for the header row. */\r\n    dayNames?: string[];\r\n\r\n    /** The current date to display in the legend. */\r\n    currentDate?: Day;\r\n\r\n    // eslint-disable-next-line rxjs/no-exposed-subjects\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /**\r\n     * Returns the title of the datepicker, which is the formatted date.\r\n     * More info about formats: https://date-fns.org/v2.22.1/docs/format\r\n     */\r\n    get title(): string {\r\n        return format(this.date, 'LLLL yyyy', { locale: this.locale });\r\n    }\r\n\r\n    get value(): Date {\r\n        return this.selected;\r\n    }\r\n\r\n    set value(val: Date) {\r\n        this.selected = val;\r\n        this.onChangeCallback(this.selected);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initDays();\r\n        this.dayNames = this.initDayNames();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        this.initDays();\r\n    }\r\n\r\n    selectDate(day: Day): void {\r\n        this.date = day.date;\r\n        this.value = day.date;\r\n\r\n        for (const d of this.days) {\r\n            this.updateDay(d);\r\n        }\r\n    }\r\n\r\n    changeMonth(change: -1 | 1): void {\r\n        this.date = addMonths(this.date, change);\r\n        this.initDays();\r\n    }\r\n\r\n    private initDayNames(): string[] {\r\n        const dayNames: string[] = [];\r\n        const start = this.options.firstCalendarDay as number;\r\n        for (let i = start; i <= 6 + start; i++) {\r\n            const date = setDay(new Date(), i);\r\n            dayNames.push(format(date, 'EEEEEE', { locale: this.locale }));\r\n        }\r\n        return dayNames;\r\n    }\r\n\r\n    /** Refreshes days array to match current date. */\r\n    private initDays(): void {\r\n        const [start, end] = [startOfMonth(this.date), endOfMonth(this.date)];\r\n\r\n        this.days = eachDayOfInterval({ start, end }).map((d: Date) => this.generateDay(d));\r\n\r\n        // Generate days from previous month\r\n        let tmp = getDay(start) - (this.options.firstCalendarDay as number);\r\n        const prevDays = tmp < 0 ? 7 - (this.options.firstCalendarDay as number) : tmp;\r\n        for (let i = 1; i <= prevDays; i++) {\r\n            const d: Date = subDays(start, i);\r\n            this.days.unshift(this.generateDay(d, false));\r\n        }\r\n\r\n        // Generate days from next month\r\n        tmp = 7 - getDay(end);\r\n        const nextDays = tmp > 6 ? 0 : tmp;\r\n        for (let i = 1; i <= nextDays; i++) {\r\n            const d: Date = addDays(end, i);\r\n            this.days.push(this.generateDay(d, false));\r\n        }\r\n    }\r\n\r\n    private generateDay(date: Date, inThisMonth: boolean = true): Day {\r\n        // Reset time, as we dont care about that.\r\n        date.setHours(0, 0, 0, 0);\r\n\r\n        const day = {\r\n            date,\r\n            day: getDate(date),\r\n            month: getMonth(date),\r\n            year: getYear(date),\r\n            inThisMonth,\r\n            isToday: isToday(date),\r\n            isSelected: !!this.selected && this.isSameDate(date, this.selected),\r\n            isSelectable: this.isValidDate(date, this.options.allSelectable),\r\n            isHighlighted: this.isValidDate(date),\r\n            hasNoFreeSlots: this.hasNoFreeSlots(date),\r\n        };\r\n\r\n        if (day.isToday) {\r\n            this.currentDate = day;\r\n        }\r\n\r\n        return day;\r\n    }\r\n\r\n    private updateDay(day: Day): void {\r\n        day.isSelected = !!this.selected && this.isSameDate(day.date, this.selected);\r\n    }\r\n\r\n    private isValidDate(date: Date, allSelectable?: boolean): boolean {\r\n        if (this.options.minDate && isBefore(date, startOfDay(this.options.minDate))) {\r\n            return false;\r\n        }\r\n\r\n        if (this.options.maxDate && isAfter(date, endOfDay(this.options.maxDate))) {\r\n            return false;\r\n        }\r\n\r\n        // Any dates outside selected month should not be selectable.\r\n        if (!isSameMonth(date, this.date)) {\r\n            return false;\r\n        }\r\n\r\n        // only selectableDates are valid unless allSelectable option is enabled.\r\n        return !!allSelectable || this.selectableDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    /** Check if two dates are equal. Ignores time. */\r\n    private isSameDate(a: Date, b: Date): boolean {\r\n        if (!isSameDay(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameMonth(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameYear(a, b)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private hasNoFreeSlots(date: Date): boolean {\r\n        return this.noFreeSlotsDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    writeValue(val: Date): void {\r\n        if (!val) {\r\n            return;\r\n        }\r\n        this.selected = val;\r\n        this.initDays();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    private onTouchedCallback: () => void = () => {};\r\n    private onChangeCallback: (_: any) => void = () => {};\r\n}\r\n",
            "properties": [
                {
                    "name": "allReserved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "freeSlots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "noSlotsAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Translations for the calendar legend.</p>\n",
            "rawdescription": "\n\nTranslations for the calendar legend.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "DatepickerOptions",
            "id": "interface-DatepickerOptions-0bb8878028be7afcd30ad76d0cfd9127b8331b061bd84844f4cb0551c39e6bde2b74b1e4a5f416a281ae0fd6b2534e356823fb61ba98aa844356e60ac317f607",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DdLocaleService } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { Locale, addDays, addMonths, eachDayOfInterval, endOfDay, endOfMonth, format, getDate, getDay, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, isToday, setDay, startOfDay, startOfMonth, subDays } from 'date-fns';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Represents a day in the datepicker.\r\n */\r\nexport interface Day {\r\n    date: Date;\r\n    day: number;\r\n    month: number;\r\n    year: number;\r\n    inThisMonth: boolean;\r\n    isToday: boolean;\r\n    isSelected: boolean;\r\n    isSelectable: boolean;\r\n    /** If the Day is found from selectableDates it will be highlighted as green. */\r\n    isHighlighted: boolean;\r\n    hasNoFreeSlots: boolean;\r\n}\r\n\r\n/**\r\n * Configuration options for the datepicker.\r\n */\r\nexport interface DatepickerOptions {\r\n    /** The earliest date that can be selected. */\r\n    minDate?: Date | null;\r\n    /** The latest date that can be selected. */\r\n    maxDate?: Date | null;\r\n    /** The day to display as the first day of the week. Sunday is 0. */\r\n    firstCalendarDay?: number;\r\n    /** Translations for the calendar legend. */\r\n    legendTranslations?: DatepickerLegendTranslations;\r\n    /** If true, all dates within the min and max dates are selectable. */\r\n    allSelectable?: boolean;\r\n}\r\n\r\n/**\r\n * Translations for the calendar legend.\r\n */\r\nexport interface DatepickerLegendTranslations {\r\n    selectedDate?: string;\r\n    freeSlots?: string;\r\n    currentDate?: string;\r\n    allReserved?: string;\r\n    noSlotsAvailable?: string;\r\n}\r\n\r\n/**\r\n * Default configuration options for the datepicker.\r\n */\r\nexport const defaultOptions: DatepickerOptions = {\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n};\r\n\r\n/**\r\n * Provides a datepicker component.\r\n */\r\n@Component({\r\n    selector: 'dd-datepicker',\r\n    templateUrl: './datepicker.component.html',\r\n    styleUrls: ['./datepicker.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }],\r\n})\r\nexport class DatepickerComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n    constructor(localeService: DdLocaleService) {\r\n        // Fetch the language locale data.\r\n        localeService\r\n            .getDateLocale$()\r\n            .pipe(takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((locale?: Locale) => {\r\n                this.locale = locale;\r\n            });\r\n\r\n        this.days = [];\r\n    }\r\n\r\n    /** Configuration for the datepicker. */\r\n    @Input() options: DatepickerOptions = { ...defaultOptions };\r\n\r\n    /** Dates that can be selected. Also affected by @see DatepickerOptions min and max. */\r\n    @Input() selectableDates: Date[] = [];\r\n\r\n    /** Dates that can be selected and have free slots. */\r\n    @Input() noFreeSlotsDates: Date[] = [];\r\n\r\n    /**\r\n     * The date (month) that the datepicker is currently showing.\r\n     * If this value is initialized, that month is shown first.\r\n     */\r\n    @Input() date: Date = new Date();\r\n\r\n    locale?: Locale;\r\n\r\n    /** The currently selected date. */\r\n    selected: Date = new Date();\r\n    /** The days currently being shown. */\r\n    days: Day[];\r\n\r\n    /** The names of the weekdays for the header row. */\r\n    dayNames?: string[];\r\n\r\n    /** The current date to display in the legend. */\r\n    currentDate?: Day;\r\n\r\n    // eslint-disable-next-line rxjs/no-exposed-subjects\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /**\r\n     * Returns the title of the datepicker, which is the formatted date.\r\n     * More info about formats: https://date-fns.org/v2.22.1/docs/format\r\n     */\r\n    get title(): string {\r\n        return format(this.date, 'LLLL yyyy', { locale: this.locale });\r\n    }\r\n\r\n    get value(): Date {\r\n        return this.selected;\r\n    }\r\n\r\n    set value(val: Date) {\r\n        this.selected = val;\r\n        this.onChangeCallback(this.selected);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initDays();\r\n        this.dayNames = this.initDayNames();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        this.initDays();\r\n    }\r\n\r\n    selectDate(day: Day): void {\r\n        this.date = day.date;\r\n        this.value = day.date;\r\n\r\n        for (const d of this.days) {\r\n            this.updateDay(d);\r\n        }\r\n    }\r\n\r\n    changeMonth(change: -1 | 1): void {\r\n        this.date = addMonths(this.date, change);\r\n        this.initDays();\r\n    }\r\n\r\n    private initDayNames(): string[] {\r\n        const dayNames: string[] = [];\r\n        const start = this.options.firstCalendarDay as number;\r\n        for (let i = start; i <= 6 + start; i++) {\r\n            const date = setDay(new Date(), i);\r\n            dayNames.push(format(date, 'EEEEEE', { locale: this.locale }));\r\n        }\r\n        return dayNames;\r\n    }\r\n\r\n    /** Refreshes days array to match current date. */\r\n    private initDays(): void {\r\n        const [start, end] = [startOfMonth(this.date), endOfMonth(this.date)];\r\n\r\n        this.days = eachDayOfInterval({ start, end }).map((d: Date) => this.generateDay(d));\r\n\r\n        // Generate days from previous month\r\n        let tmp = getDay(start) - (this.options.firstCalendarDay as number);\r\n        const prevDays = tmp < 0 ? 7 - (this.options.firstCalendarDay as number) : tmp;\r\n        for (let i = 1; i <= prevDays; i++) {\r\n            const d: Date = subDays(start, i);\r\n            this.days.unshift(this.generateDay(d, false));\r\n        }\r\n\r\n        // Generate days from next month\r\n        tmp = 7 - getDay(end);\r\n        const nextDays = tmp > 6 ? 0 : tmp;\r\n        for (let i = 1; i <= nextDays; i++) {\r\n            const d: Date = addDays(end, i);\r\n            this.days.push(this.generateDay(d, false));\r\n        }\r\n    }\r\n\r\n    private generateDay(date: Date, inThisMonth: boolean = true): Day {\r\n        // Reset time, as we dont care about that.\r\n        date.setHours(0, 0, 0, 0);\r\n\r\n        const day = {\r\n            date,\r\n            day: getDate(date),\r\n            month: getMonth(date),\r\n            year: getYear(date),\r\n            inThisMonth,\r\n            isToday: isToday(date),\r\n            isSelected: !!this.selected && this.isSameDate(date, this.selected),\r\n            isSelectable: this.isValidDate(date, this.options.allSelectable),\r\n            isHighlighted: this.isValidDate(date),\r\n            hasNoFreeSlots: this.hasNoFreeSlots(date),\r\n        };\r\n\r\n        if (day.isToday) {\r\n            this.currentDate = day;\r\n        }\r\n\r\n        return day;\r\n    }\r\n\r\n    private updateDay(day: Day): void {\r\n        day.isSelected = !!this.selected && this.isSameDate(day.date, this.selected);\r\n    }\r\n\r\n    private isValidDate(date: Date, allSelectable?: boolean): boolean {\r\n        if (this.options.minDate && isBefore(date, startOfDay(this.options.minDate))) {\r\n            return false;\r\n        }\r\n\r\n        if (this.options.maxDate && isAfter(date, endOfDay(this.options.maxDate))) {\r\n            return false;\r\n        }\r\n\r\n        // Any dates outside selected month should not be selectable.\r\n        if (!isSameMonth(date, this.date)) {\r\n            return false;\r\n        }\r\n\r\n        // only selectableDates are valid unless allSelectable option is enabled.\r\n        return !!allSelectable || this.selectableDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    /** Check if two dates are equal. Ignores time. */\r\n    private isSameDate(a: Date, b: Date): boolean {\r\n        if (!isSameDay(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameMonth(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameYear(a, b)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private hasNoFreeSlots(date: Date): boolean {\r\n        return this.noFreeSlotsDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    writeValue(val: Date): void {\r\n        if (!val) {\r\n            return;\r\n        }\r\n        this.selected = val;\r\n        this.initDays();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    private onTouchedCallback: () => void = () => {};\r\n    private onChangeCallback: (_: any) => void = () => {};\r\n}\r\n",
            "properties": [
                {
                    "name": "allSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If true, all dates within the min and max dates are selectable.</p>\n",
                    "line": 38,
                    "rawdescription": "\nIf true, all dates within the min and max dates are selectable."
                },
                {
                    "name": "firstCalendarDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The day to display as the first day of the week. Sunday is 0.</p>\n",
                    "line": 34,
                    "rawdescription": "\nThe day to display as the first day of the week. Sunday is 0."
                },
                {
                    "name": "legendTranslations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerLegendTranslations",
                    "optional": true,
                    "description": "<p>Translations for the calendar legend.</p>\n",
                    "line": 36,
                    "rawdescription": "\nTranslations for the calendar legend."
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": true,
                    "description": "<p>The latest date that can be selected.</p>\n",
                    "line": 32,
                    "rawdescription": "\nThe latest date that can be selected."
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": true,
                    "description": "<p>The earliest date that can be selected.</p>\n",
                    "line": 30,
                    "rawdescription": "\nThe earliest date that can be selected."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Configuration options for the datepicker.</p>\n",
            "rawdescription": "\n\nConfiguration options for the datepicker.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "Day",
            "id": "interface-Day-0bb8878028be7afcd30ad76d0cfd9127b8331b061bd84844f4cb0551c39e6bde2b74b1e4a5f416a281ae0fd6b2534e356823fb61ba98aa844356e60ac317f607",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DdLocaleService } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { Locale, addDays, addMonths, eachDayOfInterval, endOfDay, endOfMonth, format, getDate, getDay, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, isToday, setDay, startOfDay, startOfMonth, subDays } from 'date-fns';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Represents a day in the datepicker.\r\n */\r\nexport interface Day {\r\n    date: Date;\r\n    day: number;\r\n    month: number;\r\n    year: number;\r\n    inThisMonth: boolean;\r\n    isToday: boolean;\r\n    isSelected: boolean;\r\n    isSelectable: boolean;\r\n    /** If the Day is found from selectableDates it will be highlighted as green. */\r\n    isHighlighted: boolean;\r\n    hasNoFreeSlots: boolean;\r\n}\r\n\r\n/**\r\n * Configuration options for the datepicker.\r\n */\r\nexport interface DatepickerOptions {\r\n    /** The earliest date that can be selected. */\r\n    minDate?: Date | null;\r\n    /** The latest date that can be selected. */\r\n    maxDate?: Date | null;\r\n    /** The day to display as the first day of the week. Sunday is 0. */\r\n    firstCalendarDay?: number;\r\n    /** Translations for the calendar legend. */\r\n    legendTranslations?: DatepickerLegendTranslations;\r\n    /** If true, all dates within the min and max dates are selectable. */\r\n    allSelectable?: boolean;\r\n}\r\n\r\n/**\r\n * Translations for the calendar legend.\r\n */\r\nexport interface DatepickerLegendTranslations {\r\n    selectedDate?: string;\r\n    freeSlots?: string;\r\n    currentDate?: string;\r\n    allReserved?: string;\r\n    noSlotsAvailable?: string;\r\n}\r\n\r\n/**\r\n * Default configuration options for the datepicker.\r\n */\r\nexport const defaultOptions: DatepickerOptions = {\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n};\r\n\r\n/**\r\n * Provides a datepicker component.\r\n */\r\n@Component({\r\n    selector: 'dd-datepicker',\r\n    templateUrl: './datepicker.component.html',\r\n    styleUrls: ['./datepicker.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }],\r\n})\r\nexport class DatepickerComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n    constructor(localeService: DdLocaleService) {\r\n        // Fetch the language locale data.\r\n        localeService\r\n            .getDateLocale$()\r\n            .pipe(takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((locale?: Locale) => {\r\n                this.locale = locale;\r\n            });\r\n\r\n        this.days = [];\r\n    }\r\n\r\n    /** Configuration for the datepicker. */\r\n    @Input() options: DatepickerOptions = { ...defaultOptions };\r\n\r\n    /** Dates that can be selected. Also affected by @see DatepickerOptions min and max. */\r\n    @Input() selectableDates: Date[] = [];\r\n\r\n    /** Dates that can be selected and have free slots. */\r\n    @Input() noFreeSlotsDates: Date[] = [];\r\n\r\n    /**\r\n     * The date (month) that the datepicker is currently showing.\r\n     * If this value is initialized, that month is shown first.\r\n     */\r\n    @Input() date: Date = new Date();\r\n\r\n    locale?: Locale;\r\n\r\n    /** The currently selected date. */\r\n    selected: Date = new Date();\r\n    /** The days currently being shown. */\r\n    days: Day[];\r\n\r\n    /** The names of the weekdays for the header row. */\r\n    dayNames?: string[];\r\n\r\n    /** The current date to display in the legend. */\r\n    currentDate?: Day;\r\n\r\n    // eslint-disable-next-line rxjs/no-exposed-subjects\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /**\r\n     * Returns the title of the datepicker, which is the formatted date.\r\n     * More info about formats: https://date-fns.org/v2.22.1/docs/format\r\n     */\r\n    get title(): string {\r\n        return format(this.date, 'LLLL yyyy', { locale: this.locale });\r\n    }\r\n\r\n    get value(): Date {\r\n        return this.selected;\r\n    }\r\n\r\n    set value(val: Date) {\r\n        this.selected = val;\r\n        this.onChangeCallback(this.selected);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initDays();\r\n        this.dayNames = this.initDayNames();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        this.initDays();\r\n    }\r\n\r\n    selectDate(day: Day): void {\r\n        this.date = day.date;\r\n        this.value = day.date;\r\n\r\n        for (const d of this.days) {\r\n            this.updateDay(d);\r\n        }\r\n    }\r\n\r\n    changeMonth(change: -1 | 1): void {\r\n        this.date = addMonths(this.date, change);\r\n        this.initDays();\r\n    }\r\n\r\n    private initDayNames(): string[] {\r\n        const dayNames: string[] = [];\r\n        const start = this.options.firstCalendarDay as number;\r\n        for (let i = start; i <= 6 + start; i++) {\r\n            const date = setDay(new Date(), i);\r\n            dayNames.push(format(date, 'EEEEEE', { locale: this.locale }));\r\n        }\r\n        return dayNames;\r\n    }\r\n\r\n    /** Refreshes days array to match current date. */\r\n    private initDays(): void {\r\n        const [start, end] = [startOfMonth(this.date), endOfMonth(this.date)];\r\n\r\n        this.days = eachDayOfInterval({ start, end }).map((d: Date) => this.generateDay(d));\r\n\r\n        // Generate days from previous month\r\n        let tmp = getDay(start) - (this.options.firstCalendarDay as number);\r\n        const prevDays = tmp < 0 ? 7 - (this.options.firstCalendarDay as number) : tmp;\r\n        for (let i = 1; i <= prevDays; i++) {\r\n            const d: Date = subDays(start, i);\r\n            this.days.unshift(this.generateDay(d, false));\r\n        }\r\n\r\n        // Generate days from next month\r\n        tmp = 7 - getDay(end);\r\n        const nextDays = tmp > 6 ? 0 : tmp;\r\n        for (let i = 1; i <= nextDays; i++) {\r\n            const d: Date = addDays(end, i);\r\n            this.days.push(this.generateDay(d, false));\r\n        }\r\n    }\r\n\r\n    private generateDay(date: Date, inThisMonth: boolean = true): Day {\r\n        // Reset time, as we dont care about that.\r\n        date.setHours(0, 0, 0, 0);\r\n\r\n        const day = {\r\n            date,\r\n            day: getDate(date),\r\n            month: getMonth(date),\r\n            year: getYear(date),\r\n            inThisMonth,\r\n            isToday: isToday(date),\r\n            isSelected: !!this.selected && this.isSameDate(date, this.selected),\r\n            isSelectable: this.isValidDate(date, this.options.allSelectable),\r\n            isHighlighted: this.isValidDate(date),\r\n            hasNoFreeSlots: this.hasNoFreeSlots(date),\r\n        };\r\n\r\n        if (day.isToday) {\r\n            this.currentDate = day;\r\n        }\r\n\r\n        return day;\r\n    }\r\n\r\n    private updateDay(day: Day): void {\r\n        day.isSelected = !!this.selected && this.isSameDate(day.date, this.selected);\r\n    }\r\n\r\n    private isValidDate(date: Date, allSelectable?: boolean): boolean {\r\n        if (this.options.minDate && isBefore(date, startOfDay(this.options.minDate))) {\r\n            return false;\r\n        }\r\n\r\n        if (this.options.maxDate && isAfter(date, endOfDay(this.options.maxDate))) {\r\n            return false;\r\n        }\r\n\r\n        // Any dates outside selected month should not be selectable.\r\n        if (!isSameMonth(date, this.date)) {\r\n            return false;\r\n        }\r\n\r\n        // only selectableDates are valid unless allSelectable option is enabled.\r\n        return !!allSelectable || this.selectableDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    /** Check if two dates are equal. Ignores time. */\r\n    private isSameDate(a: Date, b: Date): boolean {\r\n        if (!isSameDay(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameMonth(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameYear(a, b)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private hasNoFreeSlots(date: Date): boolean {\r\n        return this.noFreeSlotsDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    writeValue(val: Date): void {\r\n        if (!val) {\r\n            return;\r\n        }\r\n        this.selected = val;\r\n        this.initDays();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    private onTouchedCallback: () => void = () => {};\r\n    private onChangeCallback: (_: any) => void = () => {};\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hasNoFreeSlots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inThisMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isHighlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>If the Day is found from selectableDates it will be highlighted as green.</p>\n",
                    "line": 21,
                    "rawdescription": "\nIf the Day is found from selectableDates it will be highlighted as green."
                },
                {
                    "name": "isSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isToday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Represents a day in the datepicker.</p>\n",
            "rawdescription": "\n\nRepresents a day in the datepicker.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "DdStep",
            "id": "interface-DdStep-8b2811c4e2f5844dfcbd2f30fc02a3b8018cedee5021149fc955037ec270950aee268ecbf68ecb8d9a9d4a44e0f52e93b161616dd21e18c27147f3380378304f",
            "file": "projects/digital-delights-library/src/stepper/components/stepper/stepper.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nexport interface DdStep {\r\n    /**\r\n     * Icon for the step.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Title for the step.\r\n     */\r\n    title: string;\r\n\r\n    /**\r\n     * Router link url for the step.\r\n     * If url is provided then the elements renders elements as div instead of a tag.\r\n     */\r\n    url?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-stepper',\r\n    templateUrl: './stepper.component.html',\r\n    styleUrls: ['./stepper.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StepperComponent {\r\n    /**\r\n     * Input steps, does not render anything if steps are not defined.\r\n     */\r\n    @Input() steps?: DdStep[];\r\n\r\n    /**\r\n     * Index of the selected step.\r\n     * Steps are only selectable backwards.\r\n     *\r\n     * Selected index is needed so we can identify backwards which steps are active.\r\n     * RouterLinkActive is not sufficient for this as we don't know previous routes that are active.\r\n     */\r\n    @Input() selectedIndex: number = 0;\r\n\r\n    /**\r\n     * Outputs the index of step that was clicked.\r\n     */\r\n    @Output() stepClick: EventEmitter<number> = new EventEmitter();\r\n\r\n    /** Helper for reducing the code in the template. */\r\n    getButtonClasses(i: number): { [klass: string]: any } {\r\n        return {\r\n            'border-left border-radius-6-left': i === 0,\r\n            'dd-accent dd-accent-darkest-border border-top border-bottom cursor-pointer dd-accent-darker-hover dd-accent-darkest-active': i <= this.selectedIndex,\r\n            'border-radius-6-right': this.steps && i === this.steps.length - 1,\r\n            bold: i === this.selectedIndex,\r\n            'cursor-not-allowed': i > this.selectedIndex,\r\n            'border-right': i !== this.selectedIndex,\r\n            'move-under-arrow': this.selectedIndex + 1 === i,\r\n        };\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon for the step.</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nIcon for the step.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title for the step.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nTitle for the step.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Router link url for the step.\nIf url is provided then the elements renders elements as div instead of a tag.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nRouter link url for the step.\nIf url is provided then the elements renders elements as div instead of a tag.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FileErrorMessages",
            "id": "interface-FileErrorMessages-cd1b867c67bf98fb885992f67788afb46ddbbb3f67a5e7c1de148bee8480e1110a239459d4a7c29e89349c3b2dd66b34c8e008aad40219322223bb947ab8faea",
            "file": "projects/digital-delights-library/src/file-upload/file-validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface FileErrorMessages {\r\n    required?: string;\r\n    uniqueFileNames?: string;\r\n    fileExtension?: string;\r\n    maxFileSize?: string;\r\n}\r\n\r\nexport class FileValidators {\r\n    static fileExtension(ext: string[]): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            if (control.value) {\r\n                const validExtensions = ext.map((e) => e.trim().toLowerCase());\r\n                const fileArray = control.value as File[];\r\n\r\n                const invalidFiles = fileArray\r\n                    .map((file) => file.name)\r\n                    .filter((fname) => {\r\n                        const extension = fname.slice(((fname.lastIndexOf('.') - 1) >>> 0) + 2).toLowerCase();\r\n                        return !validExtensions.includes(extension);\r\n                    })\r\n                    .map((name) => ({ name, ext: name.slice(((name.lastIndexOf('.') - 1) >>> 0) + 2) }));\r\n\r\n                return !invalidFiles.length ? null : { fileExtension: { requiredExtension: ext.toString(), actualExtensions: invalidFiles } };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    static uniqueFileNames(control: AbstractControl): ValidationErrors | null {\r\n        if (control.value) {\r\n            const fileNameArray = (control.value as File[]).map((file) => file.name);\r\n\r\n            const duplicates = fileNameArray.reduce((acc, curr) => {\r\n                acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\r\n                return acc;\r\n            }, {} as any);\r\n\r\n            const duplicatesArray: { name: string; count: number }[] = (Object.entries(duplicates) as [string, number][]).filter((arr) => arr[1] > 1).map((arr) => ({ name: arr[0], count: arr[1] }));\r\n\r\n            return !duplicatesArray.length ? null : { uniqueFileNames: { duplicatedFileNames: duplicatesArray } };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static maxFileSize(bytes: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            if (control.value) {\r\n                const fileArray = control.value as File[];\r\n\r\n                const invalidFiles: { name: string; size: number }[] = fileArray.filter((file) => file.size > bytes).map((file) => ({ name: file.name, size: file.size }));\r\n\r\n                return !invalidFiles.length ? null : { maxFileSize: { maxSize: bytes, actualSizes: invalidFiles } };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    static required(control: AbstractControl): ValidationErrors | null {\r\n        const count = control?.value?.length;\r\n        return count ? null : { required: true };\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "fileExtension",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "uniqueFileNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormFieldDatepickerModel",
            "id": "interface-FormFieldDatepickerModel-414d8f56ce73ce2e2a5844f2e4503ae7d2c253765d123df1caa2491dac7af1bbdd70229f9003ee2276ad98b641e394046e94ebd244348767d8df933fd25bf29a",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-field-datepicker/form-field-datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { DatepickerOptions } from '@digitaldelightsoy/design-library/src/datepicker';\r\nimport { OVERLAY_DATA } from '@digitaldelightsoy/design-library/src/overlay';\r\n\r\nexport interface FormFieldDatepickerModel {\r\n    options: DatepickerOptions;\r\n    selectedDate: Date;\r\n    selectableDates?: Date[];\r\n}\r\n@Component({\r\n    selector: 'dd-form-field-datepicker',\r\n    templateUrl: './form-field-datepicker.component.html',\r\n    styleUrls: ['./form-field-datepicker.component.scss'],\r\n})\r\nexport class FormFieldDatepickerComponent {\r\n    constructor(@Inject(OVERLAY_DATA) public data: FormFieldDatepickerModel) {\r\n        this.date = data.selectedDate;\r\n        if (data.selectableDates) {\r\n            this.selectableDates = data.selectableDates;\r\n        }\r\n    }\r\n\r\n    /** Emit itemclick so that it can be used in form field. */\r\n    @Output() itemClick: EventEmitter<Date> = new EventEmitter();\r\n\r\n    /** Selected date. */\r\n    date: Date = new Date();\r\n\r\n    selectableDates: Date[] = [];\r\n}\r\n",
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerOptions",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectableDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataOverlay",
            "id": "interface-IDataOverlay-2ac641fb93805a3dd3ca3081e0ecbb7e78205c8f95ef510a9ab70d0bb62a47b4395109db1047651c122e21017846a1ba6a83475f5a1e57774611e275e7e755c4",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport const OVERLAY_DATA: InjectionToken<{}> = new InjectionToken<{}>('OverlayData');\r\nexport const OVERLAY_REF: InjectionToken<{}> = new InjectionToken<OverlayRef>('OverlayRef');\r\n\r\n/**\r\n * Opening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\r\n * in addition to handling subscriptions necessary for the observable functions.\r\n */\r\nexport interface OverlayOpenModel<T> {\r\n    overlayRef: OverlayRef;\r\n    /** Reference to the component instance so input data can be bound to the component.  */\r\n    component: T;\r\n\r\n    /** Closes the overlay. */\r\n    close: () => void;\r\n}\r\n\r\nexport class OverlayProviderConfig<T = any> {\r\n    /** Data to be injected into the dialog content. */\r\n    data?: T;\r\n\r\n    /** Automatically add subscription to close on backdrop click. */\r\n    closeOnBackdropClick?: boolean;\r\n\r\n    /** Automatically add subscription to close on outside pointer events. */\r\n    closeOnOutsidePointerEvents?: boolean;\r\n\r\n    overlayConfig?: OverlayConfig;\r\n}\r\n\r\nexport type OverlaySize = 'small' | 'medium' | 'large';\r\nexport type DialogOverlaySize = 'dialog-wide' | 'dialog-narrow' | 'dialog-mega';\r\n\r\n/**\r\n * Data that is passed to the overlay.\r\n */\r\nexport interface IDataOverlay<T> {\r\n    readonly data: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Data that is passed to the overlay.</p>\n",
            "rawdescription": "\n\nData that is passed to the overlay.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyboardKeyCodes",
            "id": "interface-KeyboardKeyCodes-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard key codes.</p>\n",
            "rawdescription": "\nModel for used keyboard key codes.",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyboardKeys",
            "id": "interface-KeyboardKeys-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [
                {
                    "name": "arrowdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "arrowup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "enter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "f1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard keys.</p>\n",
            "rawdescription": "\nModel for used keyboard keys.",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyEvents",
            "id": "interface-KeyEvents-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [
                {
                    "name": "keydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "keyup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard key events.</p>\n",
            "rawdescription": "\nModel for used keyboard key events.",
            "methods": [],
            "extends": []
        },
        {
            "name": "Listener",
            "id": "interface-Listener-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [
                {
                    "name": "bindings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BindingsDictionary",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "emitInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "terminal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListenerOptions",
            "id": "interface-ListenerOptions-535d87138436748991658abf652837b4cc582af03d1715ca75488bccce14d034140ee5aa32d7be783229b511eb5f7c9c6e36165953c6cdd76e45a3b97deafcf6",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyEvents {\r\n    keyup: 'keyup';\r\n    keydown: 'keydown';\r\n}\r\n\r\n/** Model for used keyboard keys. */\r\nexport interface KeyboardKeys {\r\n    arrowdown: 'ArrowDown';\r\n    arrowup: 'ArrowUp';\r\n    enter: 'Enter';\r\n    escape: 'Escape';\r\n    tab: 'Tab';\r\n    f1: 'F1';\r\n}\r\n\r\n/** Model for used keyboard key codes. */\r\nexport interface KeyboardKeyCodes {\r\n    escape: 27;\r\n}\r\n\r\n/** Holds the different key events that could be used. */\r\nexport const keyEvents: KeyEvents = {\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n};\r\n\r\n/**\r\n * Exports a constant object that holds specific keyboard keys used in the project.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nexport const keyboardKeys: KeyboardKeys = {\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n};\r\n\r\n/**\r\n * The deprecated key codes.\r\n *\r\n * @deprecated KeyCodes are depricated (fallback to IE).\r\n */\r\nexport const keyboardKeyCodes: KeyboardKeyCodes = {\r\n    escape: 27,\r\n};\r\n\r\nexport type Unlisten = () => void;\r\n\r\nexport interface BindingsDictionary {\r\n    [key: string]: Handler;\r\n}\r\n\r\nexport interface ListenerOptions {\r\n    priority: number;\r\n    /**\r\n     * Listener will stop here and not pass keyevent to lower priority listeners.\r\n     * Default value true.\r\n     */\r\n    terminal?: boolean;\r\n\r\n    emitInputs?: boolean;\r\n}\r\n\r\nexport interface Listener {\r\n    priority: number;\r\n    bindings: BindingsDictionary;\r\n    terminal: boolean;\r\n    emitInputs: boolean;\r\n}\r\n\r\nexport type Handler = (event: KeyboardEvent) => boolean | void;\r\n",
            "properties": [
                {
                    "name": "emitInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "terminal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Listener will stop here and not pass keyevent to lower priority listeners.\nDefault value true.</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nListener will stop here and not pass keyevent to lower priority listeners.\nDefault value true.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-8af05abb55ed6ac541e25b0d8ac77c52b02d3bce0b2202b57fde63bbb6867d3347cafaf7bd621615ff82ed0e2059c2d7c02dcfd911e803fecc85932527034d45",
            "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\n/**\r\n * Interface for navigation items, defines all necessary properties for navigation components.\r\n */\r\nexport interface NavigationItem {\r\n    id: string;\r\n\r\n    /**\r\n     * Title shown in the naviation item.\r\n     */\r\n    title: string;\r\n\r\n    /**\r\n     * Navigation item type.\r\n     * 'title' is a title for a group of 'collapsable' or 'item' typed navigation items.\r\n     * 'collapsable' is a navigation item that can be expanded to show children.\r\n     * 'item' is a normal navigation item.\r\n     */\r\n    type: 'item' | 'collapsable' | 'title';\r\n\r\n    /**\r\n     * Icon for the navigation item.\r\n     */\r\n    icon?: string;\r\n\r\n    /**\r\n     * RouterLink url. Should only be undefined if type is 'collapsable'\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * Children for the navigation item. Only shown with 'collapsable'.\r\n     */\r\n    children?: NavigationItem[];\r\n\r\n    /**\r\n     * If the user can navigate to the url.\r\n     * The element is hidden if the user press the item.\r\n     * NOTE: this itself does not block the navigation to the item, only hides it.\r\n     */\r\n    canNavigate$?: Observable<boolean>;\r\n\r\n    /**\r\n     * If the item is marked as favorite then icon for marking it as favorite is not shown.\r\n     *\r\n     * If item is marked as favorite, then it cannot be added from normal navigation.\r\n     * Setting this to true to all items will disable the feature.\r\n     */\r\n    hideFavorite$?: Observable<boolean>;\r\n\r\n    /**\r\n     * Rendered with the tab to display the number of any notifications.\r\n     */\r\n    notifications?: number;\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\n// Matches breakpoint mixin based on Angular Material lib\r\n// eslint-disable-next-line no-shadow\r\nexport enum DdBreakPointsEnum {\r\n    xs = 'screen and (max-width: 599px)',\r\n    sm = 'screen and (min-width: 600px) and (max-width: 959px)',\r\n    md = 'screen and (min-width: 960px) and (max-width: 1279px)',\r\n    lg = 'screen and (min-width: 1280px) and (max-width: 1919px)',\r\n    xl = 'screen and (min-width: 1920px) and (max-width: 5000px)',\r\n    'lt-sm' = 'screen and (max-width: 599px)',\r\n    'lt-md' = 'screen and (max-width: 959px)',\r\n    'lt-lg' = 'screen and (max-width: 1279px)',\r\n    'lt-xl' = 'screen and (max-width: 1919px)',\r\n    'gt-xs' = 'screen and (min-width: 600px)',\r\n    'gt-sm' = 'screen and (min-width: 960px)',\r\n    'gt-md' = 'screen and (min-width: 1280px)',\r\n    'gt-lg' = 'screen and (min-width: 1920px)',\r\n}\r\n",
            "properties": [
                {
                    "name": "canNavigate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>If the user can navigate to the url.\nThe element is hidden if the user press the item.\nNOTE: this itself does not block the navigation to the item, only hides it.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nIf the user can navigate to the url.\nThe element is hidden if the user press the item.\nNOTE: this itself does not block the navigation to the item, only hides it.\n"
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "optional": true,
                    "description": "<p>Children for the navigation item. Only shown with &#39;collapsable&#39;.</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nChildren for the navigation item. Only shown with 'collapsable'.\n"
                },
                {
                    "name": "hideFavorite$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>If the item is marked as favorite then icon for marking it as favorite is not shown.</p>\n<p>If item is marked as favorite, then it cannot be added from normal navigation.\nSetting this to true to all items will disable the feature.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nIf the item is marked as favorite then icon for marking it as favorite is not shown.\n\nIf item is marked as favorite, then it cannot be added from normal navigation.\nSetting this to true to all items will disable the feature.\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Icon for the navigation item.</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nIcon for the navigation item.\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Rendered with the tab to display the number of any notifications.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nRendered with the tab to display the number of any notifications.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title shown in the naviation item.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nTitle shown in the naviation item.\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"item\" | \"collapsable\" | \"title\"",
                    "optional": false,
                    "description": "<p>Navigation item type.\n&#39;title&#39; is a title for a group of &#39;collapsable&#39; or &#39;item&#39; typed navigation items.\n&#39;collapsable&#39; is a navigation item that can be expanded to show children.\n&#39;item&#39; is a normal navigation item.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nNavigation item type.\n'title' is a title for a group of 'collapsable' or 'item' typed navigation items.\n'collapsable' is a navigation item that can be expanded to show children.\n'item' is a normal navigation item.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>RouterLink url. Should only be undefined if type is &#39;collapsable&#39;</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nRouterLink url. Should only be undefined if type is 'collapsable'\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for navigation items, defines all necessary properties for navigation components.</p>\n",
            "rawdescription": "\n\nInterface for navigation items, defines all necessary properties for navigation components.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "OverlayOpenModel",
            "id": "interface-OverlayOpenModel-2ac641fb93805a3dd3ca3081e0ecbb7e78205c8f95ef510a9ab70d0bb62a47b4395109db1047651c122e21017846a1ba6a83475f5a1e57774611e275e7e755c4",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport const OVERLAY_DATA: InjectionToken<{}> = new InjectionToken<{}>('OverlayData');\r\nexport const OVERLAY_REF: InjectionToken<{}> = new InjectionToken<OverlayRef>('OverlayRef');\r\n\r\n/**\r\n * Opening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\r\n * in addition to handling subscriptions necessary for the observable functions.\r\n */\r\nexport interface OverlayOpenModel<T> {\r\n    overlayRef: OverlayRef;\r\n    /** Reference to the component instance so input data can be bound to the component.  */\r\n    component: T;\r\n\r\n    /** Closes the overlay. */\r\n    close: () => void;\r\n}\r\n\r\nexport class OverlayProviderConfig<T = any> {\r\n    /** Data to be injected into the dialog content. */\r\n    data?: T;\r\n\r\n    /** Automatically add subscription to close on backdrop click. */\r\n    closeOnBackdropClick?: boolean;\r\n\r\n    /** Automatically add subscription to close on outside pointer events. */\r\n    closeOnOutsidePointerEvents?: boolean;\r\n\r\n    overlayConfig?: OverlayConfig;\r\n}\r\n\r\nexport type OverlaySize = 'small' | 'medium' | 'large';\r\nexport type DialogOverlaySize = 'dialog-wide' | 'dialog-narrow' | 'dialog-mega';\r\n\r\n/**\r\n * Data that is passed to the overlay.\r\n */\r\nexport interface IDataOverlay<T> {\r\n    readonly data: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Closes the overlay.</p>\n",
                    "line": 17,
                    "rawdescription": "\nCloses the overlay."
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>Reference to the component instance so input data can be bound to the component.</p>\n",
                    "line": 14,
                    "rawdescription": "\nReference to the component instance so input data can be bound to the component."
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Opening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\nin addition to handling subscriptions necessary for the observable functions.</p>\n",
            "rawdescription": "\n\nOpening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\nin addition to handling subscriptions necessary for the observable functions.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ProgressBarState",
            "id": "interface-ProgressBarState-51f395194e1f1d3fc285961770bed754066b3c16cb4325cb3fe6069becfc8b3f2ea634762988bf2699c2442e259da14a6cc399b8bc3610ba231d929bda6006dd",
            "file": "projects/digital-delights-library/src/progress-bar/components/progress-bar/progress-bar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, Input } from '@angular/core';\r\n\r\nexport interface ProgressBarState {\r\n    icon: string;\r\n    label: string;\r\n    color?: 'dd-success' | 'dd-accent';\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-progress-bar',\r\n    templateUrl: './progress-bar.component.html',\r\n    styleUrls: ['./progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProgressBarComponent {\r\n    constructor(private el: ElementRef) {}\r\n    /** Value of current progress in relation to max progress. */\r\n    @Input() progress: number = 0;\r\n    /** Maximum progress. */\r\n    @Input() max: number = 100;\r\n\r\n    @Input() states?: ProgressBarState[];\r\n\r\n    @Input() currentStateIndex?: number;\r\n\r\n    @Input() vertical: boolean = false;\r\n\r\n    get progressPercentage(): number {\r\n        if (this.states && this.states.length > 0 && this.currentStateIndex !== undefined) {\r\n            if (this.currentStateIndex >= this.states.length - 1) {\r\n                return 100;\r\n            }\r\n\r\n            const progressBarLength = this.vertical ? this.el.nativeElement.getBoundingClientRect().height : this.el.nativeElement.getBoundingClientRect().width;\r\n\r\n            const padding = 8 / progressBarLength;\r\n\r\n            if (this.currentStateIndex === 0) {\r\n                return (16 / progressBarLength + padding) * 100;\r\n            }\r\n\r\n            const stateGap = progressBarLength / (this.states.length - 1);\r\n\r\n            const retval = ((this.currentStateIndex * stateGap) / progressBarLength + padding) * 100;\r\n\r\n            return Math.min(retval, 100);\r\n        }\r\n\r\n        // Also handles 0 value\r\n        if (!this.progress) {\r\n            // Always show some progress (numbers are from Figma)\r\n            return (16 / 1083) * 100;\r\n        }\r\n\r\n        // Can progress over max.\r\n        if (this.progress > this.max) {\r\n            return 100;\r\n        }\r\n\r\n        return (this.progress / this.max) * 100;\r\n    }\r\n\r\n    get labelSpace(): number {\r\n        const progressBarLength = this.vertical ? this.el.nativeElement.getBoundingClientRect().height : this.el.nativeElement.getBoundingClientRect().width;\r\n        if (this.states?.length) {\r\n            const padding = progressBarLength > 600 ? 16 : 8;\r\n            return (progressBarLength / (this.states?.length - 1)) * (2 / 3) - padding;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get verticalBarMinHeight(): number {\r\n        if (this.states?.length) {\r\n            return this.states?.length * 80;\r\n        }\r\n        return 200;\r\n    }\r\n\r\n    get statesReversed(): ProgressBarState[] {\r\n        return this.states?.slice().reverse() ?? [];\r\n    }\r\n\r\n    get barColor(): string {\r\n        if (this.states && this.states.length > 0 && this.currentStateIndex !== undefined) {\r\n            if (this.currentStateIndex < this.states.length && this.currentStateIndex >= 0 && !!this.states[this.currentStateIndex]?.color) {\r\n                return this.states[this.currentStateIndex].color ?? '';\r\n            }\r\n\r\n            if (this.currentStateIndex + 1 >= this.states.length) {\r\n                return 'dd-success';\r\n            }\r\n            return 'dd-accent';\r\n        }\r\n\r\n        if (this.progress >= this.max) {\r\n            return 'dd-success';\r\n        }\r\n        return 'dd-accent';\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"dd-success\" | \"dd-accent\"",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectItem",
            "id": "interface-SelectItem-a573d3f16f7b3eab783c4d0c8218f7200611dff29fcf695fe27edd74e5cd3d81f1846ede29d0cb732c9d3444fcfb31efd87294b3681a84b6b1107df3476aca05",
            "file": "projects/digital-delights-library/src/select/select-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SelectItem<T> {\r\n    id: string | number;\r\n    text: string | number;\r\n    value?: T;\r\n    description?: string;\r\n\r\n    /**\r\n     * If the item in the select list is disabled.\r\n     *\r\n     * @type {boolean}\r\n     * @memberof SelectItem\r\n     */\r\n    disabled?: boolean;\r\n}\r\n\r\n/** Model for select list. Used by dd-select-menu to show menu of items. */\r\nexport interface SelectListModel {\r\n    items: SelectItem<any>[];\r\n    /** Id of the selected item. */\r\n    selected?: (string | number)[];\r\n    /** Enable select search filter */\r\n    searchEnabled?: boolean;\r\n    searchPlaceholder?: string;\r\n    searchNoResultsMessage?: string;\r\n    variant: SelectListComponentVariant;\r\n}\r\n\r\n/** The variant for the component. Default 'basic' has 224px min-width and 'small' has no minimun width. */\r\nexport type SelectListComponentVariant = 'basic' | 'small';\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the item in the select list is disabled.</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nIf the item in the select list is disabled.\n\n",
                    "jsdoctags": [
                        {
                            "pos": 243,
                            "end": 267,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 244,
                                "end": 248,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 249,
                                "end": 258,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 250,
                                    "end": 257,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 136
                                }
                            }
                        },
                        {
                            "pos": 267,
                            "end": 294,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 268,
                                "end": 276,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "memberof"
                            },
                            "comment": "<p>SelectItem</p>\n"
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Single select item model.</p>\n",
            "rawdescription": "\nSingle select item model.",
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectListModel",
            "id": "interface-SelectListModel-a573d3f16f7b3eab783c4d0c8218f7200611dff29fcf695fe27edd74e5cd3d81f1846ede29d0cb732c9d3444fcfb31efd87294b3681a84b6b1107df3476aca05",
            "file": "projects/digital-delights-library/src/select/select-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SelectItem<T> {\r\n    id: string | number;\r\n    text: string | number;\r\n    value?: T;\r\n    description?: string;\r\n\r\n    /**\r\n     * If the item in the select list is disabled.\r\n     *\r\n     * @type {boolean}\r\n     * @memberof SelectItem\r\n     */\r\n    disabled?: boolean;\r\n}\r\n\r\n/** Model for select list. Used by dd-select-menu to show menu of items. */\r\nexport interface SelectListModel {\r\n    items: SelectItem<any>[];\r\n    /** Id of the selected item. */\r\n    selected?: (string | number)[];\r\n    /** Enable select search filter */\r\n    searchEnabled?: boolean;\r\n    searchPlaceholder?: string;\r\n    searchNoResultsMessage?: string;\r\n    variant: SelectListComponentVariant;\r\n}\r\n\r\n/** The variant for the component. Default 'basic' has 224px min-width and 'small' has no minimun width. */\r\nexport type SelectListComponentVariant = 'basic' | 'small';\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "searchEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Enable select search filter</p>\n",
                    "line": 23,
                    "rawdescription": "\nEnable select search filter"
                },
                {
                    "name": "searchNoResultsMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": true,
                    "description": "<p>Id of the selected item.</p>\n",
                    "line": 21,
                    "rawdescription": "\nId of the selected item."
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectListComponentVariant",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for select list. Used by dd-select-menu to show menu of items.</p>\n",
            "rawdescription": "\nModel for select list. Used by dd-select-menu to show menu of items.",
            "methods": [],
            "extends": []
        },
        {
            "name": "SnackBar",
            "id": "interface-SnackBar-1ee121367712ff3c4fe7f0c1b444cf403a2fa4ea121369fa2bb5b5537027cd752f7b4176bb8c2aae77b8845d5143484cf4593e49d47af48633184731e75a4190",
            "file": "projects/digital-delights-library/src/notification/models/notifications-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnackBar {\r\n    id: number;\r\n    text: string | number;\r\n    /** Timeout in ms. If left undefined, snackbar will only hide after close action. */\r\n    timeout?: number;\r\n    classes: string[];\r\n    /** Boolean to trigger change detection when closed inside timeout. */\r\n    dismiss?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Boolean to trigger change detection when closed inside timeout.</p>\n",
                    "line": 8,
                    "rawdescription": "\nBoolean to trigger change detection when closed inside timeout."
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Timeout in ms. If left undefined, snackbar will only hide after close action.</p>\n",
                    "line": 5,
                    "rawdescription": "\nTimeout in ms. If left undefined, snackbar will only hide after close action."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarAdditionalButton",
            "id": "interface-TopbarAdditionalButton-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "badgeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Color of the badge.\nIf not provided, the defaults to danger color.</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nColor of the badge.\nIf not provided, the defaults to danger color.\n"
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Shows a badge with the given text.\nIf not provided, the badge is not rendered.</p>\n",
                    "line": 112,
                    "rawdescription": "\n\nShows a badge with the given text.\nIf not provided, the badge is not rendered.\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon for the button.</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nIcon for the button.\n"
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Click event for the topbar button.</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nClick event for the topbar button.\n"
                },
                {
                    "name": "showOnMobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the button should be shown on small screens mobile.\nOnly the first button where this is true is shown on mobile.</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nIf the button should be shown on small screens mobile.\nOnly the first button where this is true is shown on mobile.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Renders buttons on the right side of the top bar.\nThe buttons are placed on the left side of the user button.</p>\n",
            "rawdescription": "\n\nRenders buttons on the right side of the top bar.\nThe buttons are placed on the left side of the user button.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarConfiguration",
            "id": "interface-TopbarConfiguration-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarAdditionalButton[]",
                    "optional": true,
                    "description": "<p>Topbar additional buttons configuration.\nIf configuration is not provided, additional buttons are not rendered.</p>\n<p>Only one button can be shown on smallest mobile screen size.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nTopbar additional buttons configuration.\nIf configuration is not provided, additional buttons are not rendered.\n\nOnly one button can be shown on smallest mobile screen size.\n"
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarLogo",
                    "optional": true,
                    "description": "<p>Topbar logo configuration.\nIf configuration is not provided, logo is not rendered.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nTopbar logo configuration.\nIf configuration is not provided, logo is not rendered.\n"
                },
                {
                    "name": "menuText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Renders a text next to the menu button on larger screens.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nRenders a text next to the menu button on larger screens.\n"
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarSearchConfiguration",
                    "optional": true,
                    "description": "<p>Topbar search configuration.\nIf configuration is not provided, search is not rendered.</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nTopbar search configuration.\nIf configuration is not provided, search is not rendered.\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarUser",
                    "optional": true,
                    "description": "<p>Topbar user button configuration.\nIf configuration is not provided, user button is not rendered.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nTopbar user button configuration.\nIf configuration is not provided, user button is not rendered.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarLogo",
            "id": "interface-TopbarLogo-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Small text rendered on top of the logo.</p>\n",
                    "line": 150,
                    "rawdescription": "\n\nSmall text rendered on top of the logo.\n"
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Color of the background of the logo.</p>\n",
                    "line": 140,
                    "rawdescription": "\n\nColor of the background of the logo.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Title is rendered on the right side of the logo.</p>\n",
                    "line": 145,
                    "rawdescription": "\n\nTitle is rendered on the right side of the logo.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Logo url.</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nLogo url.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Renders a logo to the top bar.\nThe logo is rendered on the left side of the top bar.\nThe logo will always route to the home (&#39;/&#39; route) page.</p>\n",
            "rawdescription": "\n\nRenders a logo to the top bar.\nThe logo is rendered on the left side of the top bar.\nThe logo will always route to the home ('/' route) page.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarSearchConfiguration",
            "id": "interface-TopbarSearchConfiguration-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "hotkeyList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "<p>List of hotkeys that are used to trigger the search.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nList of hotkeys that are used to trigger the search.\n"
                },
                {
                    "name": "searchEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Output event when user has searched for something.\nEmits a list that contains the search string and references the the search container.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nOutput event when user has searched for something.\nEmits a list that contains the search string and references the the search container.\n"
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Placeholder text for the search input.</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nPlaceholder text for the search input.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarUser",
            "id": "interface-TopbarUser-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Description text for the user button.\nThis is rendered under the user name.</p>\n",
                    "line": 78,
                    "rawdescription": "\n\nDescription text for the user button.\nThis is rendered under the user name.\n"
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>First name of the user.\nNames are split to two so initials can be rendered.</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nFirst name of the user.\nNames are split to two so initials can be rendered.\n"
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Image url for the user button.\nIf not provided, the user button is rendered with initials of the user.</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nImage url for the user button.\nIf not provided, the user button is rendered with initials of the user.\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Last name of the user.\nNames are split to two so initials can be rendered.</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nLast name of the user.\nNames are split to two so initials can be rendered.\n"
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Click event for the user button.</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nClick event for the user button.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Topbar user button configuration.</p>\n",
            "rawdescription": "\n\nTopbar user button configuration.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ValidationErrorMessages",
            "id": "interface-ValidationErrorMessages-9fc89f56b9f1a27d559a23bd0d62f3eac954912bd6915e2c6f3998df6bab64d3f1e0b78a556b8a25d087c3ae1d8eef5a9b2555599c7ecb7490e442a2bc43873d",
            "file": "projects/digital-delights-library/src/form-field/form-field-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ValidationErrorMessages {\r\n    required?: string;\r\n    invalid?: string;\r\n    pattern?: string;\r\n    past?: string;\r\n    max?: string;\r\n    min?: string;\r\n    maxlength?: string;\r\n    minlength?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "maxlength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "minlength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "past",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Type for the validation error messages.</p>\n",
            "rawdescription": "\nType for the validation error messages.",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DdLocaleService",
            "id": "injectable-DdLocaleService-8e1a7c2d3d9478b5e0e0ad37b1c35e8bf908d7fa23e8f142800098877b3b8018fdbc5476bcce8659ad68d97c17abf748d75ebdc11d9b1ea284a8cf081cceb81b",
            "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
            "properties": [
                {
                    "name": "localeSubject",
                    "defaultValue": "new BehaviorSubject<DdLocale>('en')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<DdLocale>",
                    "optional": false,
                    "description": "<p>Subjects that stores the current locale.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nSubjects that stores the current locale.\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDateFormat",
                    "args": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets date format for the pipes.\n",
                    "description": "<p>Gets date format for the pipes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateLocale$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Locale>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the current date-fns Locale.\n",
                    "description": "<p>Gets the current date-fns Locale.</p>\n"
                },
                {
                    "name": "getDateTimeFormat",
                    "args": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets date time format for the pipes.\n",
                    "description": "<p>Gets date time format for the pipes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalCulture$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DdCulture>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets current local culture for the pipes.\n",
                    "description": "<p>Gets current local culture for the pipes.</p>\n"
                },
                {
                    "name": "localeChanges$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DdLocale>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExposes locale changes property from the service.\n",
                    "description": "<p>Exposes locale changes property from the service.</p>\n"
                },
                {
                    "name": "updateLocale",
                    "args": [
                        {
                            "name": "l",
                            "type": "DdLocale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the locale for the service.\n",
                    "description": "<p>Updates the locale for the service.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "DdLocale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Locale } from 'date-fns';\r\nimport { da, enGB, fi, nb, sv } from 'date-fns/locale';\r\nimport { BehaviorSubject, Observable, Subject, distinctUntilChanged, map } from 'rxjs';\r\n\r\nexport type DdLocale = 'dk' | 'no' | 'fi' | 'se' | 'en';\r\nexport type DdCulture = 'da-dk' | 'nb-no' | 'fi-fi' | 'sv-se' | 'en-gb';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DdLocaleService {\r\n    constructor() {}\r\n\r\n    /**\r\n     * Subjects that stores the current locale.\r\n     */\r\n    private localeSubject: Subject<DdLocale> = new BehaviorSubject<DdLocale>('en');\r\n\r\n    /**\r\n     * Updates the locale for the service.\r\n     */\r\n    updateLocale(l: DdLocale): void {\r\n        this.localeSubject.next(l);\r\n    }\r\n\r\n    /**\r\n     * Exposes locale changes property from the service.\r\n     */\r\n    localeChanges$(): Observable<DdLocale> {\r\n        return this.localeSubject.asObservable().pipe(distinctUntilChanged());\r\n    }\r\n\r\n    /**\r\n     * Gets the current date-fns Locale.\r\n     */\r\n    getDateLocale$(): Observable<Locale> {\r\n        return this.localeChanges$().pipe(\r\n            map((l) => {\r\n                switch (l) {\r\n                    case 'dk':\r\n                        return da;\r\n                    case 'no':\r\n                        return nb;\r\n                    case 'fi':\r\n                        return fi;\r\n                    case 'se':\r\n                        return sv;\r\n                    case 'en':\r\n                    default:\r\n                        return enGB;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets current local culture for the pipes.\r\n     */\r\n    getLocalCulture$(): Observable<DdCulture> {\r\n        return this.localeChanges$().pipe(\r\n            map((l) => {\r\n                switch (l) {\r\n                    case 'dk':\r\n                        return 'da-dk';\r\n                    case 'no':\r\n                        return 'nb-no';\r\n                    case 'fi':\r\n                        return 'fi-fi';\r\n                    case 'se':\r\n                        return 'sv-se';\r\n                    case 'en':\r\n                    default:\r\n                        return 'en-gb';\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets date format for the pipes.\r\n     */\r\n    getDateFormat(l: Locale): string {\r\n        // DK has specific format as date-fns does not have the same as we use.\r\n        if (l.code === 'da') {\r\n            return 'dd-MM-yyyy';\r\n        }\r\n\r\n        return 'P';\r\n    }\r\n\r\n    /**\r\n     * Gets date time format for the pipes.\r\n     */\r\n    getDateTimeFormat(l: Locale): string {\r\n        // DK has specific format as date-fns does not have the same as we use.\r\n        if (l.code === 'da') {\r\n            return 'dd-MM-yyyy p';\r\n        }\r\n\r\n        return 'Pp';\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HotkeysService",
            "id": "injectable-HotkeysService-b589e7d8bff6e589f9600ed5519735195eb4febb38274f1d14dbc9a89a93d96c9aaca137efece2202810a16554948ed26034f0823c4404ce10bda68c3061ba8f",
            "file": "projects/digital-delights-library/src/services/hotkeys.service.ts",
            "properties": [
                {
                    "name": "handleKeyboardEvent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handle the keyboard events for the root handler (and delegate to the listeners).</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nHandle the keyboard events for the root handler (and delegate to the listeners).\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listeners",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Listener[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addListener",
                    "args": [
                        {
                            "name": "listener",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Listener",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the listener to the internal collection in DESCENDING priority order.\n",
                    "description": "<p>Add the listener to the internal collection in DESCENDING priority order.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listener",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEventFromInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if the given event originated from a form input element.\n",
                    "description": "<p>Determine if the given event originated from a form input element.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "bindings",
                            "type": "BindingsDictionary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ListenerOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Unlisten",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfigure key-event listener at the given priority.\nReturns a Function that can be used to unbind the listener.\n",
                    "description": "<p>Configure key-event listener at the given priority.\nReturns a Function that can be used to unbind the listener.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "bindings",
                            "type": "BindingsDictionary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ListenerOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "normalizeTerminal",
                    "args": [
                        {
                            "name": "terminal",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNormalize the terminal option.\n",
                    "description": "<p>Normalize the terminal option.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "terminal",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListener",
                    "args": [
                        {
                            "name": "listenerToRemove",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the given listener from the internal collection.\n",
                    "description": "<p>Remove the given listener from the internal collection.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listenerToRemove",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p><a href=\"https://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5\">https://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5</a></p>\n",
            "rawdescription": "\n\nhttps://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\r\nimport { BindingsDictionary, Handler, keyEvents, Listener, ListenerOptions, Unlisten } from './models/keyboard';\r\n\r\n/**\r\n * https://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class HotkeysService {\r\n    constructor(private zone: NgZone) {\r\n        // Since we're going to create a root event-handler for the keydown event, we're\r\n        // gonna do this outside of the NgZone. This way, we're not constantly triggering\r\n        // change-detection for every key event - we'll only re-enter the Angular Zone\r\n        // when we have an event that is actually being consumed by one of our components.\r\n        this.zone.runOutsideAngular((): void => {\r\n            window.addEventListener(keyEvents.keydown, this.handleKeyboardEvent);\r\n        });\r\n    }\r\n\r\n    private listeners: Listener[] = [];\r\n\r\n    /**\r\n     * Configure key-event listener at the given priority.\r\n     * Returns a Function that can be used to unbind the listener.\r\n     */\r\n    listen(bindings: BindingsDictionary, options: ListenerOptions): Unlisten {\r\n        const listener: Listener = this.addListener({\r\n            terminal: this.normalizeTerminal(options.terminal),\r\n            priority: options.priority,\r\n            bindings,\r\n            emitInputs: options.emitInputs || false,\r\n        });\r\n\r\n        const unlisten: Unlisten = (): void => {\r\n            this.removeListener(listener);\r\n        };\r\n\r\n        return unlisten;\r\n    }\r\n\r\n    /**\r\n     * Add the listener to the internal collection in DESCENDING priority order.\r\n     */\r\n    private addListener(listener: Listener): Listener {\r\n        this.listeners.push(listener);\r\n\r\n        // Sort with higher priority first.\r\n        this.listeners.sort((a: Listener, b: Listener): number => {\r\n            if (a.priority < b.priority) {\r\n                return 1;\r\n            } else if (a.priority > b.priority) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        return listener;\r\n    }\r\n\r\n    /**\r\n     * Handle the keyboard events for the root handler (and delegate to the listeners).\r\n     */\r\n    private handleKeyboardEvent = (event: KeyboardEvent): void => {\r\n        event.stopImmediatePropagation();\r\n\r\n        const key: string = event.key;\r\n        const isInputEvent: boolean = this.isEventFromInput(event);\r\n        let handler: Handler;\r\n\r\n        // Iterate over the listeners.\r\n        for (const listener of this.listeners) {\r\n            if ((handler = listener.bindings[key])) {\r\n                // Execute handler if this is NOT an input event that we need to ignore.\r\n                if (isInputEvent && !listener.emitInputs) {\r\n                    return;\r\n                }\r\n\r\n                // Right now, we're executing outside of the NgZone. As such, we\r\n                // have to re-enter the NgZone so that we can hook back into change-\r\n                // detection. Plus, this will also catch errors and propagate them\r\n                // through application properly.\r\n                this.zone.runGuarded((): boolean | void => handler(event));\r\n\r\n                // Break loop if we have terminal listener.\r\n                if (listener.terminal) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determine if the given event originated from a form input element.\r\n     */\r\n    private isEventFromInput(event: KeyboardEvent): boolean {\r\n        if (event.target instanceof Node) {\r\n            switch (event.target.nodeName) {\r\n                case 'INPUT':\r\n                case 'SELECT':\r\n                case 'TEXTAREA':\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Normalize the terminal option.\r\n     */\r\n    private normalizeTerminal(terminal: boolean | undefined): boolean {\r\n        if (terminal === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return terminal;\r\n    }\r\n\r\n    /**\r\n     * Remove the given listener from the internal collection.\r\n     */\r\n    private removeListener(listenerToRemove: Listener): void {\r\n        this.listeners = this.listeners.filter((listener: Listener): boolean => listener !== listenerToRemove);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OverlayService",
            "id": "injectable-OverlayService-16d17e9331de595b46b75855af6147d72bdcde7f280eca9cee8c8da40b97cee79f5cdc17f4f2c8c7e8c1fb4edec41f063c4ad2e6ae20d47a50d61c6f72d768bf",
            "file": "projects/digital-delights-library/src/overlay/services/overlay.service.ts",
            "properties": [
                {
                    "name": "_unsubscribeSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "overLayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles closing and removing the overlay",
                    "description": "<p>Handles closing and removing the overlay</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "overLayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createInjector",
                    "args": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate injector to pass data to overlay.\n",
                    "description": "<p>Create injector to pass data to overlay.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfirmSelectionOverlayConfig",
                    "args": [
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a globally centered confirm selection overlay.",
                    "description": "<p>Config for a globally centered confirm selection overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConnectedToConfig",
                    "args": [
                        {
                            "name": "element",
                            "type": "FlexibleConnectedPositionStrategyOrigin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transformOrigin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfig for an overlay connected to an element.\nRequires class string of the provided overlay as the transformOrigin parameter.\n",
                    "description": "<p>Config for an overlay connected to an element.\nRequires class string of the provided overlay as the transformOrigin parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "FlexibleConnectedPositionStrategyOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformOrigin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogOverlayConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a dialog overlay opening from the right.",
                    "description": "<p>Config for a dialog overlay opening from the right.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogOverlaySizes",
                    "args": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns the width and height values for the overlay configurations.",
                    "description": "<p>Returns the width and height values for the overlay configurations.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlexGlobalCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfig for a global centered flex overlay.\nFlex overlay defines only max width and height based on the input.\n",
                    "description": "<p>Config for a global centered flex overlay.\nFlex overlay defines only max width and height based on the input.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGlobalCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a global centered overlay.",
                    "description": "<p>Config for a global centered overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGlobalScrollableCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a global centered overlay that is fully scrollable on mobile.",
                    "description": "<p>Config for a global centered overlay that is fully scrollable on mobile.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlaySizes",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns the width and height values for the overlay configurations.",
                    "description": "<p>Returns the width and height values for the overlay configurations.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig<E>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayOpenModel<T>",
                    "typeParameters": [
                        "T",
                        "E"
                    ],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens an overlay with the provided component and config.\nMakes sure that the opened component actually contains a data property.\n",
                    "description": "<p>Opens an overlay with the provided component and config.\nMakes sure that the opened component actually contains a data property.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig<E>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { FlexibleConnectedPositionStrategyOrigin, NoopScrollStrategy, Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\r\nimport { ComponentRef, Injectable, Injector, StaticProvider } from '@angular/core';\r\nimport { keyboardKeys } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, take, takeUntil } from 'rxjs/operators';\r\nimport { animationOutTime } from '../models/animations';\r\nimport { DialogOverlaySize, IDataOverlay, OVERLAY_DATA, OVERLAY_REF, OverlayOpenModel, OverlayProviderConfig, OverlaySize } from '../models/overlay';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OverlayService {\r\n    constructor(private overlay: Overlay, private _injector: Injector) {}\r\n\r\n    private _unsubscribeSubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Opens an overlay with the provided component and config.\r\n     * Makes sure that the opened component actually contains a data property.\r\n     */\r\n    open<T extends IDataOverlay<E>, E>(component: ComponentType<T>, config: OverlayProviderConfig<E>): OverlayOpenModel<T> {\r\n        // Create new overlay attached to the input element.\r\n        const overLayRef: OverlayRef = this.overlay.create(config.overlayConfig);\r\n\r\n        // Create injector for the data\r\n        let injector: Injector | undefined;\r\n        if (!!config?.data) {\r\n            injector = this.createInjector(overLayRef, config);\r\n        }\r\n\r\n        let obs$: Observable<MouseEvent> | undefined;\r\n        if (config.closeOnOutsidePointerEvents) {\r\n            obs$ = overLayRef.outsidePointerEvents();\r\n        } else if (config.closeOnBackdropClick) {\r\n            obs$ = overLayRef.backdropClick();\r\n        }\r\n\r\n        // Pressing escape should always close the current overlay.\r\n        overLayRef\r\n            .keydownEvents()\r\n            .pipe(\r\n                filter((event) => event.key === keyboardKeys.escape),\r\n                take(1),\r\n                takeUntil(this._unsubscribeSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.close(overLayRef, componentRef.instance);\r\n            });\r\n\r\n        // Attach component to the overlay\r\n        const componentRef: ComponentRef<T> = overLayRef.attach(new ComponentPortal(component, undefined, injector));\r\n\r\n        // Add detach event for click outside the overlay.\r\n        obs$?.pipe(take(1), takeUntil(this._unsubscribeSubject)).subscribe(() => {\r\n            this.close(overLayRef, componentRef.instance);\r\n        });\r\n\r\n        return {\r\n            overlayRef: overLayRef,\r\n            component: componentRef.instance,\r\n            close: () => {\r\n                this.close(overLayRef, componentRef.instance);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Config for an overlay connected to an element.\r\n     * Requires class string of the provided overlay as the transformOrigin parameter.\r\n     */\r\n    getConnectedToConfig<T>(element: FlexibleConnectedPositionStrategyOrigin, transformOrigin: string, data?: T | undefined): OverlayProviderConfig<T> {\r\n        if (!element) {\r\n            throw Error('Missing ElementRef input.');\r\n        }\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n            closeOnOutsidePointerEvents: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position()\r\n                    .flexibleConnectedTo(element)\r\n                    .withTransformOriginOn(transformOrigin)\r\n                    .withPositions([\r\n                        /**\r\n                         * Provide alternative positions in case element does not fit in viewport. Configures that the position strategy should set a `transform-origin` on some elements\r\n                         * inside the overlay, depending on the current position that is being applied. This is\r\n                         * useful for the cases where the origin of an animation can change depending on the\r\n                         * alignment of the overlay.\r\n                         * https://material.angular.io/cdk/overlay/api#CdkConnectedOverlay\r\n                         */\r\n                        {\r\n                            // top-left of the overlay is connected to bottom-left of the element\r\n                            originX: 'start',\r\n                            originY: 'bottom',\r\n                            overlayX: 'start',\r\n                            overlayY: 'top',\r\n                        },\r\n                        {\r\n                            // Bottom-left of the overlay is connected to top-left of the element.\r\n                            originX: 'start',\r\n                            originY: 'top',\r\n                            overlayX: 'start',\r\n                            overlayY: 'bottom',\r\n                        },\r\n\r\n                        {\r\n                            // Top-right of the overlay is connected to bottom-right of the element.\r\n                            originX: 'end',\r\n                            originY: 'bottom',\r\n                            overlayX: 'end',\r\n                            overlayY: 'top',\r\n                        },\r\n                        {\r\n                            // Bottom-right of the overlay is connected to top-right of the element.\r\n                            originX: 'end',\r\n                            originY: 'top',\r\n                            overlayX: 'end',\r\n                            overlayY: 'bottom',\r\n                        },\r\n                    ])\r\n                    .withPush(false),\r\n                hasBackdrop: false,\r\n                disposeOnNavigation: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.reposition(),\r\n            }),\r\n        };\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Config for a global centered flex overlay.\r\n     * Flex overlay defines only max width and height based on the input.\r\n     */\r\n    getFlexGlobalCenterConfig<T>(variant: OverlaySize, data?: T | undefined): OverlayProviderConfig<T> {\r\n        const [width, _]: [string, string] = this.getOverlaySizes(variant);\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n            closeOnBackdropClick: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position() //\r\n                    .global()\r\n                    .centerHorizontally()\r\n                    .centerVertically(),\r\n                hasBackdrop: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                panelClass: ['dd-overlay-container', 'flex', variant],\r\n                maxWidth: width,\r\n            }),\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    /** Config for a global centered overlay. */\r\n    getGlobalCenterConfig<T>(variant: OverlaySize, data?: T | undefined): OverlayProviderConfig<T> {\r\n        const [width, height]: [string, string] = this.getOverlaySizes(variant);\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n            closeOnBackdropClick: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position() //\r\n                    .global()\r\n                    .centerHorizontally()\r\n                    .centerVertically(),\r\n                hasBackdrop: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                panelClass: ['dd-overlay-container', variant],\r\n                width,\r\n                maxWidth: width,\r\n                height,\r\n                maxHeight: height,\r\n                disposeOnNavigation: true,\r\n            }),\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    /** Config for a global centered overlay that is fully scrollable on mobile. */\r\n    getGlobalScrollableCenterConfig<T>(variant: OverlaySize, data?: T | undefined): OverlayProviderConfig<T> {\r\n        const [width]: [string, string] = this.getOverlaySizes(variant);\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n            closeOnBackdropClick: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position() //\r\n                    .global()\r\n                    .centerHorizontally()\r\n                    .centerVertically(),\r\n                hasBackdrop: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                panelClass: ['dd-overlay-container', 'scrollable', variant],\r\n                width,\r\n                maxWidth: width,\r\n                maxHeight: '100dvh',\r\n                disposeOnNavigation: true,\r\n            }),\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    /** Config for a globally centered confirm selection overlay. */\r\n    getConfirmSelectionOverlayConfig<T>(data?: T | undefined): OverlayProviderConfig<T> {\r\n        const [width, height]: [string, string] = ['365px', '220px'];\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n            closeOnBackdropClick: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position() //\r\n                    .global()\r\n                    .centerHorizontally()\r\n                    .centerVertically(),\r\n                hasBackdrop: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                panelClass: ['dd-overlay-container'],\r\n                width,\r\n                maxWidth: width,\r\n                minHeight: height,\r\n                disposeOnNavigation: true,\r\n            }),\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    /** Config for a dialog overlay opening from the right. */\r\n    getDialogOverlayConfig<T>(variant: DialogOverlaySize, data?: T | undefined): OverlayProviderConfig<T> {\r\n        const width: string = this.getDialogOverlaySizes(variant);\r\n\r\n        const config: OverlayProviderConfig<T> = {\r\n            data,\r\n\r\n            closeOnBackdropClick: true,\r\n            overlayConfig: new OverlayConfig({\r\n                positionStrategy: this.overlay\r\n                    .position() //\r\n                    .global()\r\n                    .right(),\r\n                hasBackdrop: true,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                panelClass: ['dd-dialog-container', variant],\r\n                width: '100%',\r\n                maxWidth: width,\r\n                height: '100vh',\r\n                disposeOnNavigation: true,\r\n            }),\r\n        };\r\n\r\n        return config;\r\n    }\r\n    /** Returns the width and height values for the overlay configurations. */\r\n    private getOverlaySizes(variant: OverlaySize): [string, string] {\r\n        switch (variant) {\r\n            case 'small':\r\n                return ['288px', '264px'];\r\n            case 'medium':\r\n                return ['576px', '528px'];\r\n            default:\r\n                return ['864px', '792px'];\r\n        }\r\n    }\r\n\r\n    /** Returns the width and height values for the overlay configurations. */\r\n    private getDialogOverlaySizes(variant: DialogOverlaySize): string {\r\n        switch (variant) {\r\n            case 'dialog-mega':\r\n                return '864px';\r\n            case 'dialog-wide':\r\n                return '640px';\r\n            case 'dialog-narrow':\r\n                return '320px';\r\n            default:\r\n                return '864px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create injector to pass data to overlay.\r\n     */\r\n    private createInjector(overlayRef: OverlayRef, config: OverlayProviderConfig): Injector {\r\n        const providers: StaticProvider[] = [\r\n            { provide: OVERLAY_REF, useValue: overlayRef }, //\r\n            { provide: OVERLAY_DATA, useValue: config.data },\r\n        ];\r\n\r\n        return Injector.create({\r\n            parent: this._injector,\r\n            providers,\r\n        });\r\n    }\r\n\r\n    /** Handles closing and removing the overlay */\r\n    private close(overLayRef: OverlayRef, component?: any): void {\r\n        // Detach and remove overlay\r\n        if (!overLayRef) {\r\n            return;\r\n        }\r\n\r\n        // Updating scroll strategy before closing makes sure when there is a redirect the scroll is returned to top.\r\n        // Keeping block scroll strategy causes the scroll amount to stay the same even after redirect when overlay has an animation.\r\n        overLayRef.updateScrollStrategy(new NoopScrollStrategy());\r\n\r\n        // For the overlay animation, if a viewState is set, then a timeout should be set to show out animation.\r\n        if (!component.viewState) {\r\n            overLayRef.detach();\r\n        } else {\r\n            component.viewState = 'hide';\r\n            setTimeout(() => {\r\n                overLayRef.detach();\r\n            }, animationOutTime);\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackBarService",
            "id": "injectable-SnackBarService-26cd1cc1d924577773bd2d106ef3102265a92f1f48077855307878118780dbb6143f7645c9e959ceee98500967a532dda13a5d6617bf365dafebe50b7e4295d0",
            "file": "projects/digital-delights-library/src/notification/services/snack-bar.service.ts",
            "properties": [
                {
                    "name": "animationTimeMs",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Time in milliseconds that is reserved for the animation to execute.\nThis should match the css animation time in the SnackBarComponent.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nTime in milliseconds that is reserved for the animation to execute.\nThis should match the css animation time in the SnackBarComponent.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackBar[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notificationSubject",
                    "defaultValue": "new ReplaySubject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<SnackBar[]>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "\"error\" | \"success\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "\"error\" | \"success\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotifications$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SnackBar[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshNotifications",
                    "args": [
                        {
                            "name": "notifications",
                            "type": "SnackBar[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notifications",
                            "type": "SnackBar[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows error message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Shows error message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Shows message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccessMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow success message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Show success message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { delay, Observable, ReplaySubject, Subject, take, timer } from 'rxjs';\r\nimport { SnackBar } from '../models/notifications-models';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SnackBarService {\r\n    private notifications: SnackBar[] = [];\r\n    private notificationSubject: Subject<SnackBar[]> = new ReplaySubject();\r\n\r\n    private id: number = 0;\r\n\r\n    /**\r\n     * Time in milliseconds that is reserved for the animation to execute.\r\n     * This should match the css animation time in the SnackBarComponent.\r\n     */\r\n    private readonly animationTimeMs: number = 400;\r\n\r\n    getNotifications$(): Observable<SnackBar[]> {\r\n        return this.notificationSubject.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Shows message in snackbar and return a reference to the snackbar.\r\n     */\r\n    showMessage(message: string): void {\r\n        this.addNotification(message);\r\n    }\r\n\r\n    /**\r\n     * Show success message in snackbar and return a reference to the snackbar.\r\n     */\r\n    showSuccessMessage(message: string): void {\r\n        this.addNotification(message, 'success');\r\n    }\r\n\r\n    /**\r\n     * Shows error message in snackbar and return a reference to the snackbar.\r\n     */\r\n    showErrorMessage(message: string): void {\r\n        this.addNotification(message, 'error');\r\n    }\r\n\r\n    private addNotification(message: string, style?: 'error' | 'success'): void {\r\n        const newNotification: SnackBar = {\r\n            id: this.id++,\r\n            text: message,\r\n            timeout: 4000,\r\n            classes: [],\r\n        };\r\n\r\n        if (style) {\r\n            newNotification.classes.push(style);\r\n        }\r\n\r\n        if (newNotification.timeout) {\r\n            // Close notification after timeout\r\n            timer(newNotification.timeout)\r\n                .pipe(\r\n                    // Add some time for the animation.\r\n                    delay(this.animationTimeMs),\r\n                    take(1)\r\n                )\r\n                .subscribe((_) => {\r\n                    this.close(newNotification.id);\r\n                });\r\n        }\r\n\r\n        this.notifications.push(newNotification);\r\n        this.refreshNotifications(this.notifications);\r\n    }\r\n\r\n    close(id: number): void {\r\n        const notification: SnackBar | undefined = this.notifications.find((x) => x.id === id);\r\n        // Check if notification has already been closed.\r\n        if (!notification) {\r\n            return;\r\n        }\r\n\r\n        // Start closing animation by adding a class.\r\n        notification.classes.push('dismiss');\r\n        // Switch the boolean to trigger change detection from the timer.\r\n        // For some reason adding stuff to a list does not trigger ChangeDetectionStrategy.OnPush inside a timeout scope.\r\n        notification.dismiss = true;\r\n        this.refreshNotifications(this.notifications);\r\n\r\n        // Actually remove after closing animation finishes.\r\n        setTimeout(() => {\r\n            const notifications = this.notifications.filter((x) => x.id !== id);\r\n            this.refreshNotifications(notifications);\r\n        }, this.animationTimeMs);\r\n    }\r\n\r\n    private refreshNotifications(notifications: SnackBar[]): void {\r\n        // Always show the latest notification at the bottom.\r\n        notifications.sort((a, b) => b.id - a.id);\r\n\r\n        // Refresh\r\n        this.notifications = notifications;\r\n        this.notificationSubject.next(notifications);\r\n    }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FileValidators",
            "id": "class-FileValidators-cd1b867c67bf98fb885992f67788afb46ddbbb3f67a5e7c1de148bee8480e1110a239459d4a7c29e89349c3b2dd66b34c8e008aad40219322223bb947ab8faea",
            "file": "projects/digital-delights-library/src/file-upload/file-validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface FileErrorMessages {\r\n    required?: string;\r\n    uniqueFileNames?: string;\r\n    fileExtension?: string;\r\n    maxFileSize?: string;\r\n}\r\n\r\nexport class FileValidators {\r\n    static fileExtension(ext: string[]): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            if (control.value) {\r\n                const validExtensions = ext.map((e) => e.trim().toLowerCase());\r\n                const fileArray = control.value as File[];\r\n\r\n                const invalidFiles = fileArray\r\n                    .map((file) => file.name)\r\n                    .filter((fname) => {\r\n                        const extension = fname.slice(((fname.lastIndexOf('.') - 1) >>> 0) + 2).toLowerCase();\r\n                        return !validExtensions.includes(extension);\r\n                    })\r\n                    .map((name) => ({ name, ext: name.slice(((name.lastIndexOf('.') - 1) >>> 0) + 2) }));\r\n\r\n                return !invalidFiles.length ? null : { fileExtension: { requiredExtension: ext.toString(), actualExtensions: invalidFiles } };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    static uniqueFileNames(control: AbstractControl): ValidationErrors | null {\r\n        if (control.value) {\r\n            const fileNameArray = (control.value as File[]).map((file) => file.name);\r\n\r\n            const duplicates = fileNameArray.reduce((acc, curr) => {\r\n                acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\r\n                return acc;\r\n            }, {} as any);\r\n\r\n            const duplicatesArray: { name: string; count: number }[] = (Object.entries(duplicates) as [string, number][]).filter((arr) => arr[1] > 1).map((arr) => ({ name: arr[0], count: arr[1] }));\r\n\r\n            return !duplicatesArray.length ? null : { uniqueFileNames: { duplicatedFileNames: duplicatesArray } };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static maxFileSize(bytes: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            if (control.value) {\r\n                const fileArray = control.value as File[];\r\n\r\n                const invalidFiles: { name: string; size: number }[] = fileArray.filter((file) => file.size > bytes).map((file) => ({ name: file.name, size: file.size }));\r\n\r\n                return !invalidFiles.length ? null : { maxFileSize: { maxSize: bytes, actualSizes: invalidFiles } };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    static required(control: AbstractControl): ValidationErrors | null {\r\n        const count = control?.value?.length;\r\n        return count ? null : { required: true };\r\n    }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "fileExtension",
                    "args": [
                        {
                            "name": "ext",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "ext",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "required",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uniqueFileNames",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OverlayProviderConfig",
            "id": "class-OverlayProviderConfig-2ac641fb93805a3dd3ca3081e0ecbb7e78205c8f95ef510a9ab70d0bb62a47b4395109db1047651c122e21017846a1ba6a83475f5a1e57774611e275e7e755c4",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport const OVERLAY_DATA: InjectionToken<{}> = new InjectionToken<{}>('OverlayData');\r\nexport const OVERLAY_REF: InjectionToken<{}> = new InjectionToken<OverlayRef>('OverlayRef');\r\n\r\n/**\r\n * Opening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\r\n * in addition to handling subscriptions necessary for the observable functions.\r\n */\r\nexport interface OverlayOpenModel<T> {\r\n    overlayRef: OverlayRef;\r\n    /** Reference to the component instance so input data can be bound to the component.  */\r\n    component: T;\r\n\r\n    /** Closes the overlay. */\r\n    close: () => void;\r\n}\r\n\r\nexport class OverlayProviderConfig<T = any> {\r\n    /** Data to be injected into the dialog content. */\r\n    data?: T;\r\n\r\n    /** Automatically add subscription to close on backdrop click. */\r\n    closeOnBackdropClick?: boolean;\r\n\r\n    /** Automatically add subscription to close on outside pointer events. */\r\n    closeOnOutsidePointerEvents?: boolean;\r\n\r\n    overlayConfig?: OverlayConfig;\r\n}\r\n\r\nexport type OverlaySize = 'small' | 'medium' | 'large';\r\nexport type DialogOverlaySize = 'dialog-wide' | 'dialog-narrow' | 'dialog-mega';\r\n\r\n/**\r\n * Data that is passed to the overlay.\r\n */\r\nexport interface IDataOverlay<T> {\r\n    readonly data: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "closeOnBackdropClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Automatically add subscription to close on backdrop click.</p>\n",
                    "line": 25,
                    "rawdescription": "\nAutomatically add subscription to close on backdrop click."
                },
                {
                    "name": "closeOnOutsidePointerEvents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Automatically add subscription to close on outside pointer events.</p>\n",
                    "line": 28,
                    "rawdescription": "\nAutomatically add subscription to close on outside pointer events."
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "<p>Data to be injected into the dialog content.</p>\n",
                    "line": 22,
                    "rawdescription": "\nData to be injected into the dialog content."
                },
                {
                    "name": "overlayConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayConfig",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DragDropDirective",
            "id": "directive-DragDropDirective-f195e1593146066cdfde71c751d7a7c26554e99ebc67f92cbbcadd96e5c76798390df3e3d107459dc9278aea8756212b0f3c5e6a333555cec7bac7b466d6526b",
            "file": "projects/digital-delights-library/src/file-upload/drag-drop.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\r\n\r\n@Directive({\r\n    standalone: true,\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: '[ddFileDragDrop]',\r\n})\r\nexport class DragDropDirective {\r\n    constructor() {}\r\n    @Input('ddFileDragDrop') dragAndDrop?: boolean;\r\n    @HostBinding('class.fileover') dragOver?: boolean;\r\n\r\n    @Output() fileDropped: EventEmitter<File[]> = new EventEmitter();\r\n\r\n    @HostListener('dragover', ['$event']) onDragOver(evt: Event): void {\r\n        this.dragOver = true;\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event']) public onDragLeave(evt: Event): void {\r\n        this.dragOver = false;\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n    }\r\n\r\n    @HostListener('drop', ['$event']) public onDrop(evt: any): void {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n\r\n        this.dragOver = false;\r\n        const files = evt.dataTransfer.files;\r\n\r\n        if (files.length > 0) {\r\n            this.fileDropped.emit(files);\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[ddFileDragDrop]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "ddFileDragDrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileDropped",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<File[]>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.fileover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "dragOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.fileover'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-7fd58bcec3fd1a5404aae7c09da7a764f749d7e352c3606d1ffe0c54382b58f789751a2211c04bc9b6fb5545c0cca557a7a9aa302239eb78c21c8ea676628fee",
            "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, OnDestroy, Renderer2 } from '@angular/core';\r\n\r\nexport type TooltipPosition = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n@Directive({\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: '[ddTooltip]',\r\n})\r\nexport class TooltipDirective implements OnDestroy {\r\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n    @Input('ddTooltip') tooltipTitle?: string;\r\n    @Input() placement?: TooltipPosition = 'top';\r\n    @Input() sticky?: boolean = false;\r\n    private delayMs: number = 30;\r\n    private offset: number = 10;\r\n    private tooltip?: HTMLElement;\r\n    private destroyCallback?: () => void;\r\n\r\n    @HostListener('mouseenter') onMouseEnter(): void {\r\n        if (!this.tooltipTitle) {\r\n            return;\r\n        }\r\n\r\n        if (!this.tooltip) {\r\n            this.show();\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseleave') onMouseLeave(): void {\r\n        if (!this.tooltipTitle) {\r\n            return;\r\n        }\r\n\r\n        if (this.tooltip) {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // this.tooltip is undefined here for some reason. Reference is found in the destroycallback\r\n        if (this.destroyCallback) {\r\n            this.destroyCallback();\r\n        }\r\n    }\r\n\r\n    /** Creates tooltip, sets correct position and then shows it. */\r\n    private show(): void {\r\n        this.create();\r\n        this.setPosition();\r\n\r\n        this.renderer.addClass(this.tooltip, 'dd-tooltip-show');\r\n    }\r\n\r\n    /** Hides tooltip. */\r\n    private hide(): void {\r\n        this.renderer.removeClass(this.tooltip, 'dd-tooltip-show');\r\n        this.renderer.removeChild(document.body, this.tooltip);\r\n\r\n        delete this.tooltip;\r\n        delete this.destroyCallback;\r\n    }\r\n\r\n    private create(): void {\r\n        if (!this.tooltipTitle) {\r\n            throw Error('Tooltip title missing');\r\n        }\r\n\r\n        this.tooltip = this.renderer.createElement('span');\r\n\r\n        this.destroyCallback = () => {\r\n            this.renderer.removeChild(document.body, this.tooltip);\r\n            delete this.destroyCallback;\r\n        };\r\n\r\n        this.renderer.appendChild(\r\n            this.tooltip,\r\n            this.renderer.createText(this.tooltipTitle) // textNode\r\n        );\r\n\r\n        this.renderer.appendChild(document.body, this.tooltip);\r\n\r\n        this.renderer.addClass(this.tooltip, 'dd-tooltip');\r\n        this.renderer.addClass(this.tooltip, `dd-tooltip-${this.placement}`);\r\n        if (this.sticky) {\r\n            this.renderer.addClass(this.tooltip, 'sticky');\r\n        }\r\n\r\n        this.renderer.setStyle(this.tooltip, '-webkit-transition', `opacity ${this.delayMs}ms`);\r\n        this.renderer.setStyle(this.tooltip, '-moz-transition', `opacity ${this.delayMs}ms`);\r\n        this.renderer.setStyle(this.tooltip, '-o-transition', `opacity ${this.delayMs}ms`);\r\n        this.renderer.setStyle(this.tooltip, 'transition', `opacity ${this.delayMs}ms`);\r\n    }\r\n\r\n    private setPosition(): void {\r\n        if (!this.tooltip) {\r\n            throw Error('Tooltip not found.');\r\n        }\r\n\r\n        const hostPos = this.el.nativeElement.getBoundingClientRect();\r\n\r\n        const tooltipPos: DOMRect = this.tooltip.getBoundingClientRect();\r\n\r\n        const scrollPos = this.sticky ? 0 : window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n\r\n        let top;\r\n        let left;\r\n\r\n        if (this.placement === 'top') {\r\n            top = hostPos.top - tooltipPos.height - this.offset;\r\n            left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\r\n        }\r\n\r\n        if (this.placement === 'bottom') {\r\n            top = hostPos.bottom + this.offset;\r\n            left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\r\n        }\r\n\r\n        if (this.placement === 'left') {\r\n            top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\r\n            left = hostPos.left - tooltipPos.width - this.offset;\r\n        }\r\n\r\n        if (this.placement === 'right') {\r\n            top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\r\n            left = hostPos.right + this.offset;\r\n        }\r\n\r\n        this.renderer.setStyle(this.tooltip, 'top', `${top + scrollPos}px`);\r\n        this.renderer.setStyle(this.tooltip, 'left', `${left}px`);\r\n    }\r\n}\r\n",
            "selector": "[ddTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "ddTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "TooltipPosition",
                    "decorators": []
                },
                {
                    "name": "sticky",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                }
            ],
            "propertiesClass": [
                {
                    "name": "delayMs",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroyCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "offset",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHides tooltip.",
                    "description": "<p>Hides tooltip.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCreates tooltip, sets correct position and then shows it.",
                    "description": "<p>Creates tooltip, sets correct position and then shows it.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-95d619ab24c0568460d5a4ab6417c2c1369cb917401c0c38d48c65bc31a54876f3a7516d508c7ad9f776ca1e92861ab10b86b186b84adb9865fe3b5c31ab90e2",
            "file": "projects/digital-delights-library/src/accordion/components/accordion/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe header text of the accordion.",
                    "description": "<p>The header text of the accordion.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerBackground",
                    "defaultValue": "'dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe background color of the accordion header.",
                    "description": "<p>The background color of the accordion header.</p>\n",
                    "line": 40,
                    "type": "\"dark\" | \"light\"",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls if the accordion is open/closed.",
                    "description": "<p>Controls if the accordion is open/closed.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "preRenderContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to pre-render the content of the accordion.\nThis can be useful for performance reasons if the content is complex.\n",
                    "description": "<p>Whether to pre-render the content of the accordion.\nThis can be useful for performance reasons if the content is complex.</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe subheader text of the accordion.",
                    "description": "<p>The subheader text of the accordion.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA template that can be passed as an input.\nFor instance, this is used with external libraries when preRenderContent is false,\nbecause some do not work properly inside ng-content.\n",
                    "description": "<p>A template that can be passed as an input.\nFor instance, this is used with external libraries when preRenderContent is false,\nbecause some do not work properly inside ng-content.</p>\n",
                    "line": 46,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accordionClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event that is emitted when the accordion is clicked.",
                    "description": "<p>An event that is emitted when the accordion is clicked.</p>\n",
                    "line": 49,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides an interactive UI component that can be expanded or collapsed.</p>\n",
            "rawdescription": "\n\nProvides an interactive UI component that can be expanded or collapsed.\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\n\r\n/**\r\n * Provides an interactive UI component that can be expanded or collapsed.\r\n */\r\n@Component({\r\n    selector: 'dd-accordion',\r\n    templateUrl: './accordion.component.html',\r\n    styleUrls: ['./accordion.component.scss'],\r\n    animations: [\r\n        trigger('toggleAccordionAnimation', [\r\n            /** Define the animation for expanding the accordion. */\r\n            transition(':enter', [style({ 'max-height': '0px' }), animate('150ms linear', style({ 'max-height': '99999px' }))]),\r\n            /** Define the animation for collapsing the accordion. */\r\n            transition(':leave', [style({ 'max-height': '*' }), animate('150ms linear', style({ 'max-height': '0px' }))]),\r\n            state(\r\n                'open',\r\n                style({\r\n                    overflow: 'auto',\r\n                })\r\n            ),\r\n        ]),\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionComponent {\r\n    /** The header text of the accordion. */\r\n    @Input() header?: string;\r\n    /** The subheader text of the accordion. */\r\n    @Input() subHeader?: string;\r\n    /**\r\n     * Whether to pre-render the content of the accordion.\r\n     * This can be useful for performance reasons if the content is complex.\r\n     */\r\n    @Input() preRenderContent?: boolean = false;\r\n    /** Controls if the accordion is open/closed. */\r\n    @Input() open: boolean = false;\r\n    /** The background color of the accordion header. */\r\n    @Input() headerBackground?: 'dark' | 'light' = 'dark';\r\n    /**\r\n     * A template that can be passed as an input.\r\n     * For instance, this is used with external libraries when preRenderContent is false,\r\n     * because some do not work properly inside ng-content.\r\n     */\r\n    @Input() template?: TemplateRef<any>;\r\n\r\n    /** An event that is emitted when the accordion is clicked. */\r\n    @Output() accordionClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values.\r\n     * These classes are used to style the accordion based on its state.\r\n     */\r\n    get accordionClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'elevation-04': this.open,\r\n            'elevation-00': !this.open,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values.\r\n     * These classes are used to style the accordion header based on its state.\r\n     */\r\n    get accordionHeaderClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'elevation-04 border-radius-0-bottom accordion-header-open ': this.open,\r\n            'dd-primary-500 dd-primary-600-hover': this.headerBackground === 'dark' && this.open,\r\n            'dd-primary-50 dd-primary-100-hover': this.headerBackground === 'light' && this.open,\r\n            'dd-white dd-primary-50-hover': !this.open,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Alternative transitions needed for prerendered content as it doesn't follow the same ngIf logic\r\n.ng-content.prerender-open {\r\n    transition: max-height linear 150ms;\r\n    overflow: auto;\r\n    // The transition will only work with a fixed height, so it is set as a large value which the component probably wont grow into.\r\n    max-height: 99999px;\r\n}\r\n.ng-content.prerender-hidden {\r\n    overflow: hidden !important;\r\n    max-height: 0 !important;\r\n    transition: all linear 150ms;\r\n}\r\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "accordionClasses": {
                    "name": "accordionClasses",
                    "getSignature": {
                        "name": "accordionClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 55,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.</p>\n"
                    }
                },
                "accordionHeaderClasses": {
                    "name": "accordionHeaderClasses",
                    "getSignature": {
                        "name": "accordionHeaderClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 66,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"accordion border-radius-6 w-100-p\" [ngClass]=\"{'open': open}\" [ngClass]=\"accordionClasses\">\r\n    <div class=\"accordion-header border-radius-6 px-spacer-mini py-spacer-xmini cursor-pointer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\r\n         [ngClass]=\"accordionHeaderClasses\" (click)=\"accordionClick.emit()\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"100\">\r\n            <ng-container *ngIf=\"header || subHeader; else customTemplate\">\r\n                <div class=\"subtitle-1\">\r\n                    {{header}}\r\n                </div>\r\n                <div class=\"subtitle-2 ml-spacer-mini\">\r\n                    {{subHeader}}\r\n                </div>\r\n            </ng-container>\r\n            <ng-template #customTemplate>\r\n\r\n                <ng-content select=\"[header]\"></ng-content>\r\n\r\n            </ng-template>\r\n        </div>\r\n        <dd-icon [icon]=\"open ? 'dd-icon-arrow-up' : 'dd-icon-arrow-down'\"></dd-icon>\r\n    </div>\r\n    <ng-container *ngIf=\"preRenderContent || open\">\r\n        <div [@toggleAccordionAnimation]=\"open && 'open'\" class=\"ng-content dd-white overflow-hidden border-radius-6-bottom\"\r\n             [ngClass]=\"{'prerender-hidden':preRenderContent && !open, 'prerender-open':preRenderContent && open, 'p-spacer-basic': open, 'px-spacer-basic': !open }\">\r\n            <div class=\"w-100-p overflow-x-auto\">\r\n                <ng-container *ngIf=\"template; else contentTemplate\" [ngTemplateOutlet]=\"template\"></ng-container>\r\n                <ng-template #contentTemplate>\r\n                    <ng-content></ng-content>\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "AccordionV2Component",
            "id": "component-AccordionV2Component-694bcae0ff58de335883535f7359117508751a01b9ddca2433b86b0ef9ba6c326b0c36df3037b4c86cd22440ae132e4d4217bf7860c6aee461f3fb7bef371a04",
            "file": "projects/digital-delights-library/src/accordion/components/accordion-v2/accordion-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-accordion-v2",
            "styleUrls": [
                "./accordion-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "headerBackground",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe background color of the accordion header.",
                    "description": "<p>The background color of the accordion header.</p>\n",
                    "line": 33,
                    "type": "\"white\" | \"light\"",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls if the accordion is open/closed.",
                    "description": "<p>Controls if the accordion is open/closed.</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sideColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe side color of the accordion.",
                    "description": "<p>The side color of the accordion.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accordionClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event that is emitted when the accordion is clicked.",
                    "description": "<p>An event that is emitted when the accordion is clicked.</p>\n",
                    "line": 36,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides an interactive UI component that can be expanded or collapsed.</p>\n",
            "rawdescription": "\n\nProvides an interactive UI component that can be expanded or collapsed.\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n/**\r\n * Provides an interactive UI component that can be expanded or collapsed.\r\n */\r\n@Component({\r\n    selector: 'dd-accordion-v2',\r\n    templateUrl: './accordion-v2.component.html',\r\n    styleUrls: ['./accordion-v2.component.scss'],\r\n    animations: [\r\n        trigger('toggleAccordionAnimation', [\r\n            /** Define the animation for expanding the accordion. */\r\n            transition(':enter', [style({ 'max-height': '0px' }), animate('150ms linear', style({ 'max-height': '99999px' }))]),\r\n            /** Define the animation for collapsing the accordion. */\r\n            transition(':leave', [style({ 'max-height': '*' }), animate('150ms linear', style({ 'max-height': '0px' }))]),\r\n            state(\r\n                'open',\r\n                style({\r\n                    overflow: 'auto',\r\n                })\r\n            ),\r\n        ]),\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionV2Component {\r\n    /** Controls if the accordion is open/closed. */\r\n    @Input() open: boolean = false;\r\n    /** The side color of the accordion. */\r\n    @Input() sideColor?: string;\r\n    /** The background color of the accordion header. */\r\n    @Input() headerBackground?: 'white' | 'light' = 'white';\r\n\r\n    /** An event that is emitted when the accordion is clicked. */\r\n    @Output() accordionClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values.\r\n     * These classes are used to style the accordion based on its state.\r\n     */\r\n    get accordionClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'elevation-04': this.open,\r\n            'elevation-00': !this.open,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values.\r\n     * These classes are used to style the accordion header based on its state.\r\n     */\r\n    get accordionHeaderClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'accordion-header-open border-radius-0-bottom': this.open && this.headerBackground === 'white',\r\n            'dd-primary-50-bg dd-primary-100-hover': this.open && this.headerBackground === 'light',\r\n            'dd-primary-50-hover': !this.open || this.headerBackground === 'white',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values.\r\n     * These classes are used to style the side color of the accordion based on its state.\r\n     */\r\n    get sideColorClasses(): { [klass: string]: boolean } {\r\n        const classDict: { [klass: string]: boolean } = {\r\n            'border-radius-0-bottom': this.open,\r\n        };\r\n\r\n        if (!this.sideColor) {\r\n            return classDict;\r\n        }\r\n\r\n        classDict[this.sideColor] = true;\r\n\r\n        return classDict;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n\r\n    .accordion-header {\r\n        @include themify.dd-themify() {\r\n            min-height: themify.dd-configuration('inputs', default-size) !important;\r\n        }\r\n    }\r\n\r\n    .accordion-content-container {\r\n        width: calc(100% - 8px);\r\n    }\r\n}\r\n",
                    "styleUrl": "./accordion-v2.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "accordionClasses": {
                    "name": "accordionClasses",
                    "getSignature": {
                        "name": "accordionClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 42,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.</p>\n"
                    }
                },
                "accordionHeaderClasses": {
                    "name": "accordionHeaderClasses",
                    "getSignature": {
                        "name": "accordionHeaderClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 53,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.</p>\n"
                    }
                },
                "sideColorClasses": {
                    "name": "sideColorClasses",
                    "getSignature": {
                        "name": "sideColorClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 65,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the side color of the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the side color of the accordion based on its state.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"accordion border-radius-6 w-100-p dd-white\" [ngClass]=\"{'open': open}\" [ngClass]=\"accordionClasses\">\r\n    <div class=\"accordion-header border-radius-6 cursor-pointer\" fxFlex [ngClass]=\"accordionHeaderClasses\" (click)=\"accordionClick.emit()\">\r\n        <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div class=\"h-100-p min-h-100-p w-8 border-radius-6-left\" [ngClass]=\"sideColorClasses\">\r\n            </div>\r\n\r\n            <div class=\"px-spacer-mini py-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex=\"100\">\r\n                <ng-content select=\"[header]\"></ng-content>\r\n\r\n                <dd-icon [icon]=\"open ? 'dd-icon-arrow-up' : 'dd-icon-arrow-down'\"></dd-icon>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"open\">\r\n        <div [@toggleAccordionAnimation]=\"open && 'open'\" fxFlex class=\"border-radius-6-bottom dd-white-bg overflow-hidden\">\r\n            <div fxLayout=\"row\" class=\"w-100-p\">\r\n                <div class=\"h-100-p min-h-100-p w-8\" [ngClass]=\"sideColorClasses\"></div>\r\n\r\n                <div class=\"accordion-content-container p-spacer-basic\">\r\n                    <div class=\"w-100-p overflow-x-auto\">\r\n                        <ng-content></ng-content>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-3c6f36d454b61a4d641aa0bd3a297f58619b028687769f3dd6ea7ca803de9edb3baa34392cb20d747cf9bba5e6df71bb660252dbfaf25a232eeb18ee11a60ab1",
            "file": "projects/digital-delights-library/src/badge/components/badge/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allowMultiline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won't wrap.\n",
                    "description": "<p>Controls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won&#39;t wrap.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the badge.\n",
                    "description": "<p>The text to be displayed on the badge.</p>\n",
                    "line": 16,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "boldText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text is bold.\n",
                    "description": "<p>Controls whether the badge text is bold.</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant for the badge.\nSupports all color options in the format 'dd-{color}'.\n",
                    "description": "<p>The color variant for the badge.\nSupports all color options in the format &#39;dd-{color}&#39;.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the badge. This is optional.\n",
                    "description": "<p>The name of the icon to be displayed on the badge. This is optional.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textSizeVariant",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size variant for the badge text.\n",
                    "description": "<p>The size variant for the badge text.</p>\n",
                    "line": 32,
                    "type": "\"normal\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe font variant for the badge text.\n",
                    "description": "<p>The font variant for the badge text.</p>\n",
                    "line": 43,
                    "type": "\"data\" | \"default\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI component that displays a badge with optional text and icon.</p>\n",
            "rawdescription": "\n\nUI component that displays a badge with optional text and icon.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n/**\r\n * UI component that displays a badge with optional text and icon.\r\n */\r\n@Component({\r\n    selector: 'dd-badge',\r\n    templateUrl: './badge.component.html',\r\n    styleUrls: ['./badge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BadgeComponent {\r\n    /**\r\n     * The text to be displayed on the badge.\r\n     */\r\n    @Input() badgeText?: string | number;\r\n\r\n    /**\r\n     * The name of the icon to be displayed on the badge. This is optional.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * The color variant for the badge.\r\n     * Supports all color options in the format 'dd-{color}'.\r\n     */\r\n    @Input() colorVariant: string = 'dd-primary-100';\r\n\r\n    /**\r\n     * The size variant for the badge text.\r\n     */\r\n    @Input() textSizeVariant: 'normal' | 'small' = 'normal';\r\n\r\n    /**\r\n     * Controls whether the badge text can wrap to multiple lines.\r\n     * By default, this is set to false, meaning the text won't wrap.\r\n     */\r\n    @Input() allowMultiline: boolean = false;\r\n\r\n    /**\r\n     * The font variant for the badge text.\r\n     */\r\n    @Input() textVariant: 'data' | 'default' = 'data';\r\n\r\n    /**\r\n     * Controls whether the badge text is bold.\r\n     */\r\n    @Input() boldText: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n\r\n    .no-wrap {\r\n        white-space: nowrap;\r\n    }\r\n}\r\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"badgeText\" class=\"min-h-28 border-radius-2 {{colorVariant}} py-spacer-solo px-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"center center\"\r\n     [ngClass]=\"{'no-wrap': !allowMultiline, 'strong': boldText}\">\r\n    <ng-container *ngIf=\"icon\">\r\n        <dd-icon class=\"mr-spacer-xmini\" [icon]=\"icon\" [variant]=\"'mini'\"></dd-icon>\r\n    </ng-container>\r\n\r\n    <div [ngClass]=\"{'all-caps data': textVariant === 'data', 'text-body-2': textSizeVariant === 'normal', 'caption' : textSizeVariant === 'small'}\">\r\n        {{badgeText}}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "BadgeInfoComponent",
            "id": "component-BadgeInfoComponent-10461e62efcb73788bc0c8cb528ca944127a80d09b83ed6ac47d49e18e2f269fa86c8cffa0dca8a87bea4c3e77cfbc71d23d69a4a0a76095edd9ec6d2a51ad30",
            "file": "projects/digital-delights-library/src/badge/components/badge-info/badge-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge-info",
            "styleUrls": [
                "./badge-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "infoText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to be shown in the tooltip.\n",
                    "description": "<p>Text to be shown in the tooltip.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "allowMultiline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won't wrap.\n",
                    "description": "<p>Controls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won&#39;t wrap.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the badge.\n",
                    "description": "<p>The text to be displayed on the badge.</p>\n",
                    "line": 16,
                    "type": "string | number",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "boldText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text is bold.\n",
                    "description": "<p>Controls whether the badge text is bold.</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant for the badge.\nSupports all color options in the format 'dd-{color}'.\n",
                    "description": "<p>The color variant for the badge.\nSupports all color options in the format &#39;dd-{color}&#39;.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the badge. This is optional.\n",
                    "description": "<p>The name of the icon to be displayed on the badge. This is optional.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "textSizeVariant",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size variant for the badge text.\n",
                    "description": "<p>The size variant for the badge text.</p>\n",
                    "line": 32,
                    "type": "\"normal\" | \"small\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe font variant for the badge text.\n",
                    "description": "<p>The font variant for the badge text.</p>\n",
                    "line": 43,
                    "type": "\"data\" | \"default\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<BadgeInfoOverlayComponent>",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses the tooltip and cleans up the overlay model.\n",
                    "description": "<p>Closes the tooltip and cleans up the overlay model.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the click event on the badge.\nIf the tooltip is open, it closes it.\nIf the tooltip is not open, it opens it.\n",
                    "description": "<p>Handles the click event on the badge.\nIf the tooltip is open, it closes it.\nIf the tooltip is not open, it opens it.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Extends the BadgeComponent to include additional information in a tooltip.</p>\n",
            "rawdescription": "\n\nExtends the BadgeComponent to include additional information in a tooltip.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OverlayOpenModel, OverlayService } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { Subject, delay, take, takeUntil } from 'rxjs';\r\nimport { BadgeInfoOverlayComponent } from '../badge-info-overlay/badge-info-overlay.component';\r\nimport { BadgeComponent } from '../badge/badge.component';\r\n\r\n/**\r\n * Extends the BadgeComponent to include additional information in a tooltip.\r\n */\r\n@Component({\r\n    selector: 'dd-badge-info',\r\n    templateUrl: './badge-info.component.html',\r\n    styleUrls: ['./badge-info.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BadgeInfoComponent extends BadgeComponent {\r\n    constructor(private overlayService: OverlayService) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Text to be shown in the tooltip.\r\n     */\r\n    @Input() infoText?: string;\r\n\r\n    overlayModel?: OverlayOpenModel<BadgeInfoOverlayComponent>;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /**\r\n     * Handles the click event on the badge.\r\n     * If the tooltip is open, it closes it.\r\n     * If the tooltip is not open, it opens it.\r\n     */\r\n    onAnchorClick(element: HTMLDivElement): void {\r\n        // Close existing overlay\r\n        if (!!this.overlayModel) {\r\n            this.closeMenu();\r\n            return;\r\n        }\r\n\r\n        if (!this.infoText) {\r\n            return;\r\n        }\r\n\r\n        const widthOfMenuelement: number = element.offsetWidth;\r\n\r\n        const config = this.overlayService.getConnectedToConfig<string>(element, '.dd-badge-additional-info', this.infoText);\r\n\r\n        if (config.overlayConfig) {\r\n            config.overlayConfig.minWidth = widthOfMenuelement;\r\n            config.closeOnOutsidePointerEvents = true;\r\n        }\r\n\r\n        this.overlayModel = this.overlayService.open(BadgeInfoOverlayComponent, config);\r\n\r\n        this.overlayModel.overlayRef\r\n            .detachments()\r\n            .pipe(\r\n                // Add delay so when clicking anchor (that is outside event) the anchor click happens first and doesnt open a new overlay.\r\n                delay(1),\r\n                take(1),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Closes the tooltip and cleans up the overlay model.\r\n     */\r\n    private closeMenu(): void {\r\n        this.overlayModel?.close();\r\n        delete this.overlayModel;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n\r\n    .no-wrap {\r\n        white-space: nowrap;\r\n    }\r\n}\r\n",
                    "styleUrl": "./badge-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BadgeComponent"
            ],
            "templateData": "<div fxLayout=\"column\" #additionalInfoAnchor>\r\n    <div *ngIf=\" badgeText\" class=\"min-h-28 border-radius-2 {{colorVariant}} py-spacer-solo px-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"center center\"\r\n         [ngClass]=\"{'no-wrap': !allowMultiline, 'strong': boldText, 'cursor-pointer': infoText}\" (click)=\"onAnchorClick(additionalInfoAnchor)\">\r\n        <ng-container *ngIf=\"icon\">\r\n            <dd-icon class=\"mr-spacer-xmini\" [icon]=\"icon\" [variant]=\"'mini'\"></dd-icon>\r\n        </ng-container>\r\n\r\n        <div [ngClass]=\"{'all-caps data': textVariant === 'data', 'text-body-2': textSizeVariant === 'normal', 'caption' : textSizeVariant === 'small'}\">\r\n            {{badgeText}}\r\n        </div>\r\n        <div *ngIf=\"infoText\">\r\n            <dd-icon [variant]=\"'mini'\" [icon]=\"!!overlayModel ? 'dd-icon-arrow-up' : 'dd-icon-arrow-down'\">\r\n            </dd-icon>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "BadgeInfoOverlayComponent",
            "id": "component-BadgeInfoOverlayComponent-46ce53e1d62b882eb53396cbfc60c113b213a0d76856e5285d19c621f6643d969c3230dd8b907ce7413dffa226a8d095238021fcf686fdcbd0ab20b89686b812",
            "file": "projects/digital-delights-library/src/badge/components/badge-info-overlay/badge-info-overlay.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge-info-overlay",
            "styleUrls": [
                "./badge-info-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-info-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { OVERLAY_DATA } from '@digitaldelightsoy/design-library/src/overlay';\r\n\r\n@Component({\r\n    selector: 'dd-badge-info-overlay',\r\n    templateUrl: './badge-info-overlay.component.html',\r\n    styleUrls: ['./badge-info-overlay.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BadgeInfoOverlayComponent {\r\n    constructor(@Inject(OVERLAY_DATA) public data: string) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./badge-info-overlay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dd-badge-additional-info elevation-02 dd-white-bg p-spacer-mini border-radius-2\">\r\n    {{data}}\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-bdb5bfb82acb6235d8379739edc29a0b6a61647170973825d85cc8da065a7539c65ac25af6900ecae658239833c560b3d65bd8c3bd42a7e50d42a67d41bf19ed",
            "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn aria label for the button, for accessibility purposes.\n",
                    "description": "<p>An aria label for the button, for accessibility purposes.</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundHex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA custom background color for the button, specified as a hex code.\n",
                    "description": "<p>A custom background color for the button, specified as a hex code.</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of the button.\n'submit' should be used for buttons inside forms.\n",
                    "description": "<p>The type of the button.\n&#39;submit&#39; should be used for buttons inside forms.</p>\n",
                    "line": 70,
                    "type": "\"button\" | \"submit\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant of the button.\n",
                    "description": "<p>The color variant of the button.</p>\n",
                    "line": 34,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button is disabled and does not emit click events.\n",
                    "description": "<p>If true, the button is disabled and does not emit click events.</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button will use full width styles and take up all available space.\n",
                    "description": "<p>If true, the button will use full width styles and take up all available space.</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the button.\n",
                    "description": "<p>The name of the icon to be displayed on the button.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size of the button.\n",
                    "description": "<p>The size of the button.</p>\n",
                    "line": 44,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf set, the URL will be opened in a new tab.\n",
                    "description": "<p>If set, the URL will be opened in a new tab.</p>\n",
                    "line": 64,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the button.\n",
                    "description": "<p>The text to be displayed on the button.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA URL or array of URL segments to be used as the link for the button.\n",
                    "description": "<p>A URL or array of URL segments to be used as the link for the button.</p>\n",
                    "line": 59,
                    "type": "string | string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn event that is emitted when the button is clicked.\n",
                    "description": "<p>An event that is emitted when the button is clicked.</p>\n",
                    "line": 75,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the buttonClick event if the button is not disabled.\n",
                    "description": "<p>Emits the buttonClick event if the button is not disabled.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>A versatile button component with various customization options.</p>\n",
            "rawdescription": "\n\nA versatile button component with various customization options.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\n\r\nexport type ButtonSize = 'large' | 'normal' | 'mini';\r\nexport type ButtonColor = 'primary-light' | 'primary-dark' | 'secondary' | 'green' | 'gray' | 'yellow' | 'red';\r\n\r\n/**\r\n * A versatile button component with various customization options.\r\n */\r\n@Component({\r\n    selector: 'dd-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonComponent {\r\n    /**\r\n     * The text to be displayed on the button.\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * If true, the button is disabled and does not emit click events.\r\n     */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * The name of the icon to be displayed on the button.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * The color variant of the button.\r\n     */\r\n    @Input() color: ButtonColor = 'secondary';\r\n\r\n    /**\r\n     * A custom background color for the button, specified as a hex code.\r\n     */\r\n    @Input() backgroundHex?: string;\r\n\r\n    /**\r\n     * The size of the button.\r\n     */\r\n    @Input() size: ButtonSize = 'normal';\r\n\r\n    /**\r\n     * If true, the button will use full width styles and take up all available space.\r\n     */\r\n    @Input() @HostBinding('class.full-width') fullWidth: boolean = false;\r\n\r\n    /**\r\n     * An aria label for the button, for accessibility purposes.\r\n     */\r\n    @Input() ariaLabel?: string;\r\n\r\n    /**\r\n     * A URL or array of URL segments to be used as the link for the button.\r\n     */\r\n    @Input() url?: string | string[];\r\n\r\n    /**\r\n     * If set, the URL will be opened in a new tab.\r\n     */\r\n    @Input() target?: '_blank';\r\n\r\n    /**\r\n     * The type of the button.\r\n     * 'submit' should be used for buttons inside forms.\r\n     */\r\n    @Input() buttonType?: 'button' | 'submit' = 'button';\r\n\r\n    /**\r\n     * An event that is emitted when the button is clicked.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Emits the buttonClick event if the button is not disabled.\r\n     */\r\n    onButtonClick(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.buttonClick.emit();\r\n    }\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values for styling the button.\r\n     */\r\n    get buttonClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-btn-icon': !!this.icon,\r\n            'btn-disabled': this.disabled,\r\n            large: this.size === 'large',\r\n            mini: this.size === 'mini',\r\n            'custom-hover': !!this.backgroundHex,\r\n            'dd-white-fg': !!this.backgroundHex && this.size === 'mini',\r\n            [this.color]: !this.backgroundHex,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns an object that maps class names to boolean values for styling the button's icon.\r\n     */\r\n    get buttonIconClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-accent-fg': (this.color === 'primary-dark' || this.color === 'gray') && !this.disabled,\r\n            'dd-white-fg': this.size === 'mini' && !!this.backgroundHex && !this.disabled,\r\n            'dd-primary-500-fg': this.color === 'primary-light' && !this.disabled,\r\n            'ml-spacer-xmini': this.size === 'normal',\r\n            'ml-spacer-mini': this.size === 'large',\r\n            'ml-spacer-solo': this.size === 'mini',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host.full-width {\r\n    width: 100%;\r\n\r\n    button.dd-btn,\r\n    a.dd-btn {\r\n        width: 100%;\r\n    }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 91,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values for styling the button.\n",
                        "description": "<p>Returns an object that maps class names to boolean values for styling the button.</p>\n"
                    }
                },
                "buttonIconClasses": {
                    "name": "buttonIconClasses",
                    "getSignature": {
                        "name": "buttonIconClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 106,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values for styling the button's icon.\n",
                        "description": "<p>Returns an object that maps class names to boolean values for styling the button&#39;s icon.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n    <a class=\"dd-btn\" [ngStyle]=\"{'background-color': backgroundHex}\" [ngClass]=\"buttonClasses\" [routerLink]=\"url\" [target]=\"target\" fxFlex=\"0 1 auto\"\r\n       fxLayout=\"row\" fxLayoutAlign=\"center center\" [attr.aria-label]=\"ariaLabel\" (click)=\"onButtonClick()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </a>\r\n</ng-container>\r\n<ng-template #buttonWithoutRoutingTemplate>\r\n    <button class=\"dd-btn\" [ngStyle]=\"{'background-color': backgroundHex}\" [ngClass]=\"buttonClasses\" [type]=\"buttonType\" fxFlex=\"0 1 auto\" fxLayout=\"row\"\r\n            fxLayoutAlign=\"center center\" [attr.aria-label]=\"ariaLabel\" (click)=\"onButtonClick()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #insideButtonTemplate>\r\n    <div>{{text}}</div>\r\n    <div *ngIf=\"icon\" [ngClass]=\"buttonIconClasses\">\r\n        <dd-icon [icon]=\"icon\" [ngClass]=\"{'mini': size === 'mini'}\">\r\n        </dd-icon>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-30cce385e1f916c06f412c484c5047ffc021a2a02138922ceee7d3413842aadc6deaf03a5c7ed01ad31b612a7c4870bc604e6f161c50c9864331fd3a0431685d",
            "file": "projects/digital-delights-library/src/button/components/button-group/button-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button-group",
            "styleUrls": [
                "./button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for the button group, enhancing accessibility.\n",
                    "description": "<p>Aria label for the button group, enhancing accessibility.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn array of button models. Each model defines the properties of a button.\n",
                    "description": "<p>An array of button models. Each model defines the properties of a button.</p>\n",
                    "line": 17,
                    "type": "ButtonGroupModel[]",
                    "decorators": []
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRole attribute for the button group, providing information about the type of widget presented.\n",
                    "description": "<p>Role attribute for the button group, providing information about the type of widget presented.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Renders a group of buttons based on the provided model.</p>\n",
            "rawdescription": "\n\nRenders a group of buttons based on the provided model.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { ButtonGroupModel } from '../../models/button-models';\r\n\r\n/**\r\n * Renders a group of buttons based on the provided model.\r\n */\r\n@Component({\r\n    selector: 'dd-button-group',\r\n    templateUrl: './button-group.component.html',\r\n    styleUrls: ['./button-group.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonGroupComponent {\r\n    /**\r\n     * An array of button models. Each model defines the properties of a button.\r\n     */\r\n    @Input() buttons?: ButtonGroupModel[];\r\n\r\n    /**\r\n     * Aria label for the button group, enhancing accessibility.\r\n     */\r\n    @Input() ariaLabel?: string;\r\n\r\n    /**\r\n     * Role attribute for the button group, providing information about the type of widget presented.\r\n     */\r\n    @Input() role?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n    text-decoration: none !important;\r\n}\r\n",
                    "styleUrl": "./button-group.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div fxLayout=\"wrap\" fxLayoutGap=\"8px\" aria-label=\"aria\">\r\n    <ng-container *ngFor=\"let button of buttons\">\r\n        <ng-container *ngIf=\"button.url; else buttonWithoutRoutingTemplate\">\r\n            <a class=\"dd-btn-group-item dd-primary-500-fg border-none p-spacer-mini dd-white-bg\" [routerLink]=\"button.url\" [target]=\"button.target ?? ''\"\r\n               fxFlex=\"0 1 auto\" fxLayout=\"row\" fxLayoutAlign=\"center center\" [attr.aria-label]=\"button.ariaLabel\" [attr.role]=\"button.role ?? 'button'\"\r\n               (click)=\"button.buttonClick && button.buttonClick()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </a>\r\n        </ng-container>\r\n        <ng-template #buttonWithoutRoutingTemplate>\r\n            <button class=\"cursor-pointer dd-primary-500-fg border-none p-spacer-mini dd-white-bg\" fxFlex=\"0 1 auto\" fxLayout=\"row\"\r\n                    fxLayoutAlign=\"center center\" [attr.aria-label]=\"button.ariaLabel\" [attr.role]=\"button.role ?? 'button'\"\r\n                    (click)=\"button.buttonClick && button.buttonClick()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <ng-template #insideButtonTemplate>\r\n            <div class=\"inside-button\" [ngClass]=\"{'dd-primary-200-fg': button.disabled, 'dd-accent-fg-hover dd-accent-darkest-fg-active': !button.disabled}\"\r\n                 fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div *ngIf=\"button.icon\" class=\"mr-spacer-solo\">\r\n                    <dd-icon [icon]=\"button.icon\">\r\n                    </dd-icon>\r\n                </div>\r\n                <div>{{button.text}}</div>\r\n            </div>\r\n        </ng-template>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ButtonGroupV2Component",
            "id": "component-ButtonGroupV2Component-bba9a9ae6e951ca0fabf1f40c225963fe265bb01dfec76b5f4ead2a721007c88100beb71907e5a051265870d3a062f47fe1ceb8ba270e6b31c2c87058cc99131",
            "file": "projects/digital-delights-library/src/button/components/button-group-v2/button-group-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button-group-v2",
            "styleUrls": [
                "./button-group-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for the button group. This label enhances accessibility by providing\na descriptive name for the button group.\n",
                    "description": "<p>Aria label for the button group. This label enhances accessibility by providing\na descriptive name for the button group.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of button models. Each model defines the properties of a button.\nThe buttons are rendered in the order they appear in the array.\n",
                    "description": "<p>Array of button models. Each model defines the properties of a button.\nThe buttons are rendered in the order they appear in the array.</p>\n",
                    "line": 19,
                    "type": "ButtonGroupModel[]",
                    "decorators": []
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRole attribute for the button group. This attribute provides information about\nthe type of widget presented. It can be used by assistive technologies to help users\nnavigate and interact with the button group.\n",
                    "description": "<p>Role attribute for the button group. This attribute provides information about\nthe type of widget presented. It can be used by assistive technologies to help users\nnavigate and interact with the button group.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Renders a group of buttons in a column layout.\nEach button can have its own properties and behavior.</p>\n",
            "rawdescription": "\n\nRenders a group of buttons in a column layout.\nEach button can have its own properties and behavior.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { ButtonGroupModel } from './../../models/button-models';\r\n\r\n/**\r\n * Renders a group of buttons in a column layout.\r\n * Each button can have its own properties and behavior.\r\n */\r\n@Component({\r\n    selector: 'dd-button-group-v2',\r\n    templateUrl: './button-group-v2.component.html',\r\n    styleUrls: ['./button-group-v2.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonGroupV2Component {\r\n    /**\r\n     * Array of button models. Each model defines the properties of a button.\r\n     * The buttons are rendered in the order they appear in the array.\r\n     */\r\n    @Input() buttons?: ButtonGroupModel[];\r\n\r\n    /**\r\n     * Aria label for the button group. This label enhances accessibility by providing\r\n     * a descriptive name for the button group.\r\n     */\r\n    @Input() ariaLabel?: string;\r\n\r\n    /**\r\n     * Role attribute for the button group. This attribute provides information about\r\n     * the type of widget presented. It can be used by assistive technologies to help users\r\n     * navigate and interact with the button group.\r\n     */\r\n    @Input() role?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "dd-divider {\r\n    margin: 0 !important;\r\n    padding: 0 !important;\r\n}\r\n",
                    "styleUrl": "./button-group-v2.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div fxLayout=\"column\">\r\n    <ng-container *ngFor=\"let button of buttons\">\r\n        <dd-divider [colorVariant]=\"'dd-primary-100'\"></dd-divider>\r\n        <ng-container *ngIf=\"button.url; else buttonWithoutRoutingTemplate\">\r\n            <a class=\"dd-primary-500-fg p-spacer-xmini dd-white-bg w-100-p\" [ngClass]=\"{'dd-accent-fg-hover': !button.disabled}\" [routerLink]=\"button.url\"\r\n               [target]=\"button.target ?? ''\" fxFlex=\"0 1 auto\" [attr.aria-label]=\"button.ariaLabel\" [attr.role]=\"button.role ?? 'button'\"\r\n               (click)=\"button.buttonClick && button.buttonClick()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </a>\r\n        </ng-container>\r\n        <ng-template #buttonWithoutRoutingTemplate>\r\n            <button class=\"cursor-pointer p-spacer-xmini dd-primary-500-fg border-none dd-white-bg w-100-p\" [ngClass]=\"{'dd-accent-fg-hover': !button.disabled}\"\r\n                    fxFlex=\"0 1 auto\" [attr.aria-label]=\"button.ariaLabel\" [attr.role]=\"button.role ?? 'button'\"\r\n                    (click)=\"button.buttonClick && button.buttonClick()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <ng-template #insideButtonTemplate>\r\n            <div class=\"w-100-p\" [ngClass]=\"{'dd-primary-200-fg': button.disabled}\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                <span fxLayout=\" row\" fxLayoutAlign=\"start center\">\r\n                    <dd-icon [icon]=\"button.icon\"></dd-icon>\r\n                    <span class=\"ml-spacer-mini\">{{ button.text }}</span>\r\n                </span>\r\n                <ng-container *ngIf=\"button.loading$ | async; else arrowTemplate\">\r\n                    <div class=\"mr-spacer-solo\">\r\n                        <dd-loader-spinner [diameter]=\"24\" [loading]=\"true\"></dd-loader-spinner>\r\n                    </div>\r\n                </ng-container>\r\n                <ng-template #arrowTemplate>\r\n                    <ng-container *ngIf=\"!button.hideArrowIcon\">\r\n                        <dd-icon icon=\"dd-icon-arrow-right\"></dd-icon>\r\n                    </ng-container>\r\n                </ng-template>\r\n\r\n            </div>\r\n        </ng-template>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-da83592302fa7269ba937b98d30ce04e74ce69a5ef1293804488a03320730383d3478989dc76b62d46fb03613aee165892b1d7df10a619129aca0fef7142e45e",
            "file": "projects/digital-delights-library/src/card/components/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the spacer of the card to smaller one.\n",
                    "description": "<p>Changes the spacer of the card to smaller one.</p>\n",
                    "line": 13,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-card',\r\n    templateUrl: './card.component.html',\r\n    styleUrls: ['./card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CardComponent {\r\n    /**\r\n     * Changes the spacer of the card to smaller one.\r\n     */\r\n    @Input() variant: 'basic' | 'small' = 'basic';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n\r\n@mixin create-card-styles($variant) {\r\n    &.#{$variant} {\r\n        @include themify.dd-themify() {\r\n            $background: themify.dd-configuration('card', $variant, 'background');\r\n            $color: themify.dd-configuration('card', $variant, 'foreground');\r\n\r\n            @if $background != null {\r\n                background-color: $background;\r\n            }\r\n\r\n            @if $color != null {\r\n                color: $color;\r\n            }\r\n\r\n            $cardSpacer-x: themify.dd-configuration('card', $variant, 'spacer-x');\r\n            $cardSpacer-y: themify.dd-configuration('card', $variant, 'spacer-y');\r\n\r\n            $spacerDefault-x: themify.dd-configuration('spacers', 'default', $cardSpacer-x);\r\n            $spacerMobile-x: themify.dd-configuration('spacers', 'mobile', $cardSpacer-x);\r\n\r\n            $spacerDefault-y: themify.dd-configuration('spacers', 'default', $cardSpacer-y);\r\n            $spacerMobile-y: themify.dd-configuration('spacers', 'mobile', $cardSpacer-y);\r\n\r\n            @if $spacerDefault-x != null {\r\n                padding-left: #{$spacerDefault-x}px !important;\r\n                padding-right: #{$spacerDefault-x}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-left: #{$spacerMobile-x}px !important;\r\n                    padding-right: #{$spacerMobile-x}px !important;\r\n                }\r\n            }\r\n\r\n            @if $spacerDefault-y != null {\r\n                padding-top: #{$spacerDefault-y}px !important;\r\n                padding-bottom: #{$spacerDefault-y}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-top: #{$spacerMobile-y}px !important;\r\n                    padding-bottom: #{$spacerMobile-y}px !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.dd-card {\r\n    @include create-card-styles('basic');\r\n    @include create-card-styles('small');\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"border-radius-6 elevation-01 dd-card\" [ngClass]=\"variant\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "CardHeaderComponent",
            "id": "component-CardHeaderComponent-52ca67bb7b875b7038c314ead5e93ef4036e6f8330917570fe6f45768ef1e00a30008af0ffae99a9e6d5b1d73af1ff79b3140a51990b5e4e6966a1912269bb80",
            "file": "projects/digital-delights-library/src/card/components/card-header/card-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card-header",
            "styleUrls": [
                "./card-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines different spacers for card header.\nSmaller one is for now non-existent spacer.\n",
                    "description": "<p>Defines different spacers for card header.\nSmaller one is for now non-existent spacer.</p>\n",
                    "line": 17,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-card-header',\r\n    templateUrl: './card-header.component.html',\r\n    styleUrls: ['./card-header.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CardHeaderComponent {\r\n    @Input() heading?: string;\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Defines different spacers for card header.\r\n     * Smaller one is for now non-existent spacer.\r\n     */\r\n    @Input() variant: 'basic' | 'small' = 'basic';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/typography';\r\n\r\n@mixin create-card-styles($variant) {\r\n    &.#{$variant} {\r\n        @include themify.dd-themify() {\r\n            $background: themify.dd-configuration('card', $variant, 'header', 'background');\r\n            $color: themify.dd-configuration('card', $variant, 'header', 'foreground');\r\n\r\n            @if $background != null {\r\n                background-color: $background;\r\n            }\r\n\r\n            @if $color != null {\r\n                color: $color;\r\n            }\r\n\r\n            $cardHeaderSpacer-x: themify.dd-configuration('card', $variant, 'header', 'spacer-x');\r\n            $cardHeaderSpacer-y: themify.dd-configuration('card', $variant, 'header', 'spacer-y');\r\n\r\n            $spacerDefault-x: themify.dd-configuration('spacers', 'default', $cardHeaderSpacer-x);\r\n            $spacerMobile-x: themify.dd-configuration('spacers', 'mobile', $cardHeaderSpacer-x);\r\n\r\n            $spacerDefault-y: themify.dd-configuration('spacers', 'default', $cardHeaderSpacer-y);\r\n            $spacerMobile-y: themify.dd-configuration('spacers', 'mobile', $cardHeaderSpacer-y);\r\n\r\n            @if $spacerDefault-x != null {\r\n                padding-left: #{$spacerDefault-x}px !important;\r\n                padding-right: #{$spacerDefault-x}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-left: #{$spacerMobile-x}px !important;\r\n                    padding-right: #{$spacerMobile-x}px !important;\r\n                }\r\n            }\r\n\r\n            @if $spacerDefault-y != null {\r\n                padding-top: #{$spacerDefault-y}px !important;\r\n                padding-bottom: #{$spacerDefault-y}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-top: #{$spacerMobile-y}px !important;\r\n                    padding-bottom: #{$spacerMobile-y}px !important;\r\n                }\r\n            }\r\n\r\n            .dd-card-header-title {\r\n                // Get the base font size and use it to calculate the rem values.\r\n                $baseFontSize: themify.dd-configuration('typography', 'base', 'font-size');\r\n                // Use individual typography styles for the card.\r\n                @include typography.individualTextStyles(themify.dd-configuration('card', $variant, 'header'), $baseFontSize);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.dd-card-header {\r\n    @include create-card-styles('basic');\r\n    @include create-card-styles('small');\r\n}\r\n",
                    "styleUrl": "./card-header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"dd-card-header border-radius-6-top\" [ngClass]=\"variant\" fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"heading\">\r\n    <ng-container *ngIf=\"icon\">\r\n        <dd-icon class=\"mr-spacer-xmini dd-accent-fg\" [icon]=\"icon\">\r\n        </dd-icon>\r\n    </ng-container>\r\n    <div class=\"dd-card-header-title\">\r\n        {{ heading }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CardRowComponent",
            "id": "component-CardRowComponent-84dcadc3376a04d37f39a7d3514d29d1205256e1b11793dfee0f8790d4e361eda9d868d93c38e649570b2875d2bd06e15ac3e646d11ee2f1d4ab778bacc8743c",
            "file": "projects/digital-delights-library/src/card/components/card-row/card-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card-row",
            "styleUrls": [
                "./card-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-row.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines different spacers for card row.\nSmaller one is for now non-existent spacer.\n",
                    "description": "<p>Defines different spacers for card row.\nSmaller one is for now non-existent spacer.</p>\n",
                    "line": 14,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-card-row',\r\n    templateUrl: './card-row.component.html',\r\n    styleUrls: ['./card-row.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CardRowComponent {\r\n    /**\r\n     * Defines different spacers for card row.\r\n     * Smaller one is for now non-existent spacer.\r\n     */\r\n    @Input() variant: 'basic' | 'small' = 'basic';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n\r\n@mixin create-card-styles($variant) {\r\n    &.#{$variant} {\r\n        @include themify.dd-themify() {\r\n            $background: themify.dd-configuration('card', $variant, 'row', 'background');\r\n            $color: themify.dd-configuration('card', $variant, 'row', 'foreground');\r\n\r\n            @if $background != null {\r\n                background-color: $background;\r\n            }\r\n\r\n            @if $color != null {\r\n                color: $color;\r\n            }\r\n\r\n            $cardRowSpacer-x: themify.dd-configuration('card', $variant, 'row', 'spacer-x');\r\n            $cardRowSpacer-y: themify.dd-configuration('card', $variant, 'row', 'spacer-y');\r\n\r\n            $spacerDefault-x: themify.dd-configuration('spacers', 'default', $cardRowSpacer-x);\r\n            $spacerMobile-x: themify.dd-configuration('spacers', 'mobile', $cardRowSpacer-x);\r\n\r\n            $spacerDefault-y: themify.dd-configuration('spacers', 'default', $cardRowSpacer-y);\r\n            $spacerMobile-y: themify.dd-configuration('spacers', 'mobile', $cardRowSpacer-y);\r\n\r\n            @if $spacerDefault-x != null {\r\n                padding-left: #{$spacerDefault-x}px !important;\r\n                padding-right: #{$spacerDefault-x}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-left: #{$spacerMobile-x}px !important;\r\n                    padding-right: #{$spacerMobile-x}px !important;\r\n                }\r\n            }\r\n\r\n            @if $spacerDefault-y != null {\r\n                padding-top: #{$spacerDefault-y}px !important;\r\n                padding-bottom: #{$spacerDefault-y}px !important;\r\n\r\n                @include breakpoints.media-breakpoint('lt-md') {\r\n                    padding-top: #{$spacerMobile-y}px !important;\r\n                    padding-bottom: #{$spacerMobile-y}px !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.dd-card-row {\r\n    @include create-card-styles('basic');\r\n    @include create-card-styles('small');\r\n}\r\n",
                    "styleUrl": "./card-row.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"dd-card-row\" [ngClass]=\"variant\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-9ca932c7ef474f1039e398dcdc3a481a3292c821539f72b56ddb504c52ac6aee6949bdd4a8a01350b8664bfe4f622b945d46b31def7421a8e53c2113367490da",
            "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the chip.\n",
                    "description": "<p>The text to be displayed on the chip.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chipVariant",
                    "defaultValue": "'removable'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe variant of the chip.\n'removable' variant has a white background and red hover.\n'tag' variant changes hover to white button and secondary button when selected.\n",
                    "description": "<p>The variant of the chip.\n&#39;removable&#39; variant has a white background and red hover.\n&#39;tag&#39; variant changes hover to white button and secondary button when selected.</p>\n",
                    "line": 40,
                    "type": "ChipVariant",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon to be displayed on the chip.\nIf undefined, no icon is rendered.\n",
                    "description": "<p>The icon to be displayed on the chip.\nIf undefined, no icon is rendered.</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "'dd-accent-fg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color of the icon on the chip.\n",
                    "description": "<p>The color of the icon on the chip.</p>\n",
                    "line": 51,
                    "type": "ChipIconColor",
                    "decorators": []
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of notifications to be displayed on the chip.\nIf defined, the icon will not be shown.\n",
                    "description": "<p>The number of notifications to be displayed on the chip.\nIf defined, the icon will not be shown.</p>\n",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the chip is selected.\nA selected chip has a accent color.\n",
                    "description": "<p>Determines whether the chip is selected.\nA selected chip has a accent color.</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stopPropagation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the propagation of the click event should be stopped.\nWhen true, event.stopPropagation() is not called.\nThis is useful when used in tab navigation, as stopping the event from propagating can interfere with routing.\n",
                    "description": "<p>Determines whether the propagation of the click event should be stopped.\nWhen true, event.stopPropagation() is not called.\nThis is useful when used in tab navigation, as stopping the event from propagating can interfere with routing.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chipClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an event when the chip is clicked.\n",
                    "description": "<p>Emits an event when the chip is clicked.</p>\n",
                    "line": 69,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChipClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the click event on the chip.\nIf stopPropagation is true, it stops the event from bubbling up.\n",
                    "description": "<p>Handles the click event on the chip.\nIf stopPropagation is true, it stops the event from bubbling up.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component that provides a customizable chip element.\nIt can be used in various contexts.</p>\n",
            "rawdescription": "\n\nComponent that provides a customizable chip element.\nIt can be used in various contexts.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n/**\r\n * Supported variants for chip.\r\n */\r\nexport type ChipVariant = 'removable' | 'tag';\r\n\r\n/**\r\n * Supported colors for chips.\r\n */\r\nexport type ChipIconColor = 'dd-danger-fg' | 'dd-accent-fg';\r\n\r\n/**\r\n * Component that provides a customizable chip element.\r\n * It can be used in various contexts.\r\n */\r\n@Component({\r\n    selector: 'dd-chip',\r\n    templateUrl: './chip.component.html',\r\n    styleUrls: ['./chip.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChipComponent {\r\n    /**\r\n     * The text to be displayed on the chip.\r\n     */\r\n    @Input() chipText?: string;\r\n\r\n    /**\r\n     * Determines whether the chip is selected.\r\n     * A selected chip has a accent color.\r\n     */\r\n    @Input() selected: boolean = false;\r\n\r\n    /**\r\n     * The variant of the chip.\r\n     * 'removable' variant has a white background and red hover.\r\n     * 'tag' variant changes hover to white button and secondary button when selected.\r\n     */\r\n    @Input() chipVariant: ChipVariant = 'removable';\r\n\r\n    /**\r\n     * The icon to be displayed on the chip.\r\n     * If undefined, no icon is rendered.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * The color of the icon on the chip.\r\n     */\r\n    @Input() iconColor: ChipIconColor = 'dd-accent-fg';\r\n\r\n    /**\r\n     * The number of notifications to be displayed on the chip.\r\n     * If defined, the icon will not be shown.\r\n     */\r\n    @Input() notifications?: number;\r\n\r\n    /**\r\n     * Determines whether the propagation of the click event should be stopped.\r\n     * When true, event.stopPropagation() is not called.\r\n     * This is useful when used in tab navigation, as stopping the event from propagating can interfere with routing.\r\n     */\r\n    @Input() stopPropagation: boolean = false;\r\n\r\n    /**\r\n     * Emits an event when the chip is clicked.\r\n     */\r\n    @Output() chipClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    /**\r\n     * Handles the click event on the chip.\r\n     * If stopPropagation is true, it stops the event from bubbling up.\r\n     */\r\n    onChipClick(e: Event): void {\r\n        if (this.stopPropagation) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        this.chipClick.emit();\r\n    }\r\n\r\n    /**\r\n     * Helper method for rendering ngClass for the chip.\r\n     * It returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\r\n     */\r\n    get chipClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-accent dd-accent-border': this.selected,\r\n            'dd-white': !this.selected,\r\n            'dd-accent-darker-hover dd-accent-darkest-active': this.chipVariant === 'tag' && this.selected,\r\n            'dd-primary-100-hover dd-primary-50-active': this.chipVariant === 'tag' && !this.selected,\r\n            removable: this.chipVariant === 'removable',\r\n            'pl-spacer-mini pr-spacer-xmini': !!this.icon,\r\n            'px-spacer-mini': !this.icon,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Helper method for rendering ngClass for the chip notifications.\r\n     * It returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\r\n     */\r\n    get notificationClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-white': this.selected,\r\n            'dd-primary-300': !this.selected,\r\n            'px-spacer-solo': true,\r\n            'px-spacer-xmini': this.notifications !== undefined && this.notifications > 9,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.dd-chip {\r\n    display: inline-flex !important;\r\n    white-space: nowrap;\r\n\r\n    &.removable:hover {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('danger') !important;\r\n            border-color: themify.dd-color('danger') !important;\r\n            color: themify.dd-color-contrast('danger') !important;\r\n        }\r\n\r\n        .dd-chip-icon {\r\n            @include themify.dd-themify() {\r\n                color: themify.dd-color-contrast('danger') !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    .dd-chip-icon {\r\n        &.accent-contrast {\r\n            @include themify.dd-themify() {\r\n                color: themify.dd-color-contrast('accent') !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n\r\n.chip-notification {\r\n    display: grid;\r\n    text-align: center;\r\n    align-items: center;\r\n}\r\n",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "chipClasses": {
                    "name": "chipClasses",
                    "getSignature": {
                        "name": "chipClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 87,
                        "rawdescription": "\n\nHelper method for rendering ngClass for the chip.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\n",
                        "description": "<p>Helper method for rendering ngClass for the chip.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.</p>\n"
                    }
                },
                "notificationClasses": {
                    "name": "notificationClasses",
                    "getSignature": {
                        "name": "notificationClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 103,
                        "rawdescription": "\n\nHelper method for rendering ngClass for the chip notifications.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\n",
                        "description": "<p>Helper method for rendering ngClass for the chip notifications.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"chipText\">\r\n    <div class=\"dd-chip h-32 py-spacer-solo border border-radius-4 cursor-pointer\" [ngClass]=\"chipClasses\" fxLayout=\"row\" fxLayoutAlign=\"center center\"\r\n         (click)=\"onChipClick($event)\">\r\n        <span>{{chipText}}</span>\r\n\r\n        <ng-container *ngIf=\"notifications; else iconTemplate\">\r\n            <div class=\"ml-spacer-xmini border-radius-16 h-20 min-w-20 chip-notification subtitle-2 \" [ngClass]=\"notificationClasses\">\r\n                <span>{{notifications}}</span>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-template #iconTemplate>\r\n            <ng-container *ngIf=\"icon\">\r\n                <div class=\"dd-chip-icon ml-spacer-xmini {{iconColor}}\" [ngClass]=\"{'accent-contrast': this.selected && iconColor === 'dd-accent-fg'}\">\r\n                    <dd-icon [icon]=\"icon\" [variant]=\"'mini'\"></dd-icon>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "ConfirmSelectionOverlayComponent",
            "id": "component-ConfirmSelectionOverlayComponent-86497b4f40582dafa425f6ad37f1c7b456efd370cf91291521eefa7b59e275cae544a8545e8933836a0a9262f6224990b442fb66e83926491841119f20c0415b",
            "file": "projects/digital-delights-library/src/overlay/components/confirm-selection-overlay/confirm-selection-overlay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-confirm-selection-overlay",
            "styleUrls": [
                "./confirm-selection-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-selection-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmSelectionOverlayModel",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayAnimationState",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { OverlayAnimationState } from '../../models/animations';\r\nimport { OVERLAY_DATA } from '../../models/overlay';\r\n\r\nexport interface ConfirmSelectionOverlayModel {\r\n    heading: string;\r\n    bodyText?: string;\r\n    cancelButtonText?: string;\r\n    confirmButtonText?: string;\r\n    useAnimation?: boolean;\r\n    /** User can define action that is run when user clicks cancel button. */\r\n    cancelSelection$?: () => Observable<boolean>;\r\n    confirmSelection$: () => Observable<boolean>;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-confirm-selection-overlay',\r\n    templateUrl: './confirm-selection-overlay.component.html',\r\n    styleUrls: ['./confirm-selection-overlay.component.scss'],\r\n})\r\nexport class ConfirmSelectionOverlayComponent implements OnDestroy, OnInit {\r\n    constructor(@Inject(OVERLAY_DATA) public data: ConfirmSelectionOverlayModel) {}\r\n\r\n    @Output() closeOverlay: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    viewState?: OverlayAnimationState;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<void> = new Subject();\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next();\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.data?.useAnimation) {\r\n            this.viewState = 'in-top';\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (this.data?.cancelSelection$) {\r\n            this.data\r\n                .cancelSelection$()\r\n                .pipe(take(1), takeUntil(this._unsubscribeAllSubject))\r\n                .subscribe((success: boolean) => {\r\n                    if (success) {\r\n                        this.closeOverlay.emit(false);\r\n                    }\r\n                });\r\n        } else {\r\n            this.closeOverlay.emit(false);\r\n        }\r\n    }\r\n\r\n    confirm(): void {\r\n        if (!this.data) {\r\n            return;\r\n        }\r\n\r\n        this.data\r\n            .confirmSelection$()\r\n            .pipe(take(1), takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((success: boolean) => {\r\n                if (success) {\r\n                    this.closeOverlay.emit(true);\r\n                }\r\n            });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-selection-overlay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ConfirmSelectionOverlayModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ConfirmSelectionOverlayModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "templateData": "<dd-overlay-wrapper *ngIf=\"data\" [viewState]=\"viewState\">\r\n    <div class=\"p-spacer-mini h-100-p\" fxLayout=\"column\" fxLayoutAlign=\"center space-between\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div class=\"h6 bold all-caps dd-primary-500-fg\">\r\n                {{data.heading}}\r\n            </div>\r\n        </div>\r\n        <div class=\"confirm-selection-overlay-body\" fxFlex=\"grow\" *ngIf=\"data.bodyText\" fxLayoutAlign=\"start center\">\r\n            <div class=\"h6 dd-primary-300-fg\">\r\n                {{data.bodyText}}\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start end\" class=\"w-100-p p-spacer-mini\" fxLayoutAlign=\"end start\" fxLayoutGap=\"8px\">\r\n            <dd-button [color]=\"'primary-light'\" [text]=\"data.cancelButtonText || 'Cancel'\" (buttonClick)=\"close()\">\r\n            </dd-button>\r\n\r\n            <dd-button [color]=\"'secondary'\" [text]=\"data.confirmButtonText || 'Confirm'\" (buttonClick)=\"confirm()\">\r\n            </dd-button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</dd-overlay-wrapper>\r\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-0bb8878028be7afcd30ad76d0cfd9127b8331b061bd84844f4cb0551c39e6bde2b74b1e4a5f416a281ae0fd6b2534e356823fb61ba98aa844356e60ac317f607",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }",
                    "type": "component"
                }
            ],
            "selector": "dd-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe date (month) that the datepicker is currently showing.\nIf this value is initialized, that month is shown first.\n",
                    "description": "<p>The date (month) that the datepicker is currently showing.\nIf this value is initialized, that month is shown first.</p>\n",
                    "line": 99,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "noFreeSlotsDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDates that can be selected and have free slots.",
                    "description": "<p>Dates that can be selected and have free slots.</p>\n",
                    "line": 93,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{ ...defaultOptions }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfiguration for the datepicker.",
                    "description": "<p>Configuration for the datepicker.</p>\n",
                    "line": 87,
                    "type": "DatepickerOptions",
                    "decorators": []
                },
                {
                    "name": "selectableDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3005,
                            "end": 3041,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 354,
                            "tagName": {
                                "pos": 3006,
                                "end": 3009,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "see"
                            },
                            "comment": "<p>min and max.</p>\n",
                            "name": {
                                "pos": 3010,
                                "end": 3027,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 317,
                                "name": {
                                    "pos": 3010,
                                    "end": 3027,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "DatepickerOptions"
                                }
                            }
                        }
                    ],
                    "rawdescription": "\nDates that can be selected. Also affected by @see DatepickerOptions min and max.",
                    "description": "<p>Dates that can be selected. Also affected by @see DatepickerOptions min and max.</p>\n",
                    "line": 90,
                    "type": "Date[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Day",
                    "optional": true,
                    "description": "<p>The current date to display in the legend.</p>\n",
                    "line": 112,
                    "rawdescription": "\nThe current date to display in the legend."
                },
                {
                    "name": "dayNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>The names of the weekdays for the header row.</p>\n",
                    "line": 109,
                    "rawdescription": "\nThe names of the weekdays for the header row."
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Day[]",
                    "optional": false,
                    "description": "<p>The days currently being shown.</p>\n",
                    "line": 106,
                    "rawdescription": "\nThe days currently being shown."
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Locale",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "onChangeCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 272,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 271,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selected",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>The currently selected date.</p>\n",
                    "line": 104,
                    "rawdescription": "\nThe currently selected date."
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMonth",
                    "args": [
                        {
                            "name": "change",
                            "type": " | \"1\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": " | \"1\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inThisMonth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Day",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inThisMonth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasNoFreeSlots",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initDayNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRefreshes days array to match current date.",
                    "description": "<p>Refreshes days array to match current date.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSameDate",
                    "args": [
                        {
                            "name": "a",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCheck if two dates are equal. Ignores time.",
                    "description": "<p>Check if two dates are equal. Ignores time.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allSelectable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allSelectable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDay",
                    "args": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides a datepicker component.</p>\n",
            "rawdescription": "\n\nProvides a datepicker component.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DdLocaleService } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { Locale, addDays, addMonths, eachDayOfInterval, endOfDay, endOfMonth, format, getDate, getDay, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, isToday, setDay, startOfDay, startOfMonth, subDays } from 'date-fns';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Represents a day in the datepicker.\r\n */\r\nexport interface Day {\r\n    date: Date;\r\n    day: number;\r\n    month: number;\r\n    year: number;\r\n    inThisMonth: boolean;\r\n    isToday: boolean;\r\n    isSelected: boolean;\r\n    isSelectable: boolean;\r\n    /** If the Day is found from selectableDates it will be highlighted as green. */\r\n    isHighlighted: boolean;\r\n    hasNoFreeSlots: boolean;\r\n}\r\n\r\n/**\r\n * Configuration options for the datepicker.\r\n */\r\nexport interface DatepickerOptions {\r\n    /** The earliest date that can be selected. */\r\n    minDate?: Date | null;\r\n    /** The latest date that can be selected. */\r\n    maxDate?: Date | null;\r\n    /** The day to display as the first day of the week. Sunday is 0. */\r\n    firstCalendarDay?: number;\r\n    /** Translations for the calendar legend. */\r\n    legendTranslations?: DatepickerLegendTranslations;\r\n    /** If true, all dates within the min and max dates are selectable. */\r\n    allSelectable?: boolean;\r\n}\r\n\r\n/**\r\n * Translations for the calendar legend.\r\n */\r\nexport interface DatepickerLegendTranslations {\r\n    selectedDate?: string;\r\n    freeSlots?: string;\r\n    currentDate?: string;\r\n    allReserved?: string;\r\n    noSlotsAvailable?: string;\r\n}\r\n\r\n/**\r\n * Default configuration options for the datepicker.\r\n */\r\nexport const defaultOptions: DatepickerOptions = {\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n};\r\n\r\n/**\r\n * Provides a datepicker component.\r\n */\r\n@Component({\r\n    selector: 'dd-datepicker',\r\n    templateUrl: './datepicker.component.html',\r\n    styleUrls: ['./datepicker.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }],\r\n})\r\nexport class DatepickerComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n    constructor(localeService: DdLocaleService) {\r\n        // Fetch the language locale data.\r\n        localeService\r\n            .getDateLocale$()\r\n            .pipe(takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((locale?: Locale) => {\r\n                this.locale = locale;\r\n            });\r\n\r\n        this.days = [];\r\n    }\r\n\r\n    /** Configuration for the datepicker. */\r\n    @Input() options: DatepickerOptions = { ...defaultOptions };\r\n\r\n    /** Dates that can be selected. Also affected by @see DatepickerOptions min and max. */\r\n    @Input() selectableDates: Date[] = [];\r\n\r\n    /** Dates that can be selected and have free slots. */\r\n    @Input() noFreeSlotsDates: Date[] = [];\r\n\r\n    /**\r\n     * The date (month) that the datepicker is currently showing.\r\n     * If this value is initialized, that month is shown first.\r\n     */\r\n    @Input() date: Date = new Date();\r\n\r\n    locale?: Locale;\r\n\r\n    /** The currently selected date. */\r\n    selected: Date = new Date();\r\n    /** The days currently being shown. */\r\n    days: Day[];\r\n\r\n    /** The names of the weekdays for the header row. */\r\n    dayNames?: string[];\r\n\r\n    /** The current date to display in the legend. */\r\n    currentDate?: Day;\r\n\r\n    // eslint-disable-next-line rxjs/no-exposed-subjects\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /**\r\n     * Returns the title of the datepicker, which is the formatted date.\r\n     * More info about formats: https://date-fns.org/v2.22.1/docs/format\r\n     */\r\n    get title(): string {\r\n        return format(this.date, 'LLLL yyyy', { locale: this.locale });\r\n    }\r\n\r\n    get value(): Date {\r\n        return this.selected;\r\n    }\r\n\r\n    set value(val: Date) {\r\n        this.selected = val;\r\n        this.onChangeCallback(this.selected);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initDays();\r\n        this.dayNames = this.initDayNames();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        this.initDays();\r\n    }\r\n\r\n    selectDate(day: Day): void {\r\n        this.date = day.date;\r\n        this.value = day.date;\r\n\r\n        for (const d of this.days) {\r\n            this.updateDay(d);\r\n        }\r\n    }\r\n\r\n    changeMonth(change: -1 | 1): void {\r\n        this.date = addMonths(this.date, change);\r\n        this.initDays();\r\n    }\r\n\r\n    private initDayNames(): string[] {\r\n        const dayNames: string[] = [];\r\n        const start = this.options.firstCalendarDay as number;\r\n        for (let i = start; i <= 6 + start; i++) {\r\n            const date = setDay(new Date(), i);\r\n            dayNames.push(format(date, 'EEEEEE', { locale: this.locale }));\r\n        }\r\n        return dayNames;\r\n    }\r\n\r\n    /** Refreshes days array to match current date. */\r\n    private initDays(): void {\r\n        const [start, end] = [startOfMonth(this.date), endOfMonth(this.date)];\r\n\r\n        this.days = eachDayOfInterval({ start, end }).map((d: Date) => this.generateDay(d));\r\n\r\n        // Generate days from previous month\r\n        let tmp = getDay(start) - (this.options.firstCalendarDay as number);\r\n        const prevDays = tmp < 0 ? 7 - (this.options.firstCalendarDay as number) : tmp;\r\n        for (let i = 1; i <= prevDays; i++) {\r\n            const d: Date = subDays(start, i);\r\n            this.days.unshift(this.generateDay(d, false));\r\n        }\r\n\r\n        // Generate days from next month\r\n        tmp = 7 - getDay(end);\r\n        const nextDays = tmp > 6 ? 0 : tmp;\r\n        for (let i = 1; i <= nextDays; i++) {\r\n            const d: Date = addDays(end, i);\r\n            this.days.push(this.generateDay(d, false));\r\n        }\r\n    }\r\n\r\n    private generateDay(date: Date, inThisMonth: boolean = true): Day {\r\n        // Reset time, as we dont care about that.\r\n        date.setHours(0, 0, 0, 0);\r\n\r\n        const day = {\r\n            date,\r\n            day: getDate(date),\r\n            month: getMonth(date),\r\n            year: getYear(date),\r\n            inThisMonth,\r\n            isToday: isToday(date),\r\n            isSelected: !!this.selected && this.isSameDate(date, this.selected),\r\n            isSelectable: this.isValidDate(date, this.options.allSelectable),\r\n            isHighlighted: this.isValidDate(date),\r\n            hasNoFreeSlots: this.hasNoFreeSlots(date),\r\n        };\r\n\r\n        if (day.isToday) {\r\n            this.currentDate = day;\r\n        }\r\n\r\n        return day;\r\n    }\r\n\r\n    private updateDay(day: Day): void {\r\n        day.isSelected = !!this.selected && this.isSameDate(day.date, this.selected);\r\n    }\r\n\r\n    private isValidDate(date: Date, allSelectable?: boolean): boolean {\r\n        if (this.options.minDate && isBefore(date, startOfDay(this.options.minDate))) {\r\n            return false;\r\n        }\r\n\r\n        if (this.options.maxDate && isAfter(date, endOfDay(this.options.maxDate))) {\r\n            return false;\r\n        }\r\n\r\n        // Any dates outside selected month should not be selectable.\r\n        if (!isSameMonth(date, this.date)) {\r\n            return false;\r\n        }\r\n\r\n        // only selectableDates are valid unless allSelectable option is enabled.\r\n        return !!allSelectable || this.selectableDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    /** Check if two dates are equal. Ignores time. */\r\n    private isSameDate(a: Date, b: Date): boolean {\r\n        if (!isSameDay(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameMonth(a, b)) {\r\n            return false;\r\n        }\r\n        if (!isSameYear(a, b)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private hasNoFreeSlots(date: Date): boolean {\r\n        return this.noFreeSlotsDates.some((x) => this.isSameDate(date, x));\r\n    }\r\n\r\n    writeValue(val: Date): void {\r\n        if (!val) {\r\n            return;\r\n        }\r\n        this.selected = val;\r\n        this.initDays();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    private onTouchedCallback: () => void = () => {};\r\n    private onChangeCallback: (_: any) => void = () => {};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.calendar-day {\r\n    position: relative;\r\n    &.today {\r\n        span {\r\n            text-decoration: underline solid 2px;\r\n            text-underline-offset: 3px;\r\n        }\r\n    }\r\n\r\n    &.not-this-month {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('white') !important;\r\n            color: themify.dd-color('primary-200') !important;\r\n        }\r\n    }\r\n\r\n    &.not-selectable {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('white') !important;\r\n            color: themify.dd-color('primary-400') !important;\r\n        }\r\n    }\r\n\r\n    &.selectable {\r\n        cursor: pointer;\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('primary-100') !important;\r\n            color: themify.dd-color-contrast('primary-100') !important;\r\n        }\r\n\r\n        &:hover {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('primary-200') !important;\r\n            }\r\n        }\r\n\r\n        @include hover.hover-transition();\r\n    }\r\n\r\n    &.highlighted {\r\n        cursor: pointer;\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('success') !important;\r\n            color: themify.dd-color-contrast('success') !important;\r\n        }\r\n\r\n        &:hover {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('success-darker') !important;\r\n            }\r\n        }\r\n\r\n        @include hover.hover-transition();\r\n    }\r\n\r\n    &.no-slots-highlighted {\r\n        cursor: pointer;\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('yellow') !important;\r\n            color: themify.dd-color-contrast('yellow') !important;\r\n        }\r\n\r\n        &:hover {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('yellow') !important;\r\n                filter: brightness(80%);\r\n            }\r\n        }\r\n\r\n        @include hover.hover-transition();\r\n    }\r\n\r\n    &.selected {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('accent') !important;\r\n            color: themify.dd-color-contrast('accent') !important;\r\n            font-weight: bold;\r\n        }\r\n\r\n        &:hover {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('accent-darker') !important;\r\n            }\r\n        }\r\n\r\n        // If selected then cross should have selected accent color\r\n        .cross {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color-contrast('accent');\r\n            }\r\n        }\r\n\r\n        @include hover.hover-transition();\r\n    }\r\n\r\n    &.selected-border {\r\n        border: 2px solid black;\r\n    }\r\n\r\n    // Cross is only shown if with no-slots-highlighted class so use yellow accent\r\n    .cross {\r\n        width: 100%;\r\n        height: 2px;\r\n        position: absolute;\r\n        rotate: -45deg;\r\n\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color-contrast('yellow');\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 121,
                        "rawdescription": "\n\nReturns the title of the datepicker, which is the formatted date.\nMore info about formats: https://date-fns.org/v2.22.1/docs/format\n",
                        "description": "<p>Returns the title of the datepicker, which is the formatted date.\nMore info about formats: <a href=\"https://date-fns.org/v2.22.1/docs/format\">https://date-fns.org/v2.22.1/docs/format</a></p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 129,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Date",
                        "line": 125
                    }
                }
            },
            "templateData": "<div class=\"max-w-304\" fxLayout=\"column\">\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        <dd-icon-button [icon]=\"'dd-icon-arrow-back'\" (buttonClick)=\"changeMonth(-1)\"></dd-icon-button>\r\n        <div fxLayoutAlign=\"center center\">\r\n            <span class=\"subtitle-1 bold all-caps\">\r\n                {{title}}\r\n            </span>\r\n        </div>\r\n        <dd-icon-button [icon]=\"'dd-icon-arrow'\" (buttonClick)=\"changeMonth(1)\"></dd-icon-button>\r\n    </div>\r\n    <div class=\"mt-spacer-mini w-100-p overflow-x-auto\">\r\n\r\n        <div class=\"w-304 m-spacer-none\" fxLayout=\"wrap\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"4px\">\r\n            <ng-container *ngFor=\"let weekDay of dayNames\">\r\n                <div class=\"w-40 h-40\">\r\n                    <div class=\"w-40 text-body-1 all-caps dd-primary-400-fg\" fxLayoutAlign=\"center center\">\r\n                        <span>\r\n                            {{weekDay}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let day of days; let i = index;\">\r\n                <div class=\"w-40 h-40\">\r\n                    <div class=\"calendar-day h-40 w-40 dd-primary-100 border-radius-100-p\" fxLayoutAlign=\"center center\" [ngClass]=\"{\r\n                            'border-radius-6': day.isSelected || (day.isHighlighted && day.hasNoFreeSlots),\r\n                            'selected selected-border': day.isSelected,\r\n                            'not-this-month': !day.inThisMonth,\r\n                            'not-selectable': !day.isSelectable && day.inThisMonth,\r\n                            'today': day.isToday,\r\n                            'selectable': day.isSelectable,\r\n                            'highlighted': day.isHighlighted && !day.hasNoFreeSlots,\r\n                            'no-slots-highlighted': (day.isHighlighted && day.hasNoFreeSlots) || (day.isSelected && day.hasNoFreeSlots)}\"\r\n                         (click)=\"day.isSelectable && selectDate(day)\">\r\n                        <span>\r\n                            {{day.day}}\r\n                        </span>\r\n                        <ng-container *ngIf=\"(day.isHighlighted && day.hasNoFreeSlots) || (day.isSelected && day.hasNoFreeSlots)\">\r\n                            <div class=\"cross\"></div>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"options?.legendTranslations\">\r\n        <div class=\"mt-spacer-basic\" fxLayout=\"column\">\r\n            <ng-container *ngIf=\"options.legendTranslations?.selectedDate\">\r\n                <div class=\"mb-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"calendar-day h-20 w-20 border-radius-6 dd-accent-bg selected-border\">\r\n                    </div>\r\n                    <div class=\"ml-spacer-xmini dd-primary-300-fg\">\r\n                        {{options.legendTranslations?.selectedDate}}\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"options.legendTranslations?.freeSlots\">\r\n                <div class=\"mb-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"calendar-day h-20 w-20 border-radius-100 dd-success-bg\">\r\n                    </div>\r\n                    <div class=\"ml-spacer-xmini dd-primary-300-fg\">\r\n                        {{options.legendTranslations?.freeSlots}}\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(noFreeSlotsDates.length !== selectableDates.length) && options.legendTranslations?.allReserved\">\r\n                <div class=\"mb-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"calendar-day h-20 w-20 border-radius-6 dd-yellow\" fxLayoutAlign=\"center center\">\r\n                        <div class=\"cross\"></div>\r\n                    </div>\r\n                    <div class=\"ml-spacer-xmini dd-primary-300-fg\">\r\n                        {{options.legendTranslations?.allReserved}}\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"options.legendTranslations?.noSlotsAvailable\">\r\n                <div class=\"mb-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"calendar-day h-20 w-20 border-radius-100 dd-primary-100\">\r\n                    </div>\r\n                    <div class=\"ml-spacer-xmini dd-primary-300-fg\">\r\n                        {{options.legendTranslations?.noSlotsAvailable}}\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"options.legendTranslations?.currentDate\">\r\n                <div class=\"mb-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"calendar-day strong today h-20 w-20 border-radius-6 dd-white-bg\">\r\n                        <span>{{ currentDate?.day }}</span>\r\n                    </div>\r\n                    <div class=\"ml-spacer-xmini dd-primary-300-fg\">\r\n                        {{options.legendTranslations?.currentDate}}\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n</div>\r\n"
        },
        {
            "name": "DialogBodyComponent",
            "id": "component-DialogBodyComponent-ceb8a70567b726804f81c94c375421ea40a97a1e8fa2a0a29b1eb138f476d18d9ca3cbddbb36d9a53da4a192a4b7ace73816148d2c7c11d423feb6655d83e62b",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-body/dialog-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-body",
            "styleUrls": [
                "./dialog-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-body.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the body.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the body.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 15,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { DialogOverlaySize } from '../../models/overlay';\r\n\r\n@Component({\r\n    selector: 'dd-dialog-body',\r\n    templateUrl: './dialog-body.component.html',\r\n    styleUrls: ['./dialog-body.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DialogBodyComponent {\r\n    /**\r\n     * Determines the type of padding added to the body.\r\n     * Default is 'dialog-wide'.\r\n     */\r\n    @Input() variant: DialogOverlaySize = 'dialog-wide';\r\n\r\n    /**\r\n     * ngClass selector for the body.\r\n     */\r\n    get bodyPaddingClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'pr-spacer-basic pl-spacer-basic pt-spacer-mini': this.variant === 'dialog-wide' || this.variant === 'dialog-mega', //\r\n            'pr-spacer-mini pl-spacer-mini pt-spacer-solo': this.variant === 'dialog-narrow',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    flex: 1 1 100%;\r\n    box-sizing: border-box;\r\n    max-width: 100%;\r\n    overflow: auto;\r\n\r\n    .dd-dialog-body {\r\n        overflow: auto;\r\n    }\r\n}\r\n",
                    "styleUrl": "./dialog-body.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "bodyPaddingClasses": {
                    "name": "bodyPaddingClasses",
                    "getSignature": {
                        "name": "bodyPaddingClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nngClass selector for the body.\n",
                        "description": "<p>ngClass selector for the body.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"dd-dialog-body w-100-p\" [ngClass]=\"bodyPaddingClasses\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "DialogFooterComponent",
            "id": "component-DialogFooterComponent-2648c89bd4f4410c6870e7a53a73ce7eb079cd6dcc2fada6a813c8ebc6aa28ce1fea520ddcf80773e74a722e9b91a350d780a0d10c78479072499b154a78947f",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-footer/dialog-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-footer",
            "styleUrls": [
                "./dialog-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the footer.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the footer.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 15,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { DialogOverlaySize } from './../../models/overlay';\r\n\r\n@Component({\r\n    selector: 'dd-dialog-footer',\r\n    templateUrl: './dialog-footer.component.html',\r\n    styleUrls: ['./dialog-footer.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DialogFooterComponent {\r\n    /**\r\n     * Determines the type of padding added to the footer.\r\n     * Default is 'dialog-wide'.\r\n     */\r\n    @Input() variant: DialogOverlaySize = 'dialog-wide';\r\n\r\n    /**\r\n     * ngClass selector for the body.\r\n     */\r\n    get footerPaddingClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'pr-spacer-basic pl-spacer-basic pb-spacer-basic': this.variant === 'dialog-wide' || this.variant === 'dialog-mega', //\r\n            'pr-spacer-mini pl-spacer-mini pb-spacer-mini': this.variant === 'dialog-narrow',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog-footer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "footerPaddingClasses": {
                    "name": "footerPaddingClasses",
                    "getSignature": {
                        "name": "footerPaddingClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nngClass selector for the body.\n",
                        "description": "<p>ngClass selector for the body.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"dd-dialog-footer\" [ngClass]=\"footerPaddingClasses\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "DialogHeaderComponent",
            "id": "component-DialogHeaderComponent-fc49ca5495511266c638216260694f9e47c442ca40cd9e7283d30b6badd4b4f7990cf5f910ef475a2f5d428abb577852d23eed787d405d56c607a01ae668fbfd",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-header/dialog-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-header",
            "styleUrls": [
                "./dialog-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeText",
                    "defaultValue": "'Close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasCloseButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHide close button from dialog by setting this false",
                    "description": "<p>Hide close button from dialog by setting this false</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerBackgroundColor",
                    "defaultValue": "'accent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"white\" | \"accent\"",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds title to the header.",
                    "description": "<p>Adds title to the header.</p>\n",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the header.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the header.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 19,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { DialogOverlaySize } from './../../models/overlay';\r\n\r\n@Component({\r\n    selector: 'dd-dialog-header',\r\n    templateUrl: './dialog-header.component.html',\r\n    styleUrls: ['./dialog-header.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DialogHeaderComponent {\r\n    /** Adds title to the header. */\r\n    @Input() heading?: string;\r\n    @Input() closeText?: string = 'Close';\r\n\r\n    /**\r\n     * Determines the type of padding added to the header.\r\n     * Default is 'dialog-wide'.\r\n     */\r\n    @Input() variant: DialogOverlaySize = 'dialog-wide';\r\n\r\n    @Input() headerBackgroundColor: 'white' | 'accent' = 'accent';\r\n\r\n    /** Hide close button from dialog by setting this false */\r\n    @Input() hasCloseButton: boolean = true;\r\n\r\n    @Output() closeOverlay: EventEmitter<void> = new EventEmitter();\r\n\r\n    get headerClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'pr-spacer-basic pl-spacer-basic': this.variant === 'dialog-wide' || this.variant === 'dialog-mega', //\r\n            'pr-spacer-mini pl-spacer-mini': this.variant === 'dialog-narrow',\r\n            'dd-white': this.headerBackgroundColor === 'white',\r\n            'dd-accent': this.headerBackgroundColor === 'accent',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog-header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "headerClasses": {
                    "name": "headerClasses",
                    "getSignature": {
                        "name": "headerClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 28
                    }
                }
            },
            "templateData": "<div class=\"dd-dialog-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div class=\"w-100-p py-spacer-mini\" [ngClass]=\"headerClasses\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        <div *ngIf=\"heading\" fxLayoutAlign=\"start start\">\r\n            <span [ngClass]=\"{'h5 all-caps': variant === 'dialog-wide' || 'dialog-mega', 'h6': variant === 'dialog-narrow'}\">{{heading}}</span>\r\n        </div>\r\n        <div class=\"cursor-pointer pl-spacer-solo\" fxLayoutAlign=\"start center\" (click)=\"closeOverlay.emit()\">\r\n            <span *ngIf=\"variant !== 'dialog-narrow'\" class=\"mr-spacer-solo h6\">{{closeText}}</span>\r\n            <dd-icon *ngIf=\"hasCloseButton\" [ngClass]=\"{'mini': variant === 'dialog-narrow'}\" [iconAriaLabel]=\"'Close'\" [icon]=\"'dd-icon-close'\"\r\n                     (click)=\"closeOverlay.emit()\"></dd-icon>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DialogWrapperComponent",
            "id": "component-DialogWrapperComponent-d80bf5cfb13b4f7eca1aea5525dd5343392ab523e1983cce33589c080ca8db431ada0d99c40202c8975308801fbac51ae7faf3759da4f0e92351964a2d7d0fac",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-wrapper/dialog-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "OverlayAnimationState",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "klass",
                    "defaultValue": "'dd-white-bg elevation-black h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "style_display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "@slideFromRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "OverlayAnimationState | undefined",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "'dd-white-bg elevation-black h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.flexDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Wrapper component for dialog. This component provides the overlay with a slideFromRight\nanimation and the classes used for the dialog panel. For an overlay wrapper\nwith a in-top animation, use OverlayWrapperComponent.</p>\n",
            "rawdescription": "\n\nWrapper component for dialog. This component provides the overlay with a slideFromRight\nanimation and the classes used for the dialog panel. For an overlay wrapper\nwith a in-top animation, use OverlayWrapperComponent.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\nimport { OverlayAnimationState, overlayAnimations } from '../../models/animations';\r\n\r\n/**\r\n * Wrapper component for dialog. This component provides the overlay with a slideFromRight\r\n * animation and the classes used for the dialog panel. For an overlay wrapper\r\n * with a in-top animation, use OverlayWrapperComponent.\r\n */\r\n@Component({\r\n    selector: 'dd-dialog-wrapper',\r\n    template: '<ng-content></ng-content>',\r\n    animations: [overlayAnimations.slideFromRight],\r\n})\r\nexport class DialogWrapperComponent {\r\n    @Input() viewState?: OverlayAnimationState;\r\n\r\n    @HostBinding('class') klass = 'dd-white-bg elevation-black h-100-p';\r\n\r\n    // Keeping correct layout for the overlay.\r\n    @HostBinding('style.display') style_display = 'flex';\r\n    @HostBinding('style.flexDirection') get style_flexDirection() {\r\n        return 'column';\r\n    }\r\n\r\n    // If no viewstate is provided, give a default state to keep position.\r\n    @HostBinding('@slideFromRight') get slideFromRightState(): OverlayAnimationState | undefined {\r\n        if (this.viewState) {\r\n            return this.viewState;\r\n        } else {\r\n            return 'default';\r\n        }\r\n    }\r\n\r\n    // When no animation is used, disable trigger.\r\n    @HostBinding('@.disabled') get hasAnimation(): boolean {\r\n        if (!this.viewState) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "style_flexDirection": {
                    "name": "style_flexDirection",
                    "getSignature": {
                        "name": "style_flexDirection",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "slideFromRightState": {
                    "name": "slideFromRightState",
                    "getSignature": {
                        "name": "slideFromRightState",
                        "type": "",
                        "returnType": "OverlayAnimationState | undefined",
                        "line": 26
                    }
                },
                "hasAnimation": {
                    "name": "hasAnimation",
                    "getSignature": {
                        "name": "hasAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "DividerComponent",
            "id": "component-DividerComponent-c1c1c56b2893c66ce5725c50affc8a2e7320637504ddb7bba192f976bf3688fd67d590a2c2c87c78e382374be7ddd945feb1ae36757f288d1c642347a750842f",
            "file": "projects/digital-delights-library/src/shared/components/divider/divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-200'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant to use for the divider.\nThis component supports all color variants.\n",
                    "description": "<p>The color variant to use for the divider.\nThis component supports all color variants.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "spacerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the spacer to use for adding a negative margin to the divider.\nThe parent component should have added a spacer with this name.\n",
                    "description": "<p>The name of the spacer to use for adding a negative margin to the divider.\nThe parent component should have added a spacer with this name.</p>\n",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.\n",
                    "description": "<p>Dynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides a divider component that can be customized with different colors and margins.</p>\n",
            "rawdescription": "\n\nProvides a divider component that can be customized with different colors and margins.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\r\n\r\n/**\r\n * Provides a divider component that can be customized with different colors and margins.\r\n */\r\n@Component({\r\n    selector: 'dd-divider',\r\n    template: '',\r\n    styleUrls: ['./divider.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DividerComponent {\r\n    /**\r\n     * The name of the spacer to use for adding a negative margin to the divider.\r\n     * The parent component should have added a spacer with this name.\r\n     */\r\n    @Input() spacerName?: string;\r\n\r\n    /**\r\n     * The color variant to use for the divider.\r\n     * This component supports all color variants.\r\n     */\r\n    @Input() colorVariant: string = 'dd-primary-200';\r\n\r\n    /**\r\n     * Dynamically generates the class attribute for the host element.\r\n     * This ensures the divider is displayed correctly based on the provided spacer and color variant.\r\n     */\r\n    @HostBinding('class') get class(): string {\r\n        let defaultClasses: string = 'mt-spacer-mini pb-spacer-mini border-top';\r\n        if (this.spacerName) {\r\n            defaultClasses += ` minus-mx-${this.spacerName}`;\r\n        }\r\n        defaultClasses += ` ${this.colorVariant}-border`;\r\n\r\n        return defaultClasses;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n}\r\n",
                    "styleUrl": "./divider.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "string",
                        "returnType": "string",
                        "line": 29,
                        "rawdescription": "\n\nDynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.\n",
                        "description": "<p>Dynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.</p>\n"
                    }
                }
            }
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-be84948dac4a45097aaa359c173cf5e515741bea18608efb2e6de3364254a414ef7cd47374bcbd522a79925ede296ae256bb95cebbc068c8ce47c982bdc0a766",
            "file": "projects/digital-delights-library/src/file-upload/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FileUploadComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FileUploadComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows changing the background color of the input if the element is used on a different background color than white.\nUse color classes that define both background and font color from the library.\n",
                    "description": "<p>Allows changing the background color of the input if the element is used on a different background color than white.\nUse color classes that define both background and font color from the library.</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disclaimerText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional disclaimer text to display below the file upload area.",
                    "description": "<p>Optional disclaimer text to display below the file upload area.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for file validation.",
                    "description": "<p>Custom error messages for file validation.</p>\n",
                    "line": 41,
                    "type": "FileErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 44,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional label to display above the file upload area.",
                    "description": "<p>Optional label to display above the file upload area.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the component should accept multiple file inputs.",
                    "description": "<p>Determines whether the component should accept multiple file inputs.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether the form has been submitted.",
                    "description": "<p>Indicates whether the form has been submitted.</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "'Drop file or click to select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to display in the file upload area.",
                    "description": "<p>Text to display in the file upload area.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the default size of the file upload.\n'small' is the same size as form input and 'medium' has a minimum height of 200px.\n",
                    "description": "<p>Defines the default size of the file upload.\n&#39;small&#39; is the same size as form input and &#39;medium&#39; has a minimum height of 200px.</p>\n",
                    "line": 53,
                    "type": "\"small\" | \"medium\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits an event when the file input value changes.",
                    "description": "<p>Emits an event when the file input value changes.</p>\n",
                    "line": 62,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 220,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 221,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "<p>Array of files selected for upload.</p>\n",
                    "line": 65,
                    "rawdescription": "\nArray of files selected for upload."
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid file'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Default error message for invalid files.</p>\n",
                    "line": 74,
                    "rawdescription": "\nDefault error message for invalid files.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Utility function to get keys from an object.</p>\n",
                    "line": 78,
                    "rawdescription": "\nUtility function to get keys from an object."
                },
                {
                    "name": "showErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines whether errors should be displayed.</p>\n",
                    "line": 71,
                    "rawdescription": "\nDetermines whether errors should be displayed."
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<[] | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the file input.</p>\n",
                    "line": 68,
                    "rawdescription": "\nForm control for the file input."
                }
            ],
            "methodsClass": [
                {
                    "name": "checkForMultiple",
                    "args": [
                        {
                            "name": "fileArray",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileArray",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToArray",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList | File[] | File | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File[]",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList | File[] | File | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChanges",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileDropped",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the file select event.\nConverts the FileList to an array, checks for multiple files if necessary, and clears the input value.\n",
                    "description": "<p>Handles the file select event.\nConverts the FileList to an array, checks for multiple files if necessary, and clears the input value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a file upload functionality with validation and error handling.\nIt supports multiple file inputs and allows customization of the upload text, disclaimer text, and label.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a file upload functionality with validation and error handling.\nIt supports multiple file inputs and allows customization of the upload text, disclaimer text, and label.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { FileErrorMessages } from './../../file-validator';\r\n\r\n/**\r\n * This component provides a file upload functionality with validation and error handling.\r\n * It supports multiple file inputs and allows customization of the upload text, disclaimer text, and label.\r\n * It also provides a variant for different sizes and a customizable background color.\r\n */\r\n@Component({\r\n    selector: 'dd-file-upload',\r\n    templateUrl: './file-upload.component.html',\r\n    styleUrls: ['./file-upload.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FileUploadComponent),\r\n            multi: true,\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => FileUploadComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FileUploadComponent implements ControlValueAccessor, OnChanges {\r\n    /** Text to display in the file upload area. */\r\n    @Input() text: string = 'Drop file or click to select';\r\n\r\n    /** Optional disclaimer text to display below the file upload area. */\r\n    @Input() disclaimerText?: string;\r\n\r\n    /** Optional label to display above the file upload area. */\r\n    @Input() label?: string = '';\r\n\r\n    /** Determines whether the component should accept multiple file inputs. */\r\n    @Input() multiple: boolean = true;\r\n\r\n    /** Custom error messages for file validation. */\r\n    @Input() errorMessages?: FileErrorMessages;\r\n\r\n    /** Validation errors from the form control. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Indicates whether the form has been submitted. */\r\n    @Input() submitted?: boolean;\r\n\r\n    /**\r\n     * Defines the default size of the file upload.\r\n     * 'small' is the same size as form input and 'medium' has a minimum height of 200px.\r\n     */\r\n    @Input() variant: `small` | 'medium' = 'small';\r\n\r\n    /**\r\n     * Allows changing the background color of the input if the element is used on a different background color than white.\r\n     * Use color classes that define both background and font color from the library.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    /** Emits an event when the file input value changes. */\r\n    @Output() private valueChanged = new EventEmitter<File[]>();\r\n\r\n    /** Array of files selected for upload. */\r\n    files: File[] = [];\r\n\r\n    /** Form control for the file input. */\r\n    value: FormControl<File[] | null | undefined> = new FormControl();\r\n\r\n    /** Determines whether errors should be displayed. */\r\n    showErrors: boolean = false;\r\n\r\n    /** Default error message for invalid files. */\r\n    private readonly genericError: string = 'Invalid file';\r\n\r\n    /** Utility function to get keys from an object. */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ObjectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Returns the appropriate error message for the current validation errors.\r\n     * If a custom error message is provided for the current error, it will be used.\r\n     * Otherwise, a generic error message will be returned.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.value.errors) {\r\n            const keys: string[] = this.ObjectKeys(this.value.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof FileErrorMessages | undefined = this.ObjectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** Returns the appropriate classes for the file upload container based on the variant. */\r\n    get containerClass(): { [klass: string]: boolean } {\r\n        return {\r\n            ['default-size']: this.variant === 'small',\r\n            ['min-h-200']: this.variant === 'medium',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles the file select event.\r\n     * Converts the FileList to an array, checks for multiple files if necessary, and clears the input value.\r\n     */\r\n    onSelectFiles(event: Event): void {\r\n        const fileArray = this.convertToArray((event.target as HTMLInputElement).files);\r\n        this.checkForMultiple(fileArray);\r\n        /**\r\n         * Clear input for file select to work the same way as file drop,\r\n         * and allow multiple files with the same name. Validator will inform about this\r\n         * if it is not allowed.\r\n         */\r\n        (event.target as HTMLInputElement).value = '';\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.errors) {\r\n            setTimeout(() => {\r\n                this.value.setErrors(changes.errors.currentValue);\r\n            });\r\n        }\r\n\r\n        if (this.submitted) {\r\n            this.showErrors = true;\r\n        }\r\n    }\r\n\r\n    onFileDropped(files: File[]) {\r\n        const fileArray = this.convertToArray(files);\r\n        this.checkForMultiple(fileArray);\r\n    }\r\n\r\n    writeValue(files: File[]): void {\r\n        const fileArray = this.convertToArray(files);\r\n        if (fileArray.length < 2 || this.multiple) {\r\n            this.files = fileArray;\r\n            this.value.setValue(files);\r\n            this.emitChanges(this.files);\r\n        } else {\r\n            throw Error('Multiple files not allowed');\r\n        }\r\n    }\r\n\r\n    private checkForMultiple(fileArray: File[]): void {\r\n        if (this.multiple) {\r\n            const merged = this.files.concat(fileArray);\r\n            this.writeValue(merged);\r\n        } else {\r\n            this.writeValue(fileArray);\r\n        }\r\n    }\r\n\r\n    private convertToArray(files: FileList | File[] | File | null | undefined): File[] {\r\n        if (files) {\r\n            if (files instanceof File) {\r\n                return [files];\r\n            } else if (Array.isArray(files)) {\r\n                return files;\r\n            } else {\r\n                return Array.prototype.slice.call(files);\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    removeFile(file: File) {\r\n        const fileIndex = this.files.indexOf(file);\r\n\r\n        if (fileIndex >= 0) {\r\n            const currentFiles = this.files.slice();\r\n            currentFiles.splice(fileIndex, 1);\r\n            this.writeValue(currentFiles);\r\n        }\r\n    }\r\n\r\n    private emitChanges(files: File[]) {\r\n        this.valueChanged.emit(files);\r\n        this._onChange(files);\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n\r\n    private _onChange = (val: File[]) => {};\r\n    private _onTouched: () => void = () => {};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.file-input {\r\n    display: none;\r\n}\r\n\r\n.chips-container {\r\n    align-content: start;\r\n}\r\n\r\n.file-upload {\r\n    border: 2px dashed;\r\n    position: relative;\r\n\r\n    position: relative;\r\n\r\n    margin-bottom: 16px;\r\n\r\n    &.default-size {\r\n        @include themify.dd-themify() {\r\n            min-height: themify.dd-configuration('inputs', default-size) !important;\r\n        }\r\n    }\r\n\r\n    label {\r\n        position: absolute;\r\n        left: 9px;\r\n        z-index: 2;\r\n        font-size: 12px;\r\n        line-height: 11px;\r\n        background-color: inherit;\r\n        padding: 0 4px;\r\n        // Make the label only the half of the actual height\r\n        // Align content so text is rendered from the bottom\r\n        // Move 1 px up to go over the border.\r\n        height: 6px;\r\n        top: -2px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n    }\r\n\r\n    .empty-attachments-icon {\r\n        position: absolute;\r\n        right: 4px;\r\n        top: 4px;\r\n    }\r\n}\r\n\r\n.error-text {\r\n    margin-top: -16px;\r\n}\r\n.fileover {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 85,
                        "rawdescription": "\n\nReturns the appropriate error message for the current validation errors.\nIf a custom error message is provided for the current error, it will be used.\nOtherwise, a generic error message will be returned.\n",
                        "description": "<p>Returns the appropriate error message for the current validation errors.\nIf a custom error message is provided for the current error, it will be used.\nOtherwise, a generic error message will be returned.</p>\n"
                    }
                },
                "containerClass": {
                    "name": "containerClass",
                    "getSignature": {
                        "name": "containerClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 105,
                        "rawdescription": "\nReturns the appropriate classes for the file upload container based on the variant.",
                        "description": "<p>Returns the appropriate classes for the file upload container based on the variant.</p>\n"
                    }
                }
            },
            "templateData": "<div fxLayout=\"column\">\r\n\r\n    <div class=\"file-upload border-radius-8 p-spacer-xmini dd-primary-200-border text-center cursor-pointer w-100-p h-100-p\" [ddFileDragDrop]\r\n         [ngClass]=\"containerClass\" (click)=\"fileUpload.click()\" (fileDropped)=\"onFileDropped($event)\">\r\n        <label class=\"{{backgroundColor}}\" [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" *ngIf=\"label\"><span>{{ label }}</span></label>\r\n\r\n        <ng-container *ngIf=\"files.length < 1; else filesTemplate\">\r\n            <span class=\"{{backgroundColor}} text-body-2\" [ngClass]=\"{'dd-primary-300-fg': backgroundColor === 'dd-white'}\">\r\n                {{ text }}\r\n            </span>\r\n            <dd-icon class=\"empty-attachments-icon\" [icon]=\"'dd-icon-attachment'\"></dd-icon>\r\n        </ng-container>\r\n        <ng-template #filesTemplate>\r\n            <div class=\"w-100-p h-100-p g-spacer-xmini chips-container\" fxLayout=\"wrap\" fxLayoutAlign=\"start start\">\r\n                <ng-container *ngFor=\"let file of files\">\r\n                    <dd-chip class=\"file-chip\" [chipText]=\"file.name\" [icon]=\"'dd-icon-close'\" [iconColor]=\"'dd-danger-fg'\" [stopPropagation]=\"true\"\r\n                             (chipClick)=\"removeFile(file)\">\r\n                    </dd-chip>\r\n                </ng-container>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n    <div *ngIf=\"value?.errors && errorMessage && showErrors\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'file-upload-error'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n    <div class=\"my-spacer-solo\" *ngIf=\"disclaimerText\">{{disclaimerText}}</div>\r\n    <input [type]=\"'file'\" class=\"file-input\" [multiple]=\"multiple\" (change)=\"onSelectFiles($event)\" #fileUpload>\r\n</div>\r\n"
        },
        {
            "name": "FormCheckboxComponent",
            "id": "component-FormCheckboxComponent-5512ed983600b4130961504b2e61de0a2e922a52662529ca932bbd7e93693a715d4c23dce72e1f581259fc7edd9a336ebba442d8a34b3532a5fcb6e9fcd02edb",
            "file": "projects/digital-delights-library/src/form-field/components/form-checkbox/form-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormCheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-checkbox",
            "styleUrls": [
                "./form-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkboxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the checkbox is disabled.",
                    "description": "<p>Determines whether the checkbox is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for checkbox validation.",
                    "description": "<p>Custom error messages for checkbox validation.</p>\n",
                    "line": 38,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 41,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the checkbox should be validated on initialization.",
                    "description": "<p>Determines whether the checkbox should be validated on initialization.</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the checkbox.",
                    "description": "<p>Label for the checkbox.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the checkbox should be validated when the form is submitted.\nIf not provided, the component will mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines whether the checkbox should be validated when the form is submitted.\nIf not provided, the component will mark itself as touched whenever the value is changed.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Stores the submitted value for the checkbox.</p>\n",
                    "line": 56,
                    "rawdescription": "\nStores the submitted value for the checkbox.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines whether the checkbox is checked.</p>\n",
                    "line": 50,
                    "rawdescription": "\nDetermines whether the checkbox is checked."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Subject to emit when the component is destroyed.</p>\n",
                    "line": 59,
                    "rawdescription": "\nSubject to emit when the component is destroyed.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Checkbox required'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Default error message for invalid checkbox.</p>\n",
                    "line": 53,
                    "rawdescription": "\nDefault error message for invalid checkbox.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Utility function to get keys from an object.\n<a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 66,
                    "rawdescription": "\n\nUtility function to get keys from an object.\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 192
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean | undefined | null>",
                    "optional": false,
                    "description": "<p>Form control for the checkbox input.</p>\n",
                    "line": 47,
                    "rawdescription": "\nForm control for the checkbox input."
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the change event for the checkbox.\nToggles the checked state and propagates the change.\n",
                    "description": "<p>Handles the change event for the checkbox.\nToggles the checked state and propagates the change.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRuns one change detection and marks the form field as touched.\nThis allows the error to be shown if the form field is initialized with an invalid value.\n",
                    "description": "<p>Runs one change detection and marks the form field as touched.\nThis allows the error to be shown if the form field is initialized with an invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a checkbox input field with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a checkbox input field with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { ValidationErrorMessages } from '../../form-field-models';\r\n\r\n/**\r\n * This component provides a checkbox input field with validation and error handling.\r\n * It supports form submission and initialization validation.\r\n */\r\n@Component({\r\n    selector: 'dd-form-checkbox',\r\n    templateUrl: './form-checkbox.component.html',\r\n    styleUrls: ['./form-checkbox.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormCheckboxComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormCheckboxComponent implements ControlValueAccessor, OnChanges, OnDestroy, AfterViewInit {\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    /** Label for the checkbox. */\r\n    @Input() label?: string;\r\n\r\n    /**\r\n     * Determines whether the checkbox should be validated when the form is submitted.\r\n     * If not provided, the component will mark itself as touched whenever the value is changed.\r\n     */\r\n    @Input() submitted?: boolean;\r\n\r\n    /** Determines whether the checkbox is disabled. */\r\n    @Input() checkboxDisabled: boolean = false;\r\n\r\n    /** Custom error messages for checkbox validation. */\r\n    @Input() errorMessages?: ValidationErrorMessages;\r\n\r\n    /** Validation errors from the form control. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Determines whether the checkbox should be validated on initialization. */\r\n    @Input() initValidation: boolean = true;\r\n\r\n    /** Form control for the checkbox input. */\r\n    value: FormControl<boolean | undefined | null> = new FormControl();\r\n\r\n    /** Determines whether the checkbox is checked. */\r\n    checked: boolean = false;\r\n\r\n    /** Default error message for invalid checkbox. */\r\n    private readonly genericError: string = 'Checkbox required';\r\n\r\n    /** Stores the submitted value for the checkbox. */\r\n    private _submitted: boolean = false;\r\n\r\n    /** Subject to emit when the component is destroyed. */\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Utility function to get keys from an object.\r\n     * https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ObjectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Finds the error message from the input.\r\n     *\r\n     * @returns The error message if found, otherwise the generic error message.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.value.errors) {\r\n            const keys: string[] = this.ObjectKeys(this.value.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof ValidationErrorMessages | undefined = this.ObjectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles the change event for the checkbox.\r\n     * Toggles the checked state and propagates the change.\r\n     */\r\n    handleChangeEvent(): void {\r\n        this.checked = !this.checked;\r\n        this.propagateChange(this.checked);\r\n    }\r\n\r\n    /**\r\n     * Runs one change detection and marks the form field as touched.\r\n     * This allows the error to be shown if the form field is initialized with an invalid value.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        // If there are errors then trigger new change detection cycle which marks the field as touched.\r\n        if (this.errors && this.initValidation && this.value?.value) {\r\n            setTimeout(() => {\r\n                this.markAsTouched();\r\n                this.value.updateValueAndValidity();\r\n                this.cdr.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // If the form is invalid then set the error message as custom error.\r\n        // Timeout required to show errors at init https://github.com/angular/angular/issues/19170#issuecomment-341555371\r\n        if (changes.errors) {\r\n            setTimeout(() => {\r\n                this.value.setErrors(changes.errors.currentValue);\r\n            });\r\n        }\r\n\r\n        if (this.submitted !== undefined) {\r\n            // Check if we should trigger detection cycle for the checkbox.\r\n            if (this.submitted && !this._submitted) {\r\n                this._submitted = this.submitted;\r\n                this.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    /**\r\n     * Write value from form model into the view.\r\n     */\r\n    writeValue(value: boolean): void {\r\n        if (value !== undefined) {\r\n            this.checked = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: (_: any) => {}): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    setDisabledState(disabled: boolean) {\r\n        this.checkboxDisabled = disabled;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouched();\r\n        this.value.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n\r\n    _onChange: () => void = () => {};\r\n\r\n    onTouched: () => void = () => {};\r\n\r\n    propagateChange = (_: any) => {};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./form-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 73,
                        "rawdescription": "\n\nFinds the error message from the input.\n\n",
                        "description": "<p>Finds the error message from the input.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2744,
                                "end": 2824,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 349,
                                "tagName": {
                                    "pos": 2745,
                                    "end": 2752,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>The error message if found, otherwise the generic error message.</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div>\r\n    <dd-input [inputLabel]=\"label\" [type]=\"'checkbox'\" [checked]=\"checked\" [disabled]=\"checkboxDisabled\" (inputClick)=\"handleChangeEvent()\">\r\n    </dd-input>\r\n    <div *ngIf=\"value?.errors && errorMessage\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'form-field-error-{{label}}'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FormDatepickerFieldComponent",
            "id": "component-FormDatepickerFieldComponent-fc2ac949c109c610d0461784514b47824d450260573f3a9f26e3514cd3509cd8a6dbe8494d09126944c4ac854ce1dacfbff794d4900a791b579e4129669536f9",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-datepicker-field/form-datepicker-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormDatepickerFieldComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormDatepickerFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-datepicker-field",
            "styleUrls": [
                "./form-datepicker-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-datepicker-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on a different background color than white,\nyou can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on a different background color than white,\nyou can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for datepicker field.",
                    "description": "<p>Label for datepicker field.</p>\n",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for datepicker validation.",
                    "description": "<p>Custom error messages for datepicker validation.</p>\n",
                    "line": 83,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 80,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "interval",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInterval for the timepicker.",
                    "description": "<p>Interval for the timepicker.</p>\n",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum hour selectable.",
                    "description": "<p>Maximum hour selectable.</p>\n",
                    "line": 65,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMinimum hour selectable.",
                    "description": "<p>Minimum hour selectable.</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{\r\n        ...defaultOptions,\r\n        allSelectable: true,\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the datepicker.\nBy default, all dates are selectable.\n",
                    "description": "<p>Configuration for the datepicker.\nBy default, all dates are selectable.</p>\n",
                    "line": 74,
                    "type": "DatepickerOptions",
                    "decorators": []
                },
                {
                    "name": "selectDateText",
                    "defaultValue": "'Select Date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to be shown when there is no selected item.",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCurrently selected date.",
                    "description": "<p>Currently selected date.</p>\n",
                    "line": 59,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "showTimePicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the timepicker should also be shown.\nIf not shown, datepicker will fill the whole row.\n",
                    "description": "<p>Determines whether the timepicker should also be shown.\nIf not shown, datepicker will fill the whole row.</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the datepicker should be validated when the form is submitted.",
                    "description": "<p>Determines whether the datepicker should be validated when the form is submitted.</p>\n",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for time select field.",
                    "description": "<p>Label for time select field.</p>\n",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOutput event that is emitted when an item is clicked in datepicker.",
                    "description": "<p>Output event that is emitted when an item is clicked in datepicker.</p>\n",
                    "line": 100,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 310
                },
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 122,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Locale",
                    "optional": true,
                    "description": "<p>Locale data for the datepicker.</p>\n",
                    "line": 106,
                    "rawdescription": "\nLocale data for the datepicker."
                },
                {
                    "name": "objectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 132,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 311
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<FormFieldDatepickerComponent>",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "selectableTimes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<>[]",
                    "optional": false,
                    "description": "<p>List of selectable times.</p>\n",
                    "line": 115,
                    "rawdescription": "\nList of selectable times."
                },
                {
                    "name": "selectedTimeString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>String representation of the selected time.</p>\n",
                    "line": 109,
                    "rawdescription": "\nString representation of the selected time."
                },
                {
                    "name": "selectedTimeValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "<p>Selected time value.</p>\n",
                    "line": 112,
                    "rawdescription": "\nSelected time value."
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<Date | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the datepicker input.</p>\n",
                    "line": 103,
                    "rawdescription": "\nForm control for the datepicker input."
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItemClick",
                    "args": [
                        {
                            "name": "time",
                            "type": "SelectItem<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "SelectItem<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDateValue",
                    "args": [
                        {
                            "name": "time",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a datepicker field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a datepicker field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { DatepickerOptions, defaultOptions } from '@digitaldelightsoy/design-library/src/datepicker';\r\nimport { ValidationErrorMessages } from '@digitaldelightsoy/design-library/src/form-field';\r\nimport { OverlayOpenModel, OverlayService } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { DdLocaleService } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { SelectItem } from '@digitaldelightsoy/design-library/src/select';\r\nimport { addMinutes } from 'date-fns';\r\nimport { getDate, getTime } from 'date-fns/esm';\r\nimport { delay, Subject, take, takeUntil } from 'rxjs';\r\nimport { FormFieldDatepickerComponent, FormFieldDatepickerModel } from '../form-field-datepicker/form-field-datepicker.component';\r\n\r\n/**\r\n * This component provides a datepicker field with validation and error handling.\r\n * It supports form submission and initialization validation.\r\n * It also provides a variant for different sizes and a customizable background color.\r\n */\r\n@Component({\r\n    selector: 'dd-form-datepicker-field',\r\n    templateUrl: './form-datepicker-field.component.html',\r\n    styleUrls: ['./form-datepicker-field.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormDatepickerFieldComponent),\r\n            multi: true,\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => FormDatepickerFieldComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormDatepickerFieldComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n    constructor(private overlayService: OverlayService, private cdr: ChangeDetectorRef, localeService: DdLocaleService) {\r\n        /** Fetch the language locale data. */\r\n        localeService\r\n            .getDateLocale$()\r\n            .pipe(takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((locale?: Locale) => {\r\n                this.locale = locale;\r\n            });\r\n    }\r\n\r\n    /** Label for datepicker field. */\r\n    @Input() dateLabel?: string;\r\n\r\n    /**\r\n     * Determines whether the timepicker should also be shown.\r\n     * If not shown, datepicker will fill the whole row.\r\n     */\r\n    @Input() showTimePicker?: boolean = true;\r\n\r\n    /** Label for time select field. */\r\n    @Input() timeLabel?: string;\r\n\r\n    /** Currently selected date. */\r\n    @Input() selectedDate?: Date;\r\n\r\n    /** Minimum hour selectable. */\r\n    @Input() min: number = 0;\r\n\r\n    /** Maximum hour selectable. */\r\n    @Input() max: number = 24;\r\n\r\n    /** Interval for the timepicker. */\r\n    @Input() interval: number = 30;\r\n\r\n    /**\r\n     * Configuration for the datepicker.\r\n     * By default, all dates are selectable.\r\n     */\r\n    @Input() options: DatepickerOptions = {\r\n        ...defaultOptions,\r\n        allSelectable: true,\r\n    };\r\n\r\n    /** Validation errors from the form control. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Custom error messages for datepicker validation. */\r\n    @Input() errorMessages?: ValidationErrorMessages;\r\n\r\n    /** Determines whether the datepicker should be validated when the form is submitted. */\r\n    @Input() submitted?: boolean = false;\r\n\r\n    /** Text to be shown when there is no selected item. */\r\n    @Input() selectDateText: string = 'Select Date';\r\n\r\n    /**\r\n     * If you are using the element on a different background color than white,\r\n     * you can change the background color of the input.\r\n     * Use color classes that define both background and font color from the library.\r\n     * Default is white background, with white some fonts are using lighter gray color than the contrast is.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    /** Output event that is emitted when an item is clicked in datepicker. */\r\n    @Output() itemClick: EventEmitter<SelectItem<any>> = new EventEmitter();\r\n\r\n    /** Form control for the datepicker input. */\r\n    value: FormControl<Date | null | undefined> = new FormControl();\r\n\r\n    /** Locale data for the datepicker. */\r\n    locale?: Locale;\r\n\r\n    /** String representation of the selected time. */\r\n    selectedTimeString?: string;\r\n\r\n    /** Selected time value. */\r\n    selectedTimeValue?: [number, number];\r\n\r\n    /** List of selectable times. */\r\n    selectableTimes: SelectItem<[number, number]>[] = [];\r\n\r\n    overlayModel?: OverlayOpenModel<FormFieldDatepickerComponent>;\r\n\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /** Generic error message. */\r\n    private readonly genericError: string = 'Invalid field';\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Returns the keys from the Object.keys as keyof T.\r\n     *\r\n     * https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    objectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Find the error message from the input.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.errors) {\r\n            const keys: string[] = this.objectKeys(this.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof ValidationErrorMessages | undefined = this.objectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // Loop through timeSlots to create list of selectItems\r\n        const today = new Date();\r\n        const minDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), this.min, 0, 0);\r\n        const maxDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), this.max, 0, 0);\r\n\r\n        for (let i = minDate; i <= maxDate; ) {\r\n            if (this.locale?.code) {\r\n                const timeString = i.toLocaleTimeString([this.locale.code], { hour: '2-digit', minute: '2-digit' });\r\n                this.selectableTimes.push({ id: getTime(i), text: timeString, value: [i.getHours(), i.getMinutes()] });\r\n            }\r\n\r\n            i = addMinutes(i, this.interval);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            if (this.selectableTimes?.length && this.selectedDate) {\r\n                // Set initial selected times.\r\n                // Pick closest time to provided Date in selectableTimes list.\r\n\r\n                const compareTimeValue = [this.selectedDate?.getHours(), this.selectedDate?.getMinutes()];\r\n\r\n                const tempTimeArr = this.selectableTimes.map((time) => {\r\n                    if (time.value) {\r\n                        const a = new Date().setUTCHours(compareTimeValue[0] as number, compareTimeValue[1]);\r\n                        const b = new Date().setUTCHours(time.value[0] as number, time.value[1]);\r\n                        return Math.abs(a - b);\r\n                    } else {\r\n                        return;\r\n                    }\r\n                });\r\n\r\n                const index = tempTimeArr.indexOf(Math.min(...(tempTimeArr as number[])));\r\n\r\n                this.selectedTimeValue = this.selectableTimes[index].value;\r\n                this.selectedTimeString = this.selectableTimes[index].text as string;\r\n\r\n                if (this.selectedTimeValue) {\r\n                    this.setDateValue(this.selectedTimeValue);\r\n                }\r\n            } else {\r\n                // If date isn't set, select initial time anyways. When form field is required, an error is shown if date field is empty.\r\n                if (this.selectableTimes[0]) {\r\n                    this.selectItemClick(this.selectableTimes[0]);\r\n                }\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    private setDateValue(time: [number, number]): void {\r\n        if (this.selectedDate) {\r\n            const year = this.selectedDate?.getFullYear();\r\n            const month = this.selectedDate?.getMonth();\r\n            const day = this.selectedDate?.getDate();\r\n            const hours = time[0];\r\n            const minutes = time[1];\r\n\r\n            this.selectedDate = new Date(year as number, month as number, day, hours, minutes);\r\n\r\n            this.value.setValue(this.selectedDate);\r\n        }\r\n    }\r\n\r\n    selectItemClick(time: SelectItem<[number, number]>): void {\r\n        this.selectedTimeString = time.text as string;\r\n        this.selectedTimeValue = time.value;\r\n\r\n        if (time.value) {\r\n            this.setDateValue(time.value);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.selectedDate && !changes.selectedDate.firstChange && this.selectedTimeValue) {\r\n            const currentValue = changes.selectedDate.currentValue;\r\n            const previousValue = changes.selectedDate.previousValue;\r\n\r\n            // Only set timeslot value to previously selected if date is changed. If it is not set, the time will be 00:00 from the date provided as form value,\r\n            if (this.selectableTimes[0].value && getDate(previousValue) !== getDate(currentValue)) {\r\n                this.setDateValue(this.selectedTimeValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAnchorClick(element: HTMLDivElement): void {\r\n        // Close existing overlay\r\n        if (!!this.overlayModel) {\r\n            this.closeMenu();\r\n            return;\r\n        }\r\n\r\n        const data: FormFieldDatepickerModel = {\r\n            options: this.options,\r\n            selectedDate: this.selectedDate || new Date(),\r\n        };\r\n\r\n        const config = this.overlayService.getConnectedToConfig<FormFieldDatepickerModel>(element, '.dd-datepicker-field', data);\r\n\r\n        if (config.overlayConfig) {\r\n            config.closeOnOutsidePointerEvents = true;\r\n        }\r\n\r\n        this.overlayModel = this.overlayService.open(FormFieldDatepickerComponent, config);\r\n\r\n        /** Close dialog when date is selected. */\r\n        this.overlayModel.component.itemClick.pipe(take(1), takeUntil(this._unsubscribeAllSubject)).subscribe((date: Date) => {\r\n            this.selectedDate = date;\r\n\r\n            this.closeMenu();\r\n        });\r\n\r\n        this.overlayModel.overlayRef\r\n            .detachments()\r\n            .pipe(\r\n                // Add delay so when clicking anchor (that is outside event) the anchor click happens first and doesnt open a new overlay.\r\n                delay(1),\r\n                take(1),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n            });\r\n    }\r\n\r\n    /** Helper function to get rid of things. */\r\n    private closeMenu(): void {\r\n        this.value.setValue(this.selectedDate);\r\n\r\n        this.overlayModel?.close();\r\n        delete this.overlayModel;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouched();\r\n        this.value.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    writeValue(value?: Date): void {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        this.value.setValue(value);\r\n    }\r\n\r\n    _onChange: () => void = () => {};\r\n    onTouched: () => void = () => {};\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: () => void): void {\r\n        this.value.valueChanges.pipe(takeUntil(this.destroySubject)).subscribe(fn);\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n}\r\n\r\n.form-field-container {\r\n    min-height: 70px;\r\n\r\n    .time-picker {\r\n        width: 50%;\r\n        min-width: 50%;\r\n        max-width: 50%;\r\n        @include breakpoints.media-breakpoint('lt-sm') {\r\n            width: 100%;\r\n            min-width: 100%;\r\n            max-width: 100%;\r\n        }\r\n    }\r\n\r\n    .dd-select-anchor {\r\n        position: relative;\r\n\r\n        @include themify.dd-themify() {\r\n            height: themify.dd-configuration('inputs', default-size) !important;\r\n        }\r\n\r\n        @include breakpoints.media-breakpoint('lt-sm') {\r\n            width: 100%;\r\n            min-width: 100%;\r\n            max-width: 100%;\r\n        }\r\n\r\n        label {\r\n            position: absolute;\r\n            left: 9px;\r\n            z-index: 2;\r\n            font-size: 12px;\r\n            line-height: 11px;\r\n            background-color: inherit;\r\n            padding: 0 4px;\r\n            // Make the label only the half of the actual height\r\n            // Align content so text is rendered from the bottom\r\n            // Move 1 px up to go over the border.\r\n            height: 6px;\r\n            top: -1px;\r\n            display: flex;\r\n            align-items: flex-end;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./form-datepicker-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 137,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-field-container\">\r\n    <div fxLayout=\"row\" fxLayout-lt-sm=\"column\" fxLayoutAlign=\"space-between center\" fxFlex=\"100\" fxLayoutGap-gt-sm=\"16px\">\r\n        <div #selectAnchor class=\"dd-select-anchor dd-primary-200-border border border-radius-6 cursor-pointer\"\r\n             [ngClass]=\"{'open': !!overlayModel, 'w-50-p': showTimePicker, 'w-100-p': !showTimePicker}\" fxLayoutAlign=\"start center\"\r\n             (click)=\"onAnchorClick(selectAnchor)\">\r\n\r\n            <label class=\"{{backgroundColor}}\" [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\"\r\n                   *ngIf=\"dateLabel\"><span>{{ dateLabel }}</span></label>\r\n\r\n            <div class=\"{{backgroundColor}} w-100-p ml-spacer-mini mr-spacer-xmini subtitle\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                <ng-container *ngIf=\"selectedDate; else noInitialDateTemplate\">\r\n                    <div class=\"mr-spacer-xmini\">\r\n                        {{selectedDate | dddate}}\r\n                    </div>\r\n                </ng-container>\r\n                <ng-template #noInitialDateTemplate>\r\n                    <div>\r\n                        {{selectDateText}}\r\n                    </div>\r\n\r\n                </ng-template>\r\n\r\n                <dd-icon [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" [icon]=\"'dd-icon-calendar'\"></dd-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"showTimePicker\">\r\n            <div class=\"time-picker\">\r\n                <dd-select-list [searchEnabled]=\"true\" [icon]=\"'dd-icon-time'\" [label]=\"timeLabel ?? timeLabel\" [selectText]=\"selectedTimeString ?? ''\"\r\n                                [items]=\"selectableTimes\" (itemClick)=\"selectItemClick($event)\">\r\n                </dd-select-list>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div *ngIf=\"errors && errorMessage\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'form-field-error-{{label}}'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-36a1280eb445467d6a72829337865a124b98d0266c07d65b2c514b90893c7bfec6e8e7d21f98bbc2c4f3ebb7aebdb79449055afac404e6a22bd06e018bda5333",
            "file": "projects/digital-delights-library/src/form-field/components/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormFieldComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-field",
            "styleUrls": [
                "./form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow the field should be autocompleted.\nRefer to https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n",
                    "description": "<p>How the field should be autocompleted.\nRefer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a></p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if autofocus should be enabled.",
                    "description": "<p>Determines if autofocus should be enabled.</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the background color of the input.\nIf you are using the element on a different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\n",
                    "description": "<p>Sets the background color of the input.\nIf you are using the element on a different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages.",
                    "description": "<p>Custom error messages.</p>\n",
                    "line": 53,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors.",
                    "description": "<p>Validation errors.</p>\n",
                    "line": 56,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "fieldDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if the form field should be disabled.",
                    "description": "<p>Determines if the form field should be disabled.</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if validation should be initialized.",
                    "description": "<p>Determines if validation should be initialized.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the form field.",
                    "description": "<p>Label for the form field.</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if a loading indicator should be displayed inside the form field.\n",
                    "description": "<p>Determines if a loading indicator should be displayed inside the form field.</p>\n",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the input field.\n",
                    "description": "<p>Name of the input field.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if padding reserved for hint and error elements should be removed.",
                    "description": "<p>Determines if padding reserved for hint and error elements should be removed.</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the form field should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines if the form field should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the tab index of the form field.\nTab index is null on default so that the attribute is set only if explicitly stated.\n",
                    "description": "<p>Sets the tab index of the form field.\nTab index is null on default so that the attribute is set only if explicitly stated.</p>\n",
                    "line": 100,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "textareaHeight",
                    "defaultValue": "'h-200'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets the height class for the textarea input.",
                    "description": "<p>Sets the height class for the textarea input.</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the input.\n'textarea' type converts the normal <input> to <textarea>.\n",
                    "description": "<p>Type of the input.\n&#39;textarea&#39; type converts the normal <input> to <textarea>.</p>\n",
                    "line": 50,
                    "type": "\"text\" | \"password\" | \"textarea\" | \"number\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 105,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "inputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "<p>Reference to the input field to be autofocused on.</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nReference to the input field to be autofocused on.\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 120,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a form field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a form field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, forwardRef, Input, OnChanges, OnDestroy, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ValidationErrorMessages } from '../../form-field-models';\r\n\r\n/**\r\n * This component provides a form field with validation and error handling.\r\n * It supports form submission and initialization validation.\r\n * It also provides a variant for different sizes and a customizable background color.\r\n */\r\n@Component({\r\n    selector: 'dd-form-field',\r\n    templateUrl: './form-field.component.html',\r\n    styleUrls: ['./form-field.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormFieldComponent),\r\n            multi: true,\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => FormFieldComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormFieldComponent implements ControlValueAccessor, Validator, OnChanges, AfterViewInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    /** Label for the form field. */\r\n    @Input() label?: string;\r\n\r\n    /**\r\n     * Name of the input field.\r\n     */\r\n    @Input() name?: string;\r\n\r\n    /**\r\n     * How the field should be autocompleted.\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\r\n     */\r\n    @Input() autoComplete?: string;\r\n\r\n    /**\r\n     * Type of the input.\r\n     * 'textarea' type converts the normal <input> to <textarea>.\r\n     */\r\n    @Input() type: 'text' | 'password' | 'textarea' | 'number' = 'text';\r\n\r\n    /** Custom error messages. */\r\n    @Input() errorMessages?: ValidationErrorMessages;\r\n\r\n    /** Validation errors. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Determines if validation should be initialized. */\r\n    @Input() initValidation: boolean = true;\r\n\r\n    /**\r\n     * Determines if the form field should be validated when the form is submitted.\r\n     * If this input is not provided, the component will simply mark itself as touched whenever the value is changed.\r\n     */\r\n    @Input() submitted?: boolean;\r\n\r\n    /** Determines if padding reserved for hint and error elements should be removed. */\r\n    @Input() noPadding: boolean = false;\r\n\r\n    /** Determines if the form field should be disabled. */\r\n    @Input() fieldDisabled: boolean = false;\r\n\r\n    /**\r\n     * Determines if a loading indicator should be displayed inside the form field.\r\n     */\r\n    @Input() loading: boolean = false;\r\n\r\n    /**\r\n     * Sets the background color of the input.\r\n     * If you are using the element on a different background color than white, you can change the background color of the input.\r\n     * Use color classes that define both background and font color from the library.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    /** Sets the height class for the textarea input. */\r\n    @Input() textareaHeight: string = 'h-200';\r\n\r\n    /** Determines if autofocus should be enabled. */\r\n    @Input() autofocus: boolean = false;\r\n\r\n    /**\r\n     * Reference to the input field to be autofocused on.\r\n     */\r\n    @ViewChild('input') inputField?: ElementRef;\r\n\r\n    /**\r\n     * Sets the tab index of the form field.\r\n     * Tab index is null on default so that the attribute is set only if explicitly stated.\r\n     */\r\n    @Input() tabIndex?: number | null;\r\n\r\n    value: FormControl<string | null | undefined> = new FormControl();\r\n\r\n    /** Generic error message. */\r\n    private readonly genericError: string = 'Invalid field';\r\n\r\n    /**\r\n     * Save the submitted value to the component.\r\n     */\r\n    private _submitted: boolean = false;\r\n\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Returns the keys from the Object.keys as keyof T.\r\n     *\r\n     * https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ObjectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Find the error message from the input.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.value.errors) {\r\n            const keys: string[] = this.ObjectKeys(this.value.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof ValidationErrorMessages | undefined = this.ObjectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.fieldDisabled || this.value.disabled;\r\n    }\r\n\r\n    /**\r\n     * Run one change detection and mark the form field as touched,\r\n     * so the error is shown if the form field is initialized with invalid value.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        if (this.autofocus) {\r\n            setTimeout(() => {\r\n                this.inputField?.nativeElement.focus();\r\n            }, 200);\r\n        }\r\n\r\n        // If there are errors then trigger new change detection cycle which marks the field as touched.\r\n        if (this.errors && this.initValidation && this.value?.value) {\r\n            setTimeout(() => {\r\n                this.markAsTouched();\r\n                this.value.updateValueAndValidity();\r\n                this.cdr.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // If the form is invalid then set the error message as custom error.\r\n        // Timeout required to show errors at init https://github.com/angular/angular/issues/19170#issuecomment-341555371\r\n        if (changes.errors) {\r\n            setTimeout(() => {\r\n                this.value.setErrors(changes.errors.currentValue);\r\n            });\r\n        }\r\n        if (this.submitted !== undefined) {\r\n            // Check if we should trigger detection cycle for the field.\r\n            if (this.submitted && !this._submitted) {\r\n                this._submitted = this.submitted;\r\n                this.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    _onChange: () => void = () => {};\r\n\r\n    writeValue(value: string): void {\r\n        this.value.setValue(value);\r\n    }\r\n\r\n    onTouched: () => void = () => {};\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: () => void): void {\r\n        this.value.valueChanges.pipe(takeUntil(this.destroySubject)).subscribe(fn);\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    setDisabledState(disabled: boolean) {\r\n        this.fieldDisabled = disabled;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouched();\r\n        this.value.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n\r\n    .form-field-container {\r\n        position: relative;\r\n\r\n        label {\r\n            position: absolute;\r\n            left: 9px;\r\n            z-index: 2;\r\n            font-size: 12px;\r\n            line-height: 11px;\r\n            background-color: inherit;\r\n            padding: 0 4px;\r\n            // Make the label only the half of the actual height\r\n            // Align content so text is rendered from the bottom\r\n            // Move 1 px up to go over the border.\r\n            height: 6px;\r\n            top: -1px;\r\n            display: flex;\r\n            align-items: flex-end;\r\n        }\r\n\r\n        input,\r\n        textarea {\r\n            display: block;\r\n            padding: 12px;\r\n            // Add margin so all inputs reserve space for error-text\r\n            margin-bottom: 16px;\r\n\r\n            @include themify.dd-themify() {\r\n                height: themify.dd-configuration('inputs', default-size);\r\n            }\r\n\r\n            &:not([disabled]) {\r\n                &:hover {\r\n                    @include themify.dd-themify() {\r\n                        border-color: themify.dd-color('primary-600') !important;\r\n                    }\r\n                }\r\n\r\n                @include hover.hover-transition();\r\n\r\n                &:active,\r\n                &:focus {\r\n                    @include themify.dd-themify() {\r\n                        border-color: themify.dd-color('primary-300') !important;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove number input default styling.\r\n            /* Chrome, Safari, Edge, Opera */\r\n            &::-webkit-outer-spin-button,\r\n            &::-webkit-inner-spin-button {\r\n                -webkit-appearance: none;\r\n                margin: 0;\r\n            }\r\n\r\n            /* Firefox */\r\n            &[type='number'] {\r\n                -moz-appearance: textfield;\r\n            }\r\n        }\r\n\r\n        .spinner {\r\n            position: absolute;\r\n            top: 15px;\r\n            right: 10px;\r\n        }\r\n\r\n        // Minus margin so resizable textarea also reserves space for error-text\r\n        .error-text {\r\n            margin-top: -16px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./form-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnChanges",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 125,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 144
                    }
                }
            },
            "templateData": "<div class=\"form-field-container text-body-1\" [ngClass]=\"{'disabled': disabled}\">\r\n    <ng-container *ngIf=\"label\">\r\n        <label class=\"{{backgroundColor}}\" [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\"><span>{{ label }}</span></label>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"type === 'textarea'; else normalInputTemplate\">\r\n        <textarea [id]=\"'form-field-'+label\" class=\"{{backgroundColor}} {{textareaHeight}} w-100-p text-body-1\"\r\n                  [ngClass]=\"{'border dd-primary-200-border border-primary border-radius-6': !disabled, 'border-none': disabled}\" [formControl]=\"value\"\r\n                  [attr.name]=\"name\" [attr.aria-label]=\"label\" attr.aria-describedby=\"form-field-error-{{label}}\" (blur)=\"markAsTouched()\"\r\n                  [attr.disabled]=\"disabled ? true : null\" [attr.tabindex]=\"tabIndex ? tabIndex : null\" #input></textarea>\r\n    </ng-container>\r\n    <ng-template #normalInputTemplate>\r\n\r\n        <input [type]=\"type\" [id]=\"'form-field-'+label\" class=\"{{backgroundColor}} w-100-p text-body-1\"\r\n               [ngClass]=\"{'border dd-primary-200-border border-radius-6': !disabled, 'border-none': disabled}\" [formControl]=\"value\" [attr.name]=\"name\"\r\n               [attr.autocomplete]=\"autoComplete\" [attr.aria-label]=\"label\" attr.aria-describedby=\"form-field-error-{{label}}\" (blur)=\"markAsTouched()\"\r\n               [attr.disabled]=\"disabled ? true : null\" [attr.tabindex]=\"tabIndex ? tabIndex : null\" #input>\r\n        <span *ngIf=\"loading\" class=\"spinner\">\r\n            <dd-loader-spinner [loading]=\"true\" [diameter]=\"16\"></dd-loader-spinner>\r\n        </span>\r\n    </ng-template>\r\n\r\n    <div *ngIf=\"value?.errors && errorMessage\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'form-field-error-{{label}}'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FormFieldDatepickerComponent",
            "id": "component-FormFieldDatepickerComponent-414d8f56ce73ce2e2a5844f2e4503ae7d2c253765d123df1caa2491dac7af1bbdd70229f9003ee2276ad98b641e394046e94ebd244348767d8df933fd25bf29a",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-field-datepicker/form-field-datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-form-field-datepicker",
            "styleUrls": [
                "./form-field-datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field-datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmit itemclick so that it can be used in form field.",
                    "description": "<p>Emit itemclick so that it can be used in form field.</p>\n",
                    "line": 24,
                    "type": "EventEmitter<Date>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormFieldDatepickerModel",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>Selected date.</p>\n",
                    "line": 27,
                    "rawdescription": "\nSelected date."
                },
                {
                    "name": "selectableDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { DatepickerOptions } from '@digitaldelightsoy/design-library/src/datepicker';\r\nimport { OVERLAY_DATA } from '@digitaldelightsoy/design-library/src/overlay';\r\n\r\nexport interface FormFieldDatepickerModel {\r\n    options: DatepickerOptions;\r\n    selectedDate: Date;\r\n    selectableDates?: Date[];\r\n}\r\n@Component({\r\n    selector: 'dd-form-field-datepicker',\r\n    templateUrl: './form-field-datepicker.component.html',\r\n    styleUrls: ['./form-field-datepicker.component.scss'],\r\n})\r\nexport class FormFieldDatepickerComponent {\r\n    constructor(@Inject(OVERLAY_DATA) public data: FormFieldDatepickerModel) {\r\n        this.date = data.selectedDate;\r\n        if (data.selectableDates) {\r\n            this.selectableDates = data.selectableDates;\r\n        }\r\n    }\r\n\r\n    /** Emit itemclick so that it can be used in form field. */\r\n    @Output() itemClick: EventEmitter<Date> = new EventEmitter();\r\n\r\n    /** Selected date. */\r\n    date: Date = new Date();\r\n\r\n    selectableDates: Date[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-field-datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "FormFieldDatepickerModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "FormFieldDatepickerModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dd-form-field-datepicker dd-white-bg p-spacer-mini elevation-04 border-radius-6 w-344\">\r\n    <dd-datepicker [options]=\"data.options\" [selectableDates]=\"selectableDates\" [date]=\"date\" [(ngModel)]=\"date\" (ngModelChange)=\"itemClick.emit($event)\">\r\n    </dd-datepicker>\r\n</div>\r\n"
        },
        {
            "name": "FormRadioComponent",
            "id": "component-FormRadioComponent-83305396779b3b3663f718e2c6cc8255fd5b870cdbef6981202ee1d4e57cfa15a850f77264822801ba1dbfc85ee601074998b8c34b73c3340404cbb34b3e3ca9",
            "file": "projects/digital-delights-library/src/form-field/components/form-radio/form-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormRadioComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-radio",
            "styleUrls": [
                "./form-radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-radio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors.",
                    "description": "<p>Validation errors.</p>\n",
                    "line": 37,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the radio button.",
                    "description": "<p>Label for the radio button.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName of the radio group.",
                    "description": "<p>Name of the radio group.</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if the radio button should be disabled.",
                    "description": "<p>Determines if the radio button should be disabled.</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the form radio should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines if the form radio should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of the radio button.",
                    "description": "<p>Value of the radio button.</p>\n",
                    "line": 40,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Internal state to keep track of form submission.</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nInternal state to keep track of form submission.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates whether the radio button is checked.</p>\n",
                    "line": 49,
                    "rawdescription": "\nIndicates whether the radio button is checked."
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | undefined | null>",
                    "optional": false,
                    "description": "<p>FormControl instance for the radio button.</p>\n",
                    "line": 46,
                    "rawdescription": "\nFormControl instance for the radio button."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 134
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\n\n",
                    "description": "<p>Handles event change for the component.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a radio button within a form with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a radio button within a form with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * This component provides a radio button within a form with validation and error handling.\r\n * It supports form submission and initialization validation.\r\n */\r\n@Component({\r\n    selector: 'dd-form-radio',\r\n    templateUrl: './form-radio.component.html',\r\n    styleUrls: ['./form-radio.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormRadioComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormRadioComponent implements ControlValueAccessor, OnChanges, OnDestroy, AfterViewInit {\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    /** Label for the radio button. */\r\n    @Input() label?: string;\r\n\r\n    /**\r\n     * Determines if the form radio should be validated when the form is submitted.\r\n     * If this input is not provided, the component will simply mark itself as touched whenever the value is changed.\r\n     */\r\n    @Input() submitted?: boolean;\r\n\r\n    /** Determines if the radio button should be disabled. */\r\n    @Input() radioDisabled: boolean = false;\r\n\r\n    /** Validation errors. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Value of the radio button. */\r\n    @Input() value: any = '';\r\n\r\n    /** Name of the radio group. */\r\n    @Input() name: string = '';\r\n\r\n    /** FormControl instance for the radio button. */\r\n    control: FormControl<string | undefined | null> = new FormControl();\r\n\r\n    /** Indicates whether the radio button is checked. */\r\n    checked: boolean = false;\r\n\r\n    /**\r\n     * Internal state to keep track of form submission.\r\n     */\r\n    private _submitted: boolean = false;\r\n\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Handles event change for the component.\r\n     *\r\n     */\r\n    handleChangeEvent(): void {\r\n        this.checked = true;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    /**\r\n     * Run one change detection and mark the form field as touched,\r\n     * so the error is shown if the form field is initialized with invalid value.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        // If there are errors then trigger new change detection cycle which marks the field as touched.\r\n        if (this.errors && this.value) {\r\n            setTimeout(() => {\r\n                this.markAsTouched();\r\n                this.control.updateValueAndValidity();\r\n                this.cdr.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.submitted !== undefined) {\r\n            // Check if we should trigger detection cycle for the radio.\r\n            if (this.submitted && !this._submitted) {\r\n                this._submitted = this.submitted;\r\n                this.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    /**\r\n     * Write value from form model into the view.\r\n     */\r\n    writeValue(value: any): void {\r\n        if (value !== undefined) {\r\n            this.checked = value === this.value;\r\n        }\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    setDisabledState(disabled: boolean) {\r\n        this.radioDisabled = disabled;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouch();\r\n        this.control.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.control.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n\r\n    onChange: any = () => {};\r\n    onTouch: any = () => {};\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouch = fn;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./form-radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div>\r\n    <dd-input [inputLabel]=\"label\" [type]=\"'radio'\" [inputName]=\"name\" [checked]=\"checked\" [disabled]=\"radioDisabled\" (inputClick)=\"handleChangeEvent()\">\r\n    </dd-input>\r\n</div>\r\n"
        },
        {
            "name": "FormSelectComponent",
            "id": "component-FormSelectComponent-b660285709c4096e390bf445ca58ebaaa69f070aeac1d95e45802c22487d734b571dce66aa0163b13117a730ed227bf2c26ccbbe5c578e3dbe78e7043814bf79",
            "file": "projects/digital-delights-library/src/form-field/components/form-select/form-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormSelectComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormSelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-select",
            "styleUrls": [
                "./form-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nError messages.",
                    "description": "<p>Error messages.</p>\n",
                    "line": 41,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe icon to be displayed.",
                    "description": "<p>The icon to be displayed.</p>\n",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelectable items.",
                    "description": "<p>Selectable items.</p>\n",
                    "line": 35,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel to be shown on field.",
                    "description": "<p>Label to be shown on field.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multi",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf multiselect list should be used.",
                    "description": "<p>If multiselect list should be used.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf search functionality is enabled.",
                    "description": "<p>If search functionality is enabled.</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen form is submitted, form field is validated.\n",
                    "description": "<p>When form is submitted, form field is validated.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 79,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "multipleSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 94,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "showErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determine whether errors should be shown.</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nDetermine whether errors should be shown.\n"
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<SelectItem | [] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectMultiItem",
                    "args": [
                        {
                            "type": "[SelectItem<any>, (string | number)[]]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[SelectItem<any>, (string | number)[]]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a select input field within a form with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a select input field within a form with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { SelectItem } from '@digitaldelightsoy/design-library/src/select';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ValidationErrorMessages } from '../../form-field-models';\r\n\r\n/**\r\n * This component provides a select input field within a form with validation and error handling.\r\n * It supports form submission and initialization validation.\r\n */\r\n@Component({\r\n    selector: 'dd-form-select',\r\n    templateUrl: './form-select.component.html',\r\n    styleUrls: ['./form-select.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormSelectComponent),\r\n            multi: true,\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => FormSelectComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormSelectComponent implements ControlValueAccessor, Validator, OnChanges, OnDestroy, AfterViewInit {\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    /** If multiselect list should be used. */\r\n    @Input() multi: boolean = false;\r\n\r\n    /** Selectable items. */\r\n    @Input() items: SelectItem<any>[] = [];\r\n\r\n    /** Label to be shown on field. */\r\n    @Input() label?: string;\r\n\r\n    /** Error messages. */\r\n    @Input() errorMessages?: ValidationErrorMessages;\r\n\r\n    /* Component errors. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /* If validation should be run on init. */\r\n    @Input() initValidation: boolean = true;\r\n\r\n    /**\r\n     * When form is submitted, form field is validated.\r\n     */\r\n    @Input() submitted?: boolean;\r\n\r\n    /** The icon to be displayed. */\r\n    @Input() icon: string = 'dd-icon-arrow-down';\r\n\r\n    /** If search functionality is enabled. */\r\n    @Input() searchEnabled: boolean = false;\r\n\r\n    /**\r\n     * If you are using the element on different background color than white, you can change the background color of the input.\r\n     * Use color classes that define both background and font color from the library.\r\n     * Default is white background, with white some fonts are using lighter gray color than the contrast is.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    value: FormControl<SelectItem<string | number | undefined> | (string | number)[] | undefined> = new FormControl();\r\n\r\n    multipleSelected?: (string | number)[];\r\n\r\n    selectedId?: string | number;\r\n\r\n    /**\r\n     * Determine whether errors should be shown.\r\n     */\r\n    showErrors: boolean = false;\r\n\r\n    /** Generic error message. */\r\n    private readonly genericError: string = 'Invalid field';\r\n\r\n    /**\r\n     * Save the submitted value to the component.\r\n     */\r\n    private _submitted: boolean = false;\r\n\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Returns the keys from the Object.keys as keyof T.\r\n     *\r\n     * https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ObjectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Find the error message from the input.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.value.errors) {\r\n            const keys: string[] = this.ObjectKeys(this.value.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof ValidationErrorMessages | undefined = this.ObjectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Run one change detection and mark the form field as touched,\r\n     * so the error is shown if the form field is initialized with invalid value.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        // If there are errors then trigger new change detection cycle which marks the field as touched.\r\n        if (this.errors && this.initValidation && this.value?.value) {\r\n            setTimeout(() => {\r\n                this.markAsTouched();\r\n                this.value.updateValueAndValidity();\r\n                this.cdr.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // If the form is invalid then set the error message as custom error.\r\n        // Timeout required to show errors at init https://github.com/angular/angular/issues/19170#issuecomment-341555371\r\n        if (changes.errors) {\r\n            setTimeout(() => {\r\n                this.value.setErrors(changes.errors.currentValue);\r\n            });\r\n        }\r\n        if (this.submitted !== undefined) {\r\n            // Check if we should trigger detection cycle for the field.\r\n            if (this.submitted && !this._submitted) {\r\n                this._submitted = this.submitted;\r\n                this.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    onSelectItem(item: SelectItem<string>): void {\r\n        this.selectedId = item.id as string;\r\n        this.value.setValue(item);\r\n    }\r\n\r\n    onSelectMultiItem([item, selections]: [SelectItem<any>, (string | number)[]]): void {\r\n        this.multipleSelected = selections ?? [];\r\n        if (selections.length > 0) {\r\n            this.value.setValue(selections);\r\n        } else {\r\n            this.value.setValue(undefined);\r\n        }\r\n    }\r\n\r\n    _onChange: () => void = () => {};\r\n\r\n    writeValue(value: any): void {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        if (this.multi) {\r\n            this.multipleSelected = value.map((selected: SelectItem<any> | number | string) => (typeof selected === 'object' ? selected.id : selected)) as (string | number)[];\r\n        } else {\r\n            this.selectedId = value.id as string | number;\r\n        }\r\n        this.value.setValue(value);\r\n    }\r\n\r\n    onTouched: () => void = () => {};\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: () => void): void {\r\n        this.value.valueChanges.pipe(takeUntil(this.destroySubject)).subscribe(fn);\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouched();\r\n        this.value.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n\r\n    .form-field-container {\r\n        position: relative;\r\n    }\r\n}\r\n",
                    "styleUrl": "./form-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 99,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-field-container\">\r\n    <ng-container *ngIf=\" multi; else singleSelectTemplate\">\r\n        <dd-multi-select-list [id]=\"'form-field-{{label}}'\" [searchEnabled]=\"searchEnabled\" [icon]=\"icon\" [label]=\"label\" [items]=\"items\"\r\n                              [selected]=\"multipleSelected\" [backgroundColor]=\"backgroundColor\" [attr.aria-label]=\"label\"\r\n                              (itemClick)=\"onSelectMultiItem($event)\">\r\n        </dd-multi-select-list>\r\n    </ng-container>\r\n    <ng-template #singleSelectTemplate>\r\n        <dd-select-list [id]=\"'form-field-{{label}}'\" [searchEnabled]=\"searchEnabled\" [icon]=\"icon\" [label]=\"label\" [items]=\"items\" [selected]=\"selectedId\"\r\n                        [attr.aria-label]=\"label\" [backgroundColor]=\"backgroundColor\" (itemClick)=\"onSelectItem($event)\">\r\n        </dd-select-list>\r\n    </ng-template>\r\n\r\n    <div *ngIf=\"value?.errors && errorMessage\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'form-field-error-{{label}}'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FormToggleSliderComponent",
            "id": "component-FormToggleSliderComponent-764231f0358c66f08b84f15da376213193fd91f7659a8907246141f2a7090418b85437c815e69d054bc29193b1e9cf3221d586c8595ae95b41e541d108f70ca4",
            "file": "projects/digital-delights-library/src/form-field/components/form-toggle-slider/form-toggle-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormToggleSliderComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-toggle-slider",
            "styleUrls": [
                "./form-toggle-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-toggle-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether the toggle slider is disabled.",
                    "description": "<p>Indicates whether the toggle slider is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nError messages for the toggle slider.",
                    "description": "<p>Error messages for the toggle slider.</p>\n",
                    "line": 44,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors for the toggle slider.",
                    "description": "<p>Validation errors for the toggle slider.</p>\n",
                    "line": 38,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether to perform initial validation.",
                    "description": "<p>Indicates whether to perform initial validation.</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the toggle slider input.",
                    "description": "<p>Label for the toggle slider input.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen form is submitted, form toggle slider is validated and new detection cycle is triggered.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>When form is submitted, form toggle slider is validated and new detection cycle is triggered.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates whether the toggle slider is checked.</p>\n",
                    "line": 50,
                    "rawdescription": "\nIndicates whether the toggle slider is checked."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Slider Required'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message for the toggle slider.</p>\n",
                    "line": 53,
                    "rawdescription": "\nGeneric error message for the toggle slider.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 67,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the toggle slider value.</p>\n",
                    "line": 47,
                    "rawdescription": "\nForm control for the toggle slider value."
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the toggle slider component.\n",
                    "description": "<p>Handles event change for the toggle slider component.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with an invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with an invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for a toggle slider input within a form with validation and error handling.\nSupports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nComponent for a toggle slider input within a form with validation and error handling.\nSupports form submission and initialization validation.\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { ValidationErrorMessages } from '../../form-field-models';\r\n\r\n/**\r\n * Component for a toggle slider input within a form with validation and error handling.\r\n * Supports form submission and initialization validation.\r\n */\r\n@Component({\r\n    selector: 'dd-form-toggle-slider',\r\n    templateUrl: './form-toggle-slider.component.html',\r\n    styleUrls: ['./form-toggle-slider.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => FormToggleSliderComponent),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class FormToggleSliderComponent implements ControlValueAccessor, OnChanges, OnDestroy, AfterViewInit {\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    /** Label for the toggle slider input. */\r\n    @Input() label?: string;\r\n\r\n    /**\r\n     * When form is submitted, form toggle slider is validated and new detection cycle is triggered.\r\n     * If this input is not provided, the component will simply mark itself as touched whenever the value is changed.\r\n     */\r\n    @Input() submitted?: boolean;\r\n\r\n    /** Indicates whether the toggle slider is disabled. */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /** Validation errors for the toggle slider. */\r\n    @Input() errors?: ValidationErrors | null;\r\n\r\n    /** Indicates whether to perform initial validation. */\r\n    @Input() initValidation: boolean = true;\r\n\r\n    /** Error messages for the toggle slider. */\r\n    @Input() errorMessages?: ValidationErrorMessages;\r\n\r\n    /**  Form control for the toggle slider value. */\r\n    value: FormControl<boolean | null | undefined> = new FormControl();\r\n\r\n    /**  Indicates whether the toggle slider is checked. */\r\n    checked: boolean = false;\r\n\r\n    /** Generic error message for the toggle slider. */\r\n    private readonly genericError: string = 'Slider Required';\r\n\r\n    /**\r\n     * Save the submitted value to the component.\r\n     */\r\n    private _submitted: boolean = false;\r\n\r\n    private destroySubject: Subject<void> = new Subject();\r\n\r\n    /**\r\n     * Returns the keys from the Object.keys as keyof T.\r\n     *\r\n     * https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\r\n     */\r\n    ObjectKeys: <T>(o: T) => Extract<keyof T, string>[] = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\r\n\r\n    /**\r\n     * Find the error message from the input.\r\n     */\r\n    get errorMessage(): string | undefined {\r\n        if (this.value.errors) {\r\n            const keys: string[] = this.ObjectKeys(this.value.errors);\r\n\r\n            if (this.errorMessages) {\r\n                const key: keyof ValidationErrorMessages | undefined = this.ObjectKeys(this.errorMessages).find((errorKey) => keys.includes(errorKey));\r\n\r\n                // Return error message if the key is found.\r\n                if (key && this.errorMessages[key]) {\r\n                    return this.errorMessages[key];\r\n                }\r\n            }\r\n            return this.genericError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles event change for the toggle slider component.\r\n     */\r\n    handleChangeEvent(): void {\r\n        this.checked = !this.checked;\r\n\r\n        this.propagateChange(this.checked);\r\n    }\r\n\r\n    /**\r\n     * Run one change detection and mark the form field as touched,\r\n     * so the error is shown if the form field is initialized with an invalid value.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        // If there are errors then trigger a new change detection cycle which marks the field as touched.\r\n        if (this.errors && this.initValidation && this.value?.value) {\r\n            setTimeout(() => {\r\n                this.markAsTouched();\r\n                this.value.updateValueAndValidity();\r\n                this.cdr.detectChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // If the form is invalid then set the error message as a custom error.\r\n        // Timeout required to show errors at init https://github.com/angular/angular/issues/19170#issuecomment-341555371\r\n        if (changes.errors) {\r\n            setTimeout(() => {\r\n                this.value.setErrors(changes.errors.currentValue);\r\n            });\r\n        }\r\n\r\n        if (this.submitted !== undefined) {\r\n            // Check if we should trigger a detection cycle for the toggle slider.\r\n            if (this.submitted && !this._submitted) {\r\n                this._submitted = this.submitted;\r\n                this.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroySubject.next();\r\n        this.destroySubject.complete();\r\n    }\r\n\r\n    /**\r\n     * Write value from form model into the view.\r\n     */\r\n    writeValue(value: any): void {\r\n        if (value !== undefined) {\r\n            this.checked = value;\r\n        }\r\n    }\r\n\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    setDisabledState(disabled: boolean) {\r\n        this.disabled = disabled;\r\n    }\r\n\r\n    /** Marks the form control as touched. */\r\n    markAsTouched() {\r\n        this.onTouched();\r\n        this.value.markAsTouched();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Returns form validation errors or null if form is valid.\r\n     */\r\n    validate(): ValidationErrors | null {\r\n        if (!this.value.valid && this.errors) {\r\n            return this.errors;\r\n        }\r\n\r\n        // tslint:disable-next-line: no-null-keyword\r\n        return null;\r\n    }\r\n\r\n    _onChange: () => void = () => {};\r\n    onTouched: () => void = () => {};\r\n    propagateChange = (_: any) => {};\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    /**\r\n     * Register callback function as an internal method.\r\n     */\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./form-toggle-slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 72,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            },
            "templateData": "<div>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <dd-toggle-slider [checked]=\"checked\" [disabled]=\"disabled\" (sliderClick)=\"handleChangeEvent()\"></dd-toggle-slider>\r\n        <span class=\"ml-spacer-mini\">\r\n            {{label}}\r\n        </span>\r\n    </div>\r\n    <div *ngIf=\"value?.errors && errorMessage\" class=\"error-text text-body-2 dd-danger-fg\" [id]=\"'form-field-error-{{label}}'\">\r\n        {{ errorMessage }}\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderButtonComponent",
            "id": "component-HeaderButtonComponent-f44ab51c1325e932209565faf47a10af98c2dfdf321756b1df2037aba43d43c60482d9202446fab9cad22fa156de4f120f9dfab2cbd82bf050be9ad3459429fd",
            "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-header-button",
            "styleUrls": [
                "./header-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary-dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the color of the button.\n",
                    "description": "<p>Defines the color of the button.</p>\n",
                    "line": 40,
                    "type": "HeaderButtonColor",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports DesignLibrary icons.\nDoes not render icon if not defined.\n",
                    "description": "<p>Icon for the button.\nSupports DesignLibrary icons.\nDoes not render icon if not defined.</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf special icon color is needed.\nThis is needed for the header menu button icon.\nOnly supports 'white'\n",
                    "description": "<p>If special icon color is needed.\nThis is needed for the header menu button icon.\nOnly supports &#39;white&#39;</p>\n",
                    "line": 52,
                    "type": "HeaderButtonIconColor",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\nDoes not render text if not defined.\n",
                    "description": "<p>Text for the button.\nDoes not render text if not defined.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to url.\n",
                    "description": "<p>Navigates to url.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useNgContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRenders the text as ng content.\n",
                    "description": "<p>Renders the text as ng content.</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the button.\n",
                    "description": "<p>Click event for the button.</p>\n",
                    "line": 57,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for a header button with text, icon, and click event.</p>\n",
            "rawdescription": "\n\nComponent for a header button with text, icon, and click event.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n/** Type for the color of the header button. */\r\nexport type HeaderButtonColor = 'primary-dark' | 'secondary';\r\n\r\n/** Type for the color of the header button icon. */\r\nexport type HeaderButtonIconColor = 'white';\r\n\r\n/**\r\n * Component for a header button with text, icon, and click event.\r\n */\r\n@Component({\r\n    selector: 'dd-header-button',\r\n    templateUrl: './header-button.component.html',\r\n    styleUrls: ['./header-button.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeaderButtonComponent {\r\n    /**\r\n     * Text for the button.\r\n     * Does not render text if not defined.\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * Icon for the button.\r\n     * Supports DesignLibrary icons.\r\n     * Does not render icon if not defined.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Navigates to url.\r\n     */\r\n    @Input() url?: string;\r\n\r\n    /**\r\n     * Defines the color of the button.\r\n     */\r\n    @Input() color: HeaderButtonColor = 'primary-dark';\r\n\r\n    /**\r\n     * Renders the text as ng content.\r\n     */\r\n    @Input() useNgContent: boolean = false;\r\n\r\n    /**\r\n     * If special icon color is needed.\r\n     * This is needed for the header menu button icon.\r\n     * Only supports 'white'\r\n     */\r\n    @Input() iconColor?: HeaderButtonIconColor = undefined;\r\n\r\n    /**\r\n     * Click event for the button.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "a.dd-btn {\r\n    // Overwrite the default width of the button\r\n    min-width: 48px !important;\r\n    padding: 12px;\r\n}\r\n",
                    "styleUrl": "./header-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n    <a class=\"dd-btn dd-header-button {{color}}\" fxLayout=\"row\" fxLayoutAlign=\"center center\" [routerLink]=\"url\" (click)=\"buttonClick.emit()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </a>\r\n</ng-container>\r\n<ng-template #buttonWithoutRoutingTemplate>\r\n    <a class=\"dd-btn dd-header-button {{color}}\" fxLayout=\"row\" fxLayoutAlign=\"center center\" (click)=\"buttonClick.emit()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </a>\r\n</ng-template>\r\n\r\n<ng-template #insideButtonTemplate>\r\n    <ng-container *ngIf=\"text; else noTextContainerTemplate\">\r\n        <div>{{text}}</div>\r\n    </ng-container>\r\n    <ng-template #noTextContainerTemplate>\r\n        <ng-container *ngIf=\"useNgContent\">\r\n            <ng-content></ng-content>\r\n        </ng-container>\r\n    </ng-template>\r\n    <div class=\"header-button-icon\" [ngClass]=\"{'dd-accent-fg': color === 'primary-dark', 'dd-white-fg': iconColor === 'white' }\" *ngIf=\"icon\">\r\n        <dd-icon [icon]=\"icon\">\r\n        </dd-icon>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-1b5d7832f554fac985ade41f506af1f426dba47127866173a89022826edc3421beb46f7335d54185fe302ffde89d4186d6596c34521f7d9e481aca351fe5e6be",
            "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary-light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 47,
                    "type": "IconButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the button shows disabled styles.\nDisabled button does not emit event.\n",
                    "description": "<p>Check if the button shows disabled styles.\nDisabled button does not emit event.</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports Design library icons.\n",
                    "description": "<p>Icon for the button.\nSupports Design library icons.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel for the icon.\n",
                    "description": "<p>Label for the icon.</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the button.\n",
                    "description": "<p>Defines the size of the button.</p>\n",
                    "line": 25,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 57,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\n",
                    "description": "<p>Text for the button.</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds link support to button click.\n",
                    "description": "<p>Adds link support to button click.</p>\n",
                    "line": 52,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVariant of the icon button.\n",
                    "description": "<p>Variant of the icon button.</p>\n",
                    "line": 20,
                    "type": "\"basic\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 67,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for an icon button with text, icon, and click event.</p>\n",
            "rawdescription": "\n\nComponent for an icon button with text, icon, and click event.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ButtonSize } from '../button/button.component';\r\n\r\n/** Type for the color of the icon button. */\r\nexport type IconButtonColor = 'secondary' | 'primary-light' | 'primary-dark';\r\n\r\n/**\r\n * Component for an icon button with text, icon, and click event.\r\n */\r\n@Component({\r\n    selector: 'dd-icon-button',\r\n    templateUrl: './icon-button.component.html',\r\n    styleUrls: ['./icon-button.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class IconButtonComponent {\r\n    /**\r\n     * Variant of the icon button.\r\n     */\r\n    @Input() variant?: 'basic' | 'outline' = 'basic';\r\n\r\n    /**\r\n     * Defines the size of the button.\r\n     */\r\n    @Input() size: ButtonSize = 'normal';\r\n\r\n    /**\r\n     * Icon for the button.\r\n     * Supports Design library icons.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Check if the button shows disabled styles.\r\n     * Disabled button does not emit event.\r\n     */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * Label for the icon.\r\n     */\r\n    @Input() iconAriaLabel?: string;\r\n\r\n    /**\r\n     * Color support for the icon buttons.\r\n     */\r\n    @Input() color: IconButtonColor = 'primary-light';\r\n\r\n    /**\r\n     * Adds link support to button click.\r\n     */\r\n    @Input() url?: string | string[];\r\n\r\n    /**\r\n     * Allows url to be opened in new tab.\r\n     */\r\n    @Input() target?: '_blank';\r\n\r\n    /**\r\n     * Text for the button.\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * Emit the button click event.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Classes for the ngClass of the button.\r\n     */\r\n    get buttonClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-white dd-primary-100-hover dd-primary-100-active': this.color === 'primary-light' && this.variant === 'basic', //\r\n            'dd-accent dd-accent-darker-bg-hover dd-accent-darkest-bg-active': this.color === 'secondary' && this.variant === 'basic',\r\n            'dd-primary-900 dd-primary-800-hover dd-primary-600-active': this.color === 'primary-dark' && this.variant === 'basic',\r\n            'disabled ': this.disabled,\r\n            'dd-primary-600-fg-active ': this.color === 'primary-dark' && this.variant === 'outline',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Classes for the text color of the button.\r\n     */\r\n    get textColorClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-primary-300-fg': this.color === 'primary-light' && this.variant === 'basic', //\r\n            'dd-primary-200-fg': this.color === 'primary-dark' && this.variant === 'basic',\r\n            'dd-primary-100-fg': this.color === 'secondary' && this.variant === 'basic',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Classes for the ngClass of the button outline.\r\n     */\r\n    get buttonOutlineClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-primary-900-fg': this.color === 'primary-light' && this.variant === 'outline', //\r\n            'dd-accent-fg': this.color === 'secondary' && this.variant === 'outline',\r\n            'dd-primary-50-fg ': this.color === 'primary-dark' && this.variant === 'outline',\r\n            'disabled ': this.disabled,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Classes for the icon outline.\r\n     */\r\n    get iconOutlineClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            'dd-primary-900-border': this.color === 'primary-light' && this.variant === 'outline', //\r\n            'dd-accent-border': this.color === 'secondary' && this.variant === 'outline',\r\n            'dd-primary-50-border': this.color === 'primary-dark' && this.variant === 'outline',\r\n            'p-spacer-solo': this.size === 'normal' || this.size === 'mini',\r\n            'p-spacer-xmini': this.size === 'large',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n@use '../../../../styles/themes/themify';\r\n\r\na,\r\nbutton {\r\n    text-align: center;\r\n\r\n    cursor: pointer;\r\n    text-decoration: none !important;\r\n    border: none !important;\r\n    border-radius: 6px;\r\n\r\n    @include themify.dd-themify() {\r\n        $iconButtonHeight: themify.dd-configuration('inputs', default-size);\r\n\r\n        height: $iconButtonHeight;\r\n        max-height: $iconButtonHeight;\r\n        min-height: $iconButtonHeight;\r\n\r\n        width: $iconButtonHeight;\r\n        max-width: $iconButtonHeight;\r\n        min-width: $iconButtonHeight;\r\n    }\r\n\r\n    &:active {\r\n        box-shadow: none !important;\r\n    }\r\n    &:disabled,\r\n    &.disabled {\r\n        cursor: default;\r\n        box-shadow: unset !important;\r\n        opacity: opacity.$opacity-button-disabled !important;\r\n        pointer-events: none !important;\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n\r\n    .icon-button-text {\r\n        font-size: 8px;\r\n        margin-top: -4px;\r\n    }\r\n}\r\n\r\n.icon-button-outline {\r\n    background-color: transparent !important;\r\n    height: unset;\r\n    max-height: unset;\r\n    min-height: unset;\r\n\r\n    width: unset;\r\n    max-width: unset;\r\n    min-width: unset;\r\n    max-height: unset;\r\n\r\n    &:hover {\r\n        * {\r\n            filter: brightness(80%);\r\n        }\r\n        &.dd-primary-900-fg * {\r\n            @include themify.dd-themify() {\r\n                color: themify.dd-color('primary-300') !important;\r\n            }\r\n        }\r\n        .border.dd-primary-900-border {\r\n            @include themify.dd-themify() {\r\n                border-color: themify.dd-color('primary-300') !important;\r\n                color: themify.dd-color('primary-300') !important;\r\n            }\r\n        }\r\n    }\r\n    &:active {\r\n        * {\r\n            filter: brightness(70%);\r\n        }\r\n        &.dd-primary-900-fg * {\r\n            @include themify.dd-themify() {\r\n                color: themify.dd-color('primary-200') !important;\r\n            }\r\n        }\r\n        .border.dd-primary-900-border {\r\n            @include themify.dd-themify() {\r\n                border-color: themify.dd-color('primary-200') !important;\r\n                color: themify.dd-color('primary-200') !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n",
                    "styleUrl": "./icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 72,
                        "rawdescription": "\n\nClasses for the ngClass of the button.\n",
                        "description": "<p>Classes for the ngClass of the button.</p>\n"
                    }
                },
                "textColorClasses": {
                    "name": "textColorClasses",
                    "getSignature": {
                        "name": "textColorClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 85,
                        "rawdescription": "\n\nClasses for the text color of the button.\n",
                        "description": "<p>Classes for the text color of the button.</p>\n"
                    }
                },
                "buttonOutlineClasses": {
                    "name": "buttonOutlineClasses",
                    "getSignature": {
                        "name": "buttonOutlineClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 96,
                        "rawdescription": "\n\nClasses for the ngClass of the button outline.\n",
                        "description": "<p>Classes for the ngClass of the button outline.</p>\n"
                    }
                },
                "iconOutlineClasses": {
                    "name": "iconOutlineClasses",
                    "getSignature": {
                        "name": "iconOutlineClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 108,
                        "rawdescription": "\n\nClasses for the icon outline.\n",
                        "description": "<p>Classes for the icon outline.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"icon && variant === 'basic'; else IconButtonOutlineTemplate\">\r\n    <ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n        <a class=\"dd-icon-button dd-btn elevation-00 hover-elevation-03\" [attr.disabled]=\"disabled ? true : null\" [routerLink]=\"url\" [target]=\"target\"\r\n           [ngClass]=\"buttonClasses\" fxLayoutAlign=\"center center\" fxLayout=\"column\" (click)=\"!disabled && buttonClick.emit()\">\r\n            <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n        </a>\r\n    </ng-container>\r\n\r\n    <ng-template #buttonWithoutRoutingTemplate>\r\n        <button class=\"dd-icon-button elevation-00 hover-elevation-03\" [attr.disabled]=\"disabled ? true : null\" [ngClass]=\"buttonClasses\"\r\n                fxLayoutAlign=\"center center\" fxLayout=\"column\" (click)=\"!disabled && buttonClick.emit()\">\r\n            <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n        </button>\r\n    </ng-template>\r\n</ng-container>\r\n\r\n<ng-template #insideButtonTemplate>\r\n    <dd-icon [icon]=\"icon\" [iconAriaLabel]=\"iconAriaLabel\">\r\n    </dd-icon>\r\n    <ng-container *ngIf=\"text\">\r\n        <span class=\"icon-button-text all-caps\" [ngClass]=\"textColorClasses\">\r\n            {{text}}\r\n        </span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #IconButtonOutlineTemplate>\r\n    <ng-container *ngIf=\"icon && variant === 'outline'\">\r\n        <ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n            <a class=\"icon-button-outline\" [attr.disabled]=\"disabled ? true : null\" [routerLink]=\"url\" [target]=\"target\" [ngClass]=\"buttonOutlineClasses\"\r\n               fxLayoutAlign=\"center center\" fxLayout=\"column\" (click)=\"!disabled && buttonClick.emit()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </a>\r\n        </ng-container>\r\n\r\n        <ng-template #buttonWithoutRoutingTemplate>\r\n            <button class=\"icon-button-outline\" [attr.disabled]=\"disabled ? true : null\" [ngClass]=\"buttonOutlineClasses\" fxLayoutAlign=\"center center\"\r\n                    fxLayout=\"column\" (click)=\"!disabled && buttonClick.emit()\">\r\n                <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n            </button>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-template #insideButtonTemplate>\r\n        <div class=\"border border-radius-100-p\" [ngClass]=\"iconOutlineClasses\">\r\n            <dd-icon [icon]=\"icon\" [ngClass]=\"{'mini': size === 'mini'}\" [iconAriaLabel]=\"iconAriaLabel\">\r\n            </dd-icon>\r\n        </div>\r\n        <ng-container *ngIf=\"text\">\r\n            <span class=\"text-body-2 mt-spacer-solo\">\r\n                {{text}}\r\n            </span>\r\n        </ng-container>\r\n    </ng-template>\r\n\r\n</ng-template>\r\n"
        },
        {
            "name": "IconClickableComponent",
            "id": "component-IconClickableComponent-94c2a46da43e8923cac0ca5d6e1a9bcab6a98246147b82d215193059b05a8d9e39df727f9d906063b3a663f06aef13f4a5bec1c9da3dcc7cda7e627a70d850c5",
            "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon-clickable",
            "styleUrls": [
                "./icon-clickable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-clickable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 53,
                    "type": "undefined | \"light\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary-light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 48,
                    "type": "IconClickableColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the button shows disabled styles.\nDisabled button does not emit event.\n",
                    "description": "<p>Check if the button shows disabled styles.\nDisabled button does not emit event.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports Design library icons.\n",
                    "description": "<p>Icon for the button.\nSupports Design library icons.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel for the icon.\n",
                    "description": "<p>Label for the icon.</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for an icon that triggers a click event.</p>\n",
            "rawdescription": "\n\nComponent for an icon that triggers a click event.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n/** Type for the color of the icon button. */\r\nexport type IconClickableColor = 'primary-light' | 'primary-dark' | 'secondary-light' | 'secondary-dark' | 'white';\r\n\r\ntype StyleDict = {\r\n    [key in IconClickableColor]: string;\r\n};\r\n\r\nconst styleClasses: StyleDict = {\r\n    'primary-light': 'dd-primary-500-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'primary-dark': 'dd-primary-400-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    'secondary-light': 'dd-accent-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'secondary-dark': 'dd-accent-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    white: 'dd-white-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n};\r\n\r\n/**\r\n * Component for an icon that triggers a click event.\r\n */\r\n@Component({\r\n    selector: 'dd-icon-clickable',\r\n    templateUrl: './icon-clickable.component.html',\r\n    styleUrls: ['./icon-clickable.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class IconClickableComponent {\r\n    /**\r\n     * Icon for the button.\r\n     * Supports Design library icons.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Check if the button shows disabled styles.\r\n     * Disabled button does not emit event.\r\n     */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * Label for the icon.\r\n     */\r\n    @Input() iconAriaLabel?: string;\r\n\r\n    /**\r\n     * Color support for the icon buttons.\r\n     */\r\n    @Input() color: IconClickableColor = 'primary-light';\r\n\r\n    /**\r\n     * Color support for the icon buttons.\r\n     */\r\n    @Input() backgroundColor: undefined | 'light' = undefined;\r\n\r\n    /**\r\n     * Emit the button click event.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Picks style class based on color.\r\n     */\r\n    get buttonClasses(): string {\r\n        const colorStyles = styleClasses[this.color];\r\n        return `${colorStyles} ${this.backgroundColor}`;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n\r\nbutton {\r\n    text-align: center;\r\n    background: transparent;\r\n\r\n    cursor: pointer;\r\n    text-decoration: none !important;\r\n    border: none !important;\r\n    border-radius: 6px;\r\n\r\n    height: 40px;\r\n    max-height: 40px;\r\n    min-height: 40px;\r\n\r\n    width: 40px;\r\n    max-width: 40px;\r\n    min-width: 40px;\r\n\r\n    &:active {\r\n        box-shadow: none !important;\r\n    }\r\n    &:disabled {\r\n        cursor: default;\r\n        box-shadow: unset !important;\r\n        opacity: opacity.$opacity-button-disabled !important;\r\n        pointer-events: none !important;\r\n    }\r\n\r\n    &.light {\r\n        background-color: rgba(255, 255, 255, 0.4);\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n",
                    "styleUrl": "./icon-clickable.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 63,
                        "rawdescription": "\n\nPicks style class based on color.\n",
                        "description": "<p>Picks style class based on color.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"icon\">\r\n    <button [type]=\"'button'\" [ngClass]=\"buttonClasses\" [attr.disabled]=\"disabled ? true : null\" (click)=\"!disabled && buttonClick.emit()\"\r\n            fxLayoutAlign=\"center center\">\r\n        <dd-icon [icon]=\"icon\" [iconAriaLabel]=\"iconAriaLabel\">\r\n        </dd-icon>\r\n    </button>\r\n</ng-container>\r\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-de274e22e54fa794f4b88f8ffbfabba49c7d4f2b8d00382903b1413001166636e6513de865a6065c7a0249178e0e5da99414f3836a683431be0afba1e9678d0c",
            "file": "projects/digital-delights-library/src/icon/components/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon class for the i tag.\n",
                    "description": "<p>Icon class for the i tag.</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the icon",
                    "description": "<p>Label for the icon</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize supports icon size helper class \"s-X\" where X supports values from 4 to 256 with increments of 2.\nDefaults to configured default icon size.\n",
                    "description": "<p>Size supports icon size helper class &quot;s-X&quot; where X supports values from 4 to 256 with increments of 2.\nDefaults to configured default icon size.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe default size variant for the icon.\n",
                    "description": "<p>The default size variant for the icon.</p>\n",
                    "line": 30,
                    "type": "\"default\" | \"mini\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for displaying an icon.</p>\n",
            "rawdescription": "\n\nComponent for displaying an icon.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n/**\r\n * Component for displaying an icon.\r\n */\r\n@Component({\r\n    selector: 'dd-icon',\r\n    templateUrl: './icon.component.html',\r\n    styleUrls: ['./icon.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class IconComponent {\r\n    /**\r\n     * Icon class for the i tag.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Size supports icon size helper class \"s-X\" where X supports values from 4 to 256 with increments of 2.\r\n     * Defaults to configured default icon size.\r\n     */\r\n    @Input() size?: string;\r\n\r\n    /** Label for the icon  */\r\n    @Input() iconAriaLabel?: string;\r\n\r\n    /**\r\n     * The default size variant for the icon.\r\n     */\r\n    @Input() variant: 'default' | 'mini' = 'default';\r\n\r\n    /**\r\n     * Generates the class name for the icon based on the provided icon.\r\n     */\r\n    get iconClassName(): string {\r\n        if (!this.icon) {\r\n            return '';\r\n        }\r\n\r\n        if (this.icon.startsWith('dd-icon-')) {\r\n            return this.icon;\r\n        }\r\n\r\n        if (this.icon.startsWith('fa') || this.icon.includes('fa-')) {\r\n            return this.icon;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Determines whether the icon should be hidden from accessibility based on the presence of an aria label.\r\n     */\r\n    get iconAriaHidden(): boolean | null {\r\n        return !!this.iconAriaLabel ? false : true;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// This makes the icon container that the size of the child <i> tag\r\n:host {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "iconClassName": {
                    "name": "iconClassName",
                    "getSignature": {
                        "name": "iconClassName",
                        "type": "string",
                        "returnType": "string",
                        "line": 35,
                        "rawdescription": "\n\nGenerates the class name for the icon based on the provided icon.\n",
                        "description": "<p>Generates the class name for the icon based on the provided icon.</p>\n"
                    }
                },
                "iconAriaHidden": {
                    "name": "iconAriaHidden",
                    "getSignature": {
                        "name": "iconAriaHidden",
                        "type": "",
                        "returnType": "boolean | null",
                        "line": 54,
                        "rawdescription": "\n\nDetermines whether the icon should be hidden from accessibility based on the presence of an aria label.\n",
                        "description": "<p>Determines whether the icon should be hidden from accessibility based on the presence of an aria label.</p>\n"
                    }
                }
            },
            "templateData": "<i class=\"dd-icon {{iconClassName}} {{icon}} {{size}} {{variant}}\" aria-hidden=\"true\" fxLayoutAlign=\"center center\" [attr.aria-hidden]=\"iconAriaHidden\"\r\n   [attr.aria-label]=\"iconAriaLabel ? iconAriaLabel : null\"></i>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-9c71d495ec9b48d5a31277873edf34499314f8112ab2c8c28e6ddb2f5ec3137e7b56cfaafb4b91f27bac63cdf17756df2159d36456f0b6672b79e33b3f7d7a85",
            "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the input.",
                    "description": "<p>Label for the input.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName can be used to define radio button group.",
                    "description": "<p>Name can be used to define radio button group.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of input component.\nSupports 'checkbox' and 'radio'.\n",
                    "description": "<p>The type of input component.\nSupports &#39;checkbox&#39; and &#39;radio&#39;.</p>\n",
                    "line": 23,
                    "type": "InputComponentType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to 'basic'.\n",
                    "description": "<p>Add support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to &#39;basic&#39;.</p>\n",
                    "line": 42,
                    "type": "InputComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an click event for the input.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits an click event for the input.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 48,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.\n",
                    "description": "<p>Handles event change for the component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for handling input elements such as checkboxes and radio buttons.</p>\n",
            "rawdescription": "\n\nComponent for handling input elements such as checkboxes and radio buttons.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n/** The variant for the component. Default 'basic' is 24px and 'mini' is 16px. */\r\nexport type InputComponentType = 'checkbox' | 'radio';\r\n\r\n/** The variant for the component. Default 'basic' is 24px and 'mini' is 16px. */\r\nexport type InputComponentVariant = 'basic' | 'mini';\r\n\r\n/**\r\n * Component for handling input elements such as checkboxes and radio buttons.\r\n */\r\n@Component({\r\n    selector: 'dd-input',\r\n    templateUrl: './input.component.html',\r\n    styleUrls: ['./input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class InputComponent {\r\n    /**\r\n     * The type of input component.\r\n     * Supports 'checkbox' and 'radio'.\r\n     */\r\n    @Input() type: InputComponentType = 'checkbox';\r\n\r\n    /** Label for the input. */\r\n    @Input() inputLabel?: string;\r\n\r\n    /** Name can be used to define radio button group. */\r\n    @Input() inputName?: string;\r\n\r\n    /** If the input is checked. */\r\n    @Input() checked: boolean = false;\r\n\r\n    /** If the input is disabled. */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * Add support for 24px and 16px checkboxes.\r\n     * The height of the elements are 32px and 24px.\r\n     * Defaults to 'basic'.\r\n     */\r\n    @Input() variant: InputComponentVariant = 'basic';\r\n\r\n    /**\r\n     * Emits an click event for the input.\r\n     * Parent should always handle the event and switch the inputs for the component.\r\n     */\r\n    @Output() private inputClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    readonly uniqueId: string = Math.random().toString(36).substring(2);\r\n\r\n    /**\r\n     * Handles event change for the component.\r\n     * First makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\r\n     * Then outpus the input click event.\r\n     */\r\n    handleChangeEvent(event: any): void {\r\n        // Cancel the assingment of the checked variable in the scope of this component.\r\n        // eslint-disable-next-line eqeqeq\r\n        if (event?.target?.checked != undefined) {\r\n            event.target.checked = this.checked;\r\n        }\r\n\r\n        // Emit the input click event to the parent.\r\n        this.inputClick.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.b-contain *,\r\n.b-contain *::before,\r\n.b-contain *::after {\r\n    box-sizing: content-box !important;\r\n}\r\n\r\n.b-contain input {\r\n    position: absolute;\r\n    z-index: -1;\r\n    opacity: 0;\r\n}\r\n\r\n.b-contain span {\r\n    font-size: 1rem;\r\n    font-family: inherit;\r\n}\r\n\r\n.b-contain {\r\n    display: flex;\r\n    position: relative;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    padding-left: 36px;\r\n    height: 100%;\r\n    min-height: 32px;\r\n}\r\n\r\n.disabled {\r\n    opacity: 0.6 !important;\r\n    label {\r\n        cursor: default !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox'] ~ .b-input {\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 0;\r\n    height: 24px;\r\n    width: 24px;\r\n    transition: background 250ms;\r\n    border: 1px solid;\r\n    border-radius: 6px;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio'] ~ .b-input {\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 0;\r\n    height: 24px;\r\n    width: 24px;\r\n    transition: background 250ms;\r\n    border: 1px solid;\r\n    border-radius: 100%;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n        border-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox'] ~ .b-input::after {\r\n    content: '';\r\n    position: absolute;\r\n    display: none;\r\n    top: 5px;\r\n    left: 9px;\r\n    height: 9px;\r\n    width: 5px;\r\n    border: 1px solid;\r\n    border-width: 0 2px 2px 0;\r\n    transition: background 250ms;\r\n    transform: rotate(45deg);\r\n\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color-contrast('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked:disabled ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio'] ~ .b-input::after {\r\n    content: '';\r\n    position: absolute;\r\n    display: none;\r\n    left: 4px;\r\n    top: 4px;\r\n    width: 16px;\r\n    height: 16px;\r\n    border-radius: 100%;\r\n    transition: background 250ms;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:disabled ~ .b-input::after {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color-contrast('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:disabled:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input:checked ~ .b-input::after {\r\n    display: block;\r\n}\r\n\r\n.b-contain input:not([disabled]):hover ~ .b-input {\r\n    @include hover.hover-transition();\r\n\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-100') !important;\r\n    }\r\n}\r\n\r\n.b-contain input:not([disabled]):focus ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-100') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:disabled ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:disabled ~ .b-input::after {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain .b-input::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    margin-left: -0.85rem;\r\n    margin-top: -0.85rem;\r\n    border-radius: 2rem;\r\n    opacity: 0.6;\r\n    transform: scale(0);\r\n}\r\n\r\n@keyframes b-ripple {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    20% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    100% {\r\n        opacity: 0;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes b-ripple-duplicate {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    30% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    60% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    100% {\r\n        opacity: 0;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.b-contain input + .b-input::before {\r\n    animation: b-ripple 250ms ease-out;\r\n}\r\n\r\n.b-contain input:checked + .b-input::before {\r\n    animation-name: b-ripple-duplicate;\r\n}\r\n\r\n.b-contain .b-input::before {\r\n    visibility: hidden;\r\n}\r\n\r\n.b-contain input:focus + .b-input::before {\r\n    visibility: visible;\r\n}\r\n\r\n.b-contain:first-child .b-input::before {\r\n    visibility: hidden;\r\n}\r\n\r\n.dd-checkbox-basic {\r\n    min-height: 32px !important;\r\n}\r\n// Add support for mini inputs.\r\n.dd-checkbox-mini {\r\n    min-height: 24px !important;\r\n\r\n    .b-contain {\r\n        padding-left: 26px;\r\n        min-height: 24px;\r\n    }\r\n\r\n    .b-contain span {\r\n        // This should match input height.\r\n        line-height: 16px;\r\n    }\r\n\r\n    .b-contain {\r\n        input[type='checkbox'] ~ .b-input {\r\n            top: 3px;\r\n            height: 16px;\r\n            width: 16px;\r\n\r\n            &::after {\r\n                top: 3px;\r\n                left: 6px;\r\n                height: 6px;\r\n                width: 3px;\r\n            }\r\n        }\r\n\r\n        input[type='radio'] ~ .b-input {\r\n            top: 3px;\r\n            height: 16px;\r\n            width: 16px;\r\n\r\n            &::after {\r\n                left: 3px;\r\n                top: 3px;\r\n                width: 10px;\r\n                height: 10px;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div fxLayoutAlign=\"center center\" [ngClass]=\"{'dd-checkbox-basic': variant === 'basic',  'dd-checkbox-mini': variant === 'mini', 'disabled': disabled }\">\r\n    <label class=\"b-contain\" [id]=\"uniqueId\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <div [ngClass]=\"{'dd-primary-400-fg': disabled}\">{{inputLabel}}</div>\r\n        <input [type]=\"type\" [name]=\"inputName\" [checked]=\"checked\" [attr.disabled]=\"disabled ? true : null\" (change)=\"handleChangeEvent($event)\">\r\n        <div class=\"b-input\"></div>\r\n    </label>\r\n</div>\r\n"
        },
        {
            "name": "InputContentComponent",
            "id": "component-InputContentComponent-2445935503ffe9f81680b9acabd9e0bdfdc0e1825d98721a245d07106107d743f81e22b652839d4b4928576e7cdc4f2dd56e00b777b0431b1ab3a412fc14281f",
            "file": "projects/digital-delights-library/src/input/components/input-content/input-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-input-content",
            "styleUrls": [
                "../input/input.component.scss",
                "./input-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cursor",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the content uses cursor: pointer. Reasons for having this as default would be\n e.g content including a link that needs to be differentiated from rest of the text. Cursor: pointer indicates more clearly that whole\ncontent is clickable.",
                    "description": "<p>If the content uses cursor: pointer. Reasons for having this as default would be\n e.g content including a link that needs to be differentiated from rest of the text. Cursor: pointer indicates more clearly that whole\ncontent is clickable.</p>\n",
                    "line": 32,
                    "type": "\"pointer\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName can be used to define radio button group.",
                    "description": "<p>Name can be used to define radio button group.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of input component.\nSupports 'checkbox' and 'radio'.\nDefaults to 'checkbox'.\n",
                    "description": "<p>The type of input component.\nSupports &#39;checkbox&#39; and &#39;radio&#39;.\nDefaults to &#39;checkbox&#39;.</p>\n",
                    "line": 18,
                    "type": "InputComponentType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to 'basic'.\n",
                    "description": "<p>Add support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to &#39;basic&#39;.</p>\n",
                    "line": 39,
                    "type": "InputComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a click event for the input content.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits a click event for the input content.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the input content component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outputs the input click event.\n",
                    "description": "<p>Handles event change for the input content component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outputs the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for handling the content of input elements such as checkboxes and radio buttons.</p>\n",
            "rawdescription": "\n\nComponent for handling the content of input elements such as checkboxes and radio buttons.\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { InputComponentType, InputComponentVariant } from '../input/input.component';\r\n\r\n/**\r\n * Component for handling the content of input elements such as checkboxes and radio buttons.\r\n */\r\n@Component({\r\n    selector: 'dd-input-content',\r\n    templateUrl: './input-content.component.html',\r\n    styleUrls: ['../input/input.component.scss', './input-content.component.scss'],\r\n})\r\nexport class InputContentComponent {\r\n    /**\r\n     * The type of input component.\r\n     * Supports 'checkbox' and 'radio'.\r\n     * Defaults to 'checkbox'.\r\n     */\r\n    @Input() type: InputComponentType = 'checkbox';\r\n\r\n    /** Name can be used to define radio button group. */\r\n    @Input() inputName?: string;\r\n\r\n    /** If the input is checked. */\r\n    @Input() checked: boolean = false;\r\n\r\n    /** If the input is disabled. */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /** If the content uses cursor: pointer. Reasons for having this as default would be\r\n     *  e.g content including a link that needs to be differentiated from rest of the text. Cursor: pointer indicates more clearly that whole\r\n     * content is clickable.  */\r\n    @Input() cursor?: 'pointer' | 'default' = 'default';\r\n\r\n    /**\r\n     * Add support for 24px and 16px checkboxes.\r\n     * The height of the elements are 32px and 24px.\r\n     * Defaults to 'basic'.\r\n     */\r\n    @Input() variant: InputComponentVariant = 'basic';\r\n\r\n    /**\r\n     * Emits a click event for the input content.\r\n     * Parent should always handle the event and switch the inputs for the component.\r\n     */\r\n    @Output() private inputClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    readonly uniqueId: string = Math.random().toString(36).substring(2);\r\n\r\n    /**\r\n     * Handles event change for the input content component.\r\n     * First makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\r\n     * Then outputs the input click event.\r\n     */\r\n    handleChangeEvent(event: any): void {\r\n        // Cancel the assignment of the checked variable in the scope of this component.\r\n        // eslint-disable-next-line eqeqeq\r\n        if (event?.target?.checked != undefined) {\r\n            event.target.checked = this.checked;\r\n        }\r\n\r\n        // Emit the input click event to the parent.\r\n        this.inputClick.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.b-contain *,\r\n.b-contain *::before,\r\n.b-contain *::after {\r\n    box-sizing: content-box !important;\r\n}\r\n\r\n.b-contain input {\r\n    position: absolute;\r\n    z-index: -1;\r\n    opacity: 0;\r\n}\r\n\r\n.b-contain span {\r\n    font-size: 1rem;\r\n    font-family: inherit;\r\n}\r\n\r\n.b-contain {\r\n    display: flex;\r\n    position: relative;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    padding-left: 36px;\r\n    height: 100%;\r\n    min-height: 32px;\r\n}\r\n\r\n.disabled {\r\n    opacity: 0.6 !important;\r\n    label {\r\n        cursor: default !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox'] ~ .b-input {\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 0;\r\n    height: 24px;\r\n    width: 24px;\r\n    transition: background 250ms;\r\n    border: 1px solid;\r\n    border-radius: 6px;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio'] ~ .b-input {\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 0;\r\n    height: 24px;\r\n    width: 24px;\r\n    transition: background 250ms;\r\n    border: 1px solid;\r\n    border-radius: 100%;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n        border-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox'] ~ .b-input::after {\r\n    content: '';\r\n    position: absolute;\r\n    display: none;\r\n    top: 5px;\r\n    left: 9px;\r\n    height: 9px;\r\n    width: 5px;\r\n    border: 1px solid;\r\n    border-width: 0 2px 2px 0;\r\n    transition: background 250ms;\r\n    transform: rotate(45deg);\r\n\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color-contrast('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked:disabled ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio'] ~ .b-input::after {\r\n    content: '';\r\n    position: absolute;\r\n    display: none;\r\n    left: 4px;\r\n    top: 4px;\r\n    width: 16px;\r\n    height: 16px;\r\n    border-radius: 100%;\r\n    transition: background 250ms;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:disabled ~ .b-input::after {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color-contrast('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:disabled:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input:checked ~ .b-input::after {\r\n    display: block;\r\n}\r\n\r\n.b-contain input:not([disabled]):hover ~ .b-input {\r\n    @include hover.hover-transition();\r\n\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-100') !important;\r\n    }\r\n}\r\n\r\n.b-contain input:not([disabled]):focus ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-100') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='checkbox']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('accent') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:checked ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:disabled ~ .b-input {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain input[type='radio']:disabled ~ .b-input::after {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-200') !important;\r\n    }\r\n}\r\n\r\n.b-contain .b-input::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    margin-left: -0.85rem;\r\n    margin-top: -0.85rem;\r\n    border-radius: 2rem;\r\n    opacity: 0.6;\r\n    transform: scale(0);\r\n}\r\n\r\n@keyframes b-ripple {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    20% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    100% {\r\n        opacity: 0;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes b-ripple-duplicate {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    30% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    60% {\r\n        transform: scale(1);\r\n    }\r\n\r\n    100% {\r\n        opacity: 0;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.b-contain input + .b-input::before {\r\n    animation: b-ripple 250ms ease-out;\r\n}\r\n\r\n.b-contain input:checked + .b-input::before {\r\n    animation-name: b-ripple-duplicate;\r\n}\r\n\r\n.b-contain .b-input::before {\r\n    visibility: hidden;\r\n}\r\n\r\n.b-contain input:focus + .b-input::before {\r\n    visibility: visible;\r\n}\r\n\r\n.b-contain:first-child .b-input::before {\r\n    visibility: hidden;\r\n}\r\n\r\n.dd-checkbox-basic {\r\n    min-height: 32px !important;\r\n}\r\n// Add support for mini inputs.\r\n.dd-checkbox-mini {\r\n    min-height: 24px !important;\r\n\r\n    .b-contain {\r\n        padding-left: 26px;\r\n        min-height: 24px;\r\n    }\r\n\r\n    .b-contain span {\r\n        // This should match input height.\r\n        line-height: 16px;\r\n    }\r\n\r\n    .b-contain {\r\n        input[type='checkbox'] ~ .b-input {\r\n            top: 3px;\r\n            height: 16px;\r\n            width: 16px;\r\n\r\n            &::after {\r\n                top: 3px;\r\n                left: 6px;\r\n                height: 6px;\r\n                width: 3px;\r\n            }\r\n        }\r\n\r\n        input[type='radio'] ~ .b-input {\r\n            top: 3px;\r\n            height: 16px;\r\n            width: 16px;\r\n\r\n            &::after {\r\n                left: 3px;\r\n                top: 3px;\r\n                width: 10px;\r\n                height: 10px;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "../input/input.component.scss"
                },
                {
                    "data": ":host {\r\n    width: 100%;\r\n}\r\n\r\n// Span for radio inputs should be centered also when there are multiple lines\r\n.b-contain input[type='radio'] ~ .b-input {\r\n    top: auto;\r\n}\r\n\r\n// Align input element with b-input\r\n.b-contain input[type='checkbox'] {\r\n    top: 4px;\r\n}\r\n\r\n// Overriding some properties from input.component.scss to keep styling while making only input clickable.\r\n.b-contain input {\r\n    z-index: 1;\r\n    left: 0;\r\n    height: 25px;\r\n    width: 25px;\r\n    cursor: pointer;\r\n}\r\n\r\n.b-contain {\r\n    &:not(.pointer) {\r\n        cursor: default;\r\n    }\r\n}\r\n",
                    "styleUrl": "./input-content.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"cursor-pointer\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n     [ngClass]=\"{'dd-checkbox-basic': variant === 'basic', 'dd-checkbox-mini': variant === 'mini' }\">\r\n    <div class=\"w-100-p\">\r\n        <label class=\"w-100-p\">\r\n            <div fxFlex=\"100\" class=\"b-contain {{cursor}}\" [id]=\"uniqueId\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <span class=\"dd-input-content-area w-100-p\" fxFlex=\"100\" fxLayout=\"column\" [ngClass]=\"{'disabled': disabled}\">\r\n                    <ng-content></ng-content>\r\n                </span>\r\n                <input [type]=\"type\" [name]=\"inputName || ''\" [checked]=\"checked\" [attr.disabled]=\"disabled ? true : null\" (change)=\"handleChangeEvent($event)\">\r\n                <div class=\"b-input\"></div>\r\n            </div>\r\n        </label>\r\n    </div>\r\n    <ng-content select=\"[additionalContent]\"></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "LoaderOverlayComponent",
            "id": "component-LoaderOverlayComponent-880980a65e7ce2c5b2781d2cc5e21e754f5e765064aba15ba709060baac8cf819b970c115362723028673d490ac2dc879f20a6c8d27283adf07169d8705c153e",
            "file": "projects/digital-delights-library/src/loader/components/loader-overlay/loader-overlay.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-overlay",
            "styleUrls": [
                "./loader-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white-bg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the background color for the overlay.\n",
                    "description": "<p>Defines the background color for the overlay.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "diameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.\n",
                    "description": "<p>Defines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.</p>\n",
                    "line": 30,
                    "type": "LoaderSpinnerSizes",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "spinnerContainerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows user to define a custom class for the spinner container.\n",
                    "description": "<p>Allows user to define a custom class for the spinner container.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a text under the loader spinner.\nUsed mainly for giving user info what is going on.\n",
                    "description": "<p>Adds a text under the loader spinner.\nUsed mainly for giving user info what is going on.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for displaying a loading overlay with a spinner and optional text.</p>\n",
            "rawdescription": "\n\nComponent for displaying a loading overlay with a spinner and optional text.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { LoaderSpinnerSizes } from '../loader-spinner/loader-spinner.component';\r\n\r\n/**\r\n * Component for displaying a loading overlay with a spinner and optional text.\r\n */\r\n@Component({\r\n    selector: 'dd-loader-overlay',\r\n    templateUrl: './loader-overlay.component.html',\r\n    styleUrls: ['./loader-overlay.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoaderOverlayComponent {\r\n    /**\r\n     * Determines if the spinner is shown.\r\n     * If false then renders the content with ng-content.\r\n     */\r\n    @Input() loading: boolean = false;\r\n\r\n    /**\r\n     * Adds a text under the loader spinner.\r\n     * Used mainly for giving user info what is going on.\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * Defines the diameter for the loader element.\r\n     * Supports the spacer element sizes and 128px for extra big loaders.\r\n     */\r\n    @Input() diameter?: LoaderSpinnerSizes;\r\n\r\n    /**\r\n     * Allows user to define a custom class for the spinner container.\r\n     */\r\n    @Input() spinnerContainerClass?: string;\r\n\r\n    /**\r\n     * Defines the background color for the overlay.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white-bg';\r\n\r\n    /**\r\n     * Calculate the border size, the original spinner had 120px height and width and 16px borders.\r\n     */\r\n    get loaderBorderSizes(): { [klass: string]: any } {\r\n        if (!this.diameter) {\r\n            return {};\r\n        }\r\n\r\n        const borderSize: number = this.diameter / 8;\r\n\r\n        return {\r\n            'border-width': `${borderSize}px`,\r\n            width: `${this.diameter}px`,\r\n            height: `${this.diameter}px`,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n\r\n    .dd-loading-container {\r\n        position: relative;\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        .dd-loading-overlay {\r\n            display: flex;\r\n            opacity: 0.9;\r\n            position: absolute;\r\n            height: 100%;\r\n            width: 100%;\r\n            left: 0;\r\n            top: 0;\r\n            z-index: 980;\r\n            cursor: progress;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./loader-overlay.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "loaderBorderSizes": {
                    "name": "loaderBorderSizes",
                    "getSignature": {
                        "name": "loaderBorderSizes",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 45,
                        "rawdescription": "\n\nCalculate the border size, the original spinner had 120px height and width and 16px borders.\n",
                        "description": "<p>Calculate the border size, the original spinner had 120px height and width and 16px borders.</p>\n"
                    }
                }
            },
            "templateData": "<div [ngClass]=\"{'dd-loading-container': loading && diameter}\">\r\n    <div *ngIf=\"loading && diameter\" class=\"dd-loading-overlay {{backgroundColor}}\">\r\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\r\n            <dd-loader-spinner [loading]=\"true\" [diameter]=\"diameter\" [containerClass]=\"spinnerContainerClass\"></dd-loader-spinner>\r\n            <p *ngIf=\"text\">\r\n                {{text}}\r\n            </p>\r\n        </div>\r\n    </div>\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "LoaderPageComponent",
            "id": "component-LoaderPageComponent-73d30d125fdd2b239904b0fbe3538df49a55e480e16eaecebbfd427da7d626f343ece2fd41e01f6b4018501d8b695e7021c249f121822d43d6e781e2587ee19d",
            "file": "projects/digital-delights-library/src/loader/components/loader-page/loader-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-page",
            "styleUrls": [
                "./loader-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultDiameter",
                    "defaultValue": "64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderSpinnerSizes",
                    "optional": false,
                    "description": "<p>Defines the 64px diameter for the loader element.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nDefines the 64px diameter for the loader element.\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { LoaderSpinnerSizes } from '../loader-spinner/loader-spinner.component';\r\n\r\n@Component({\r\n    selector: 'dd-loader-page',\r\n    templateUrl: './loader-page.component.html',\r\n    styleUrls: ['./loader-page.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoaderPageComponent {\r\n    /**\r\n     * Determines if the spinner is shown.\r\n     * If false then renders the content with ng-content.\r\n     */\r\n    @Input() loading: boolean = false;\r\n\r\n    /**\r\n     * Defines the 64px diameter for the loader element.\r\n     */\r\n    readonly defaultDiameter: LoaderSpinnerSizes = 64;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/variables/opacity';\r\n\r\n.dd-loading-page {\r\n    display: block;\r\n    // Loader position should be fixed so it will always fill the whole page.\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 9999999;\r\n    pointer-events: auto;\r\n    overflow: hidden;\r\n    cursor: progress;\r\n\r\n    @include themify.dd-themify() {\r\n        // Define the background color here so the opacity is only in the color, not the whole element.\r\n        background: themify.dd-color('white', opacity.$opacity-button-medium) !important;\r\n    }\r\n}\r\n",
                    "styleUrl": "./loader-page.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"loading\">\r\n    <div class=\"dd-loading-page\">\r\n        <div class=\"h-100-p\" fxFill fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n            <div class=\"dd-white-bg w-140 h-140 border-radius-8 elevation-05\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                <dd-loader-spinner [loading]=\"true\" [diameter]=\"defaultDiameter\"></dd-loader-spinner>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "LoaderSpinnerComponent",
            "id": "component-LoaderSpinnerComponent-1ffe064f943db6e83acdde337de69f127e6965fab57cdcf1b7338af45e36823c669d1a27396d516a08eb4631202b5330eed7bd8b73e8fdba1550b68a9af4ca43",
            "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-spinner",
            "styleUrls": [
                "./loader-spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "containerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows user to define a custom class for the spinner container.\n",
                    "description": "<p>Allows user to define a custom class for the spinner container.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "diameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.\n",
                    "description": "<p>Defines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.</p>\n",
                    "line": 26,
                    "type": "LoaderSpinnerSizes",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow defining the variant colors for the spinner.\n",
                    "description": "<p>Allow defining the variant colors for the spinner.</p>\n",
                    "line": 36,
                    "type": "\"secondary\" | \"primary\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Defines a spinner loader component that allows fast and easy usage of a loader.</p>\n",
            "rawdescription": "\n\nDefines a spinner loader component that allows fast and easy usage of a loader.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n/** Defines the spinner sizes for loaders. */\r\nexport type LoaderSpinnerSizes = 16 | 24 | 32 | 36 | 48 | 64 | 128;\r\n\r\n/**\r\n * Defines a spinner loader component that allows fast and easy usage of a loader.\r\n */\r\n@Component({\r\n    selector: 'dd-loader-spinner',\r\n    templateUrl: './loader-spinner.component.html',\r\n    styleUrls: ['./loader-spinner.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoaderSpinnerComponent {\r\n    /**\r\n     * Determines if the spinner is shown.\r\n     * If false then renders the content with ng-content.\r\n     */\r\n    @Input() loading: boolean = false;\r\n\r\n    /**\r\n     * Defines the diameter for the loader element.\r\n     * Supports the spacer element sizes and 128px for extra big loaders.\r\n     */\r\n    @Input() diameter?: LoaderSpinnerSizes;\r\n\r\n    /**\r\n     * Allows user to define a custom class for the spinner container.\r\n     */\r\n    @Input() containerClass?: string;\r\n\r\n    /**\r\n     * Allow defining the variant colors for the spinner.\r\n     */\r\n    @Input() variant: 'secondary' | 'primary' = 'secondary';\r\n\r\n    /**\r\n     * Calculate the border size, the original spinner had 120px height and width and 16px borders.\r\n     */\r\n    get loaderBorderSizes(): { [klass: string]: any } {\r\n        if (!this.diameter) {\r\n            return {};\r\n        }\r\n\r\n        const borderSize: number = this.diameter / 8;\r\n\r\n        return {\r\n            'border-width': `${borderSize}px`,\r\n            width: `${this.diameter}px`,\r\n            height: `${this.diameter}px`,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n}\r\n\r\n.loader {\r\n    @include themify.dd-themify() {\r\n        &.secondary {\r\n            border-color: themify.dd-color('primary-100');\r\n            border-top-color: themify.dd-color('accent');\r\n        }\r\n\r\n        &.primary {\r\n            border-color: themify.dd-color('white');\r\n            border-top-color: themify.dd-color('primary-300');\r\n        }\r\n    }\r\n\r\n    border-style: solid;\r\n    border-radius: 50%;\r\n    animation: spin 1.2s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n",
                    "styleUrl": "./loader-spinner.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "loaderBorderSizes": {
                    "name": "loaderBorderSizes",
                    "getSignature": {
                        "name": "loaderBorderSizes",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 41,
                        "rawdescription": "\n\nCalculate the border size, the original spinner had 120px height and width and 16px borders.\n",
                        "description": "<p>Calculate the border size, the original spinner had 120px height and width and 16px borders.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"loading && diameter; else notLoadingTemplate\">\r\n    <span fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex=\"100\" [attr.class]=\"containerClass\">\r\n        <span class=\"loader {{variant}}\" [ngStyle]=\"loaderBorderSizes\"></span>\r\n    </span>\r\n</ng-container>\r\n<ng-template #notLoadingTemplate>\r\n    <ng-content></ng-content>\r\n</ng-template>"
        },
        {
            "name": "MultiSelectListComponent",
            "id": "component-MultiSelectListComponent-5d3a3fd0a77e531f022b11c3dac8d52859fcbb0471f7031cf894d55bca34f047116e7e75ef205014dd5dcc37155466a21c7fd38dc6b700170b3058570dba6296",
            "file": "projects/digital-delights-library/src/select/components/multi-select-list/multi-select-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-multi-select-list",
            "styleUrls": [
                "./multi-select-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows for use of custom icons.\n",
                    "description": "<p>Allows for use of custom icons.</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of items that are selectable.\n",
                    "description": "<p>List of items that are selectable.</p>\n",
                    "line": 22,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel to be shown if used in a form.\n",
                    "description": "<p>Label to be shown if used in a form.</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multipleSelectionText",
                    "defaultValue": "'selected'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText that is shown when there are multiple selected.\nAppends the count before this text item.\n",
                    "description": "<p>Text that is shown when there are multiple selected.\nAppends the count before this text item.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the search is enabled.\n",
                    "description": "<p>If the search is enabled.</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchNoResultsMessage",
                    "defaultValue": "'No results'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows text if search does not have any results.\n",
                    "description": "<p>Shows text if search does not have any results.</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchPlaceHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlaceholder for the search.\n",
                    "description": "<p>Placeholder for the search.</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of selected items.\n",
                    "description": "<p>List of selected items.</p>\n",
                    "line": 27,
                    "type": "(string | number)[]",
                    "decorators": []
                },
                {
                    "name": "selectText",
                    "defaultValue": "'Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to be shown when there is no selected item.\n",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs which list item was clicked and the whole list.\n",
                    "description": "<p>Outputs which list item was clicked and the whole list.</p>\n",
                    "line": 70,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "<p>Reference to the opened modal.</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nReference to the opened modal.\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\r\nimport { OverlayOpenModel, OverlayService } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { Subject } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\nimport { SelectItem, SelectListModel } from '../../select-models';\r\nimport { SelectMenuComponent, SelectMenuOutput } from '../select-menu/select-menu.component';\r\n\r\n@Component({\r\n    selector: 'dd-multi-select-list',\r\n    templateUrl: './multi-select-list.component.html',\r\n    styleUrls: ['./multi-select-list.component.scss'],\r\n})\r\nexport class MultiSelectListComponent implements OnDestroy {\r\n    constructor(private overlayService: OverlayService) {}\r\n    /**\r\n     * Label to be shown if used in a form.\r\n     */\r\n    @Input() label?: string;\r\n    /**\r\n     * List of items that are selectable.\r\n     */\r\n    @Input() items: SelectItem<any>[] = [];\r\n\r\n    /**\r\n     * List of selected items.\r\n     */\r\n    @Input() selected?: (string | number)[];\r\n\r\n    /**\r\n     * Text to be shown when there is no selected item.\r\n     */\r\n    @Input() selectText: string = 'Select';\r\n\r\n    /**\r\n     * Text that is shown when there are multiple selected.\r\n     * Appends the count before this text item.\r\n     */\r\n    @Input() multipleSelectionText: string = 'selected';\r\n\r\n    /**\r\n     * If the search is enabled.\r\n     */\r\n    @Input() searchEnabled: boolean = false;\r\n\r\n    /**\r\n     * Placeholder for the search.\r\n     */\r\n    @Input() searchPlaceHolder: string = '';\r\n\r\n    /**\r\n     * Shows text if search does not have any results.\r\n     */\r\n    @Input() searchNoResultsMessage: string = 'No results';\r\n\r\n    /**\r\n     * Allows for use of custom icons.\r\n     */\r\n    @Input() icon?: string = 'dd-icon-arrow-down';\r\n\r\n    /**\r\n     * If you are using the element on different background color than white, you can change the background color of the input.\r\n     * Use color classes that define both background and font color from the library.\r\n     * Default is white background, with white some fonts are using lighter gray color than the contrast is.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    /**\r\n     * Outputs which list item was clicked and the whole list.\r\n     */\r\n    @Output() itemClick: EventEmitter<[SelectItem<any>, (string | number)[]]> = new EventEmitter();\r\n\r\n    /**\r\n     * Reference to the opened modal.\r\n     */\r\n    overlayModel?: OverlayOpenModel<SelectMenuComponent>;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    get anchorText(): string | number {\r\n        if (this.selected === null || this.selected === undefined) {\r\n            return this.selectText;\r\n        }\r\n\r\n        // If there are multiple selections made then we need to show it.\r\n        if (this.selected && this.selected.length > 1) {\r\n            return `${this.selected.length} ${this.multipleSelectionText}`;\r\n        }\r\n\r\n        return this.items.find((x) => this.selected?.some((y) => x.id === y))?.text ?? this.selectText;\r\n    }\r\n\r\n    /** Completes the exposed subject. */\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next(undefined);\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    onAnchorClick(element: HTMLDivElement): void {\r\n        // Close existing overlay\r\n        if (!!this.overlayModel) {\r\n            this.closeMenu();\r\n            return;\r\n        }\r\n\r\n        const widthOfMenuelement: number = element.offsetWidth;\r\n\r\n        const data: SelectListModel = {\r\n            items: this.items,\r\n            selected: this.selected,\r\n            searchEnabled: this.searchEnabled,\r\n            searchNoResultsMessage: this.searchNoResultsMessage,\r\n            searchPlaceholder: this.searchPlaceHolder,\r\n            variant: 'basic',\r\n        };\r\n\r\n        const config = this.overlayService.getConnectedToConfig<SelectListModel>(element, '.dd-select-menu', data);\r\n\r\n        if (config.overlayConfig) {\r\n            config.overlayConfig.minWidth = widthOfMenuelement;\r\n            config.closeOnOutsidePointerEvents = true;\r\n        }\r\n\r\n        this.overlayModel = this.overlayService.open(SelectMenuComponent, config);\r\n\r\n        this.overlayModel.component.itemClick\r\n            .pipe(\r\n                takeUntil(this._unsubscribeAllSubject) //\r\n            )\r\n            .subscribe((selection: SelectMenuOutput) => {\r\n                this.itemClick.emit(selection);\r\n            });\r\n\r\n        this.overlayModel.overlayRef\r\n            .detachments()\r\n            .pipe(\r\n                // Add delay so when clicking anchor (that is outside event) the anchor click happens first and doesnt open a new overlay.\r\n                delay(1),\r\n                take(1),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n            });\r\n    }\r\n\r\n    /** Helper function to get rid of things. */\r\n    private closeMenu(): void {\r\n        this.overlayModel?.close();\r\n        delete this.overlayModel;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.with-label {\r\n    position: relative;\r\n}\r\n\r\n.dd-select-anchor {\r\n    @include themify.dd-themify() {\r\n        height: themify.dd-configuration('inputs', default-size) !important;\r\n    }\r\n\r\n    &:hover {\r\n        @include themify.dd-themify() {\r\n            border-color: themify.dd-color('primary-600') !important;\r\n        }\r\n    }\r\n\r\n    label {\r\n        position: absolute;\r\n        left: 9px;\r\n        z-index: 2;\r\n        font-size: 12px;\r\n        line-height: 11px;\r\n        background-color: inherit;\r\n        padding: 0 4px;\r\n        // Make the label only the half of the actual height\r\n        // Align content so text is rendered from the bottom\r\n        // Move 1 px up to go over the border.\r\n        height: 6px;\r\n        top: -1px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n    }\r\n\r\n    &:active,\r\n    &:focus,\r\n    &.open {\r\n        @include themify.dd-themify() {\r\n            border-color: themify.dd-color('accent') !important;\r\n        }\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n\r\n.basic-variant {\r\n    min-width: 224px;\r\n}\r\n",
                    "styleUrl": "./multi-select-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "anchorText": {
                    "name": "anchorText",
                    "getSignature": {
                        "name": "anchorText",
                        "type": "",
                        "returnType": "string | number",
                        "line": 79
                    }
                }
            },
            "templateData": "<div #selectAnchor class=\"dd-select-anchor border dd-primary-200-border border-radius-6 cursor-pointer basic-variant\"\r\n     [ngClass]=\"{'open': !!overlayModel, 'with-label': label}\" fxLayoutAlign=\"start center\" (click)=\"onAnchorClick(selectAnchor)\">\r\n\r\n    <label class=\"{{backgroundColor}}\" [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\"><span>{{ label }}</span></label>\r\n\r\n    <div class=\"{{backgroundColor}} w-100-p ml-spacer-mini mr-spacer-xmini subtitle\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        {{anchorText}}\r\n        <ng-container *ngIf=\"!!overlayModel; else menuClosedIconTemplate\">\r\n            <dd-icon [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" [icon]=\"'dd-icon-arrow-up'\"></dd-icon>\r\n        </ng-container>\r\n        <ng-template #menuClosedIconTemplate>\r\n            <dd-icon [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" [icon]=\"icon\"></dd-icon>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-8362ceaa7f3d483d579d53fa7379ebe1b4458092a7ed9bca8f389323907e0d74f5b47261685bd5c1ccfe38bd520caec3e2b243bb8abb9e7346fdabcffae719c5",
            "file": "projects/digital-delights-library/src/navigation/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "favoriteNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItems marked as favorites from the sidebar.\n",
                    "description": "<p>Items marked as favorites from the sidebar.</p>\n",
                    "line": 48,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "hideSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the side bar should be hidden.\nFor instance, some projects might want to hide the whole sidebar if user is not logged in.\n",
                    "description": "<p>If the side bar should be hidden.\nFor instance, some projects might want to hide the whole sidebar if user is not logged in.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigational items for sidebar.\n",
                    "description": "<p>Navigational items for sidebar.</p>\n",
                    "line": 43,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "topbarConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe full configuration for rendering different parts of the top bar.\n",
                    "description": "<p>The full configuration for rendering different parts of the top bar.</p>\n",
                    "line": 53,
                    "type": "TopbarConfiguration",
                    "decorators": []
                },
                {
                    "name": "useCustomNavigation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis switch indicates if the solution should use Design library's side navigation or a custom one.\nThe menu button is shown always when using custom navigation.\n\nNOTE: This should be used only during migration for applications that have custom navigation.\n",
                    "description": "<p>This switch indicates if the solution should use Design library&#39;s side navigation or a custom one.\nThe menu button is shown always when using custom navigation.</p>\n<p>NOTE: This should be used only during migration for applications that have custom navigation.</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 82,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event when menu button is clicked.\n",
                    "description": "<p>Output event when menu button is clicked.</p>\n",
                    "line": 72,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 77,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "fullWidthBreakpoint",
                    "defaultValue": "DdBreakPointsEnum['lt-sm']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lockedOpenBreakpoint",
                    "defaultValue": "DdBreakPointsEnum['gt-lg']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Breakpoint where the navigation should be locked open.</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nBreakpoint where the navigation should be locked open.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "sidebarBackDrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarFullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarLockedOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "sidebarOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the sidebar\n",
                    "description": "<p>Close the sidebar</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the backdrop\n",
                    "description": "<p>Hide the backdrop</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen the sidebar\n",
                    "description": "<p>Open the sidebar</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the backdrop\n",
                    "description": "<p>Show the backdrop</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleSidebarOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { Component, ElementRef, EventEmitter, Input, OnDestroy, Output, Renderer2 } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { Subject, debounceTime, filter, takeUntil } from 'rxjs';\r\nimport { DdBreakPointsEnum, NavigationItem } from '../../models/navigation-models';\r\nimport { TopbarConfiguration } from '../toolbar-top/toolbar-top.component';\r\n\r\n@Component({\r\n    selector: 'dd-navigation',\r\n    templateUrl: './navigation.component.html',\r\n    styleUrls: ['./navigation.component.scss'],\r\n})\r\nexport class NavigationComponent implements OnDestroy {\r\n    constructor(breakpointObserver: BreakpointObserver, private renderer: Renderer2, private elementRef: ElementRef, router: Router) {\r\n        breakpointObserver\r\n            .observe([this.lockedOpenBreakpoint, this.fullWidthBreakpoint])\r\n            .pipe(debounceTime(50), takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe((state: BreakpointState) => {\r\n                this.sidebarLockedOpen = !!state.breakpoints[this.lockedOpenBreakpoint];\r\n                this.sidebarFullWidth = !!state.breakpoints[this.fullWidthBreakpoint];\r\n\r\n                if (this.sidebarLockedOpen) {\r\n                    this.openSidebar();\r\n                }\r\n            });\r\n\r\n        // Close the sidebar on navigation if it's open and is not locked open.\r\n        router.events\r\n            .pipe(\r\n                filter((x) => x instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                if (!this.sidebarLockedOpen && this.sidebarOpen) {\r\n                    this.closeSidebar();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Navigational items for sidebar.\r\n     */\r\n    @Input() navigation?: NavigationItem[];\r\n\r\n    /**\r\n     * Items marked as favorites from the sidebar.\r\n     */\r\n    @Input() favoriteNavigation?: NavigationItem[];\r\n\r\n    /**\r\n     * The full configuration for rendering different parts of the top bar.\r\n     */\r\n    @Input() topbarConfiguration?: TopbarConfiguration;\r\n\r\n    /**\r\n     * If the side bar should be hidden.\r\n     * For instance, some projects might want to hide the whole sidebar if user is not logged in.\r\n     */\r\n    @Input() hideSidebar: boolean = false;\r\n\r\n    /**\r\n     * This switch indicates if the solution should use Design library's side navigation or a custom one.\r\n     * The menu button is shown always when using custom navigation.\r\n     *\r\n     * NOTE: This should be used only during migration for applications that have custom navigation.\r\n     */\r\n    @Input() useCustomNavigation: boolean = false;\r\n\r\n    /**\r\n     * Output event when menu button is clicked.\r\n     */\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    /**\r\n     * Click event for the navigation items. For instance, this is useful for analytics.\r\n     */\r\n    @Output() navigationClick: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Output event that item is marked as favorite.\r\n     */\r\n    @Output() markAsFavorite: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Breakpoint where the navigation should be locked open.\r\n     */\r\n\r\n    private readonly lockedOpenBreakpoint: string = DdBreakPointsEnum['gt-lg'];\r\n\r\n    private readonly fullWidthBreakpoint: string = DdBreakPointsEnum['lt-sm'];\r\n\r\n    sidebarOpen?: boolean;\r\n    sidebarLockedOpen?: boolean;\r\n\r\n    private sidebarFullWidth: boolean = false;\r\n    private sidebarBackDrop?: HTMLElement;\r\n\r\n    /**\r\n     * Unsubscribe subject for handling the subscriptions.\r\n     */\r\n    // eslint-disable-next-line rxjs/no-exposed-subjects\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    /** Completes the exposed subject. */\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next(undefined);\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    toggleSidebarOpen(): void {\r\n        if (this.useCustomNavigation) {\r\n            this.menuClick.next();\r\n        }\r\n\r\n        if (this.sidebarOpen) {\r\n            this.closeSidebar();\r\n        } else {\r\n            this.openSidebar();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close the sidebar\r\n     */\r\n    private closeSidebar(): void {\r\n        if (!this.sidebarOpen || this.sidebarLockedOpen) {\r\n            return;\r\n        }\r\n\r\n        // Hide the backdrop\r\n        this.hideBackdrop();\r\n\r\n        // Set the opened status\r\n        this.sidebarOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Open the sidebar\r\n     */\r\n    private openSidebar(): void {\r\n        if (this.sidebarOpen || this.sidebarLockedOpen) {\r\n            if (this.sidebarLockedOpen) {\r\n                this.hideBackdrop();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Show the backdrop\r\n        this.showBackdrop();\r\n\r\n        // Set the opened status\r\n        this.sidebarOpen = true;\r\n    }\r\n\r\n    /**\r\n     * Show the backdrop\r\n     */\r\n    private showBackdrop(): void {\r\n        if (this.sidebarFullWidth) {\r\n            this.hideBackdrop();\r\n            return;\r\n        }\r\n\r\n        // Create the backdrop element\r\n        this.sidebarBackDrop = this.renderer.createElement('div');\r\n\r\n        // Add a class to the backdrop element\r\n        this.sidebarBackDrop?.classList.add('sidebar-backdrop-overlay');\r\n\r\n        if (this.sidebarBackDrop?.style) {\r\n            this.sidebarBackDrop.style.position = 'fixed';\r\n            this.sidebarBackDrop.style.top = '0';\r\n            this.sidebarBackDrop.style.bottom = '0';\r\n            this.sidebarBackDrop.style.left = '0';\r\n            this.sidebarBackDrop.style.right = '0';\r\n            this.sidebarBackDrop.style.zIndex = '999';\r\n            this.sidebarBackDrop.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';\r\n        }\r\n\r\n        // Append the backdrop to the parent of the sidebar\r\n        this.renderer.appendChild(this.elementRef.nativeElement, this.sidebarBackDrop);\r\n\r\n        // Add an event listener to the overlay\r\n        this.sidebarBackDrop?.addEventListener('click', () => {\r\n            this.closeSidebar();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide the backdrop\r\n     */\r\n    private hideBackdrop(): void {\r\n        if (!this.sidebarBackDrop) {\r\n            return;\r\n        }\r\n\r\n        // Remove the backdrop\r\n        this.renderer?.removeChild(this.elementRef.nativeElement, this.sidebarBackDrop);\r\n        delete this.sidebarBackDrop;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-page-height {\r\n    // Match the size of the header as the top-margin.\r\n    margin-top: 56px;\r\n    // Force page to be at least full height. Minus the top header and some margins from the solution.\r\n    min-height: calc(100vh - 56px);\r\n}\r\n\r\n.sidebar-locked-open {\r\n    padding-left: 320px;\r\n}\r\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"!hideSidebar && !useCustomNavigation\">\r\n    <dd-side-navigation class=\"elevation-03\" [ngClass]=\"{'open': sidebarLockedOpen || sidebarOpen, 'locked-open': sidebarLockedOpen}\" [navigation]=\"navigation\"\r\n                        [favoriteNavigation]=\"favoriteNavigation\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                        (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n        <ng-content select=\"[sidebarHeaderSelector]\"></ng-content>\r\n    </dd-side-navigation>\r\n</ng-container>\r\n\r\n<dd-toolbar-top [configuration]=\"topbarConfiguration\" [hideButton]=\"(hideSidebar || sidebarLockedOpen !== false) && !useCustomNavigation\"\r\n                (menuClick)=\"toggleSidebarOpen()\">\r\n</dd-toolbar-top>\r\n\r\n<div class=\"full-page-height dd-primary-50-bg\" [ngClass]=\"{'sidebar-locked-open': sidebarLockedOpen && !hideSidebar && !useCustomNavigation}\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "NavigationItemCollapsableComponent",
            "id": "component-NavigationItemCollapsableComponent-b29a6d09b52a2f22c0d4c5f4a6a7f4563ff99f7ab9f09a4510eb965c1ccbab1eca549000f3312d3c03809ae58de4f28a4270b8e088b0bf7253e02b6274520c7b",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item-collapsable/navigation-item-collapsable.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item-collapsable",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-item-collapsable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 18,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 28,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "childrenIsActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "classes",
                    "defaultValue": "'nav-collapsable nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.open'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollapse the collapsable navigation\n",
                    "description": "<p>Collapse the collapsable navigation</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExpand the collapsable navigation\n",
                    "description": "<p>Expand the collapsable navigation</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isUrlInChildren",
                    "args": [
                        {
                            "name": "parent",
                            "type": "NavigationItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the given url can be found\nin one of the given parent's children\n",
                    "description": "<p>Check if the given url can be found\nin one of the given parent&#39;s children</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "NavigationItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOpen",
                    "args": [
                        {
                            "name": "ev",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle collapse\n",
                    "description": "<p>Toggle collapse</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'nav-collapsable nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\nimport { Event, NavigationEnd, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { NavigationItem } from '../../models/navigation-models';\r\n\r\n@Component({\r\n    selector: 'dd-navigation-item-collapsable',\r\n    templateUrl: './navigation-item-collapsable.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NavigationItemCollapsableComponent implements OnInit, OnDestroy {\r\n    constructor(private _router: Router) {}\r\n\r\n    /**\r\n     * Contains all the necessary data for rendering a navigation item.\r\n     */\r\n    @Input() item?: NavigationItem;\r\n\r\n    /**\r\n     * Click event for the navigation items. For instance, this is useful for analytics.\r\n     */\r\n    @Output() navigationClick: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Output event that item is marked as favorite.\r\n     */\r\n    @Output() markAsFavorite: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    @HostBinding('class') classes: string = 'nav-collapsable nav-item';\r\n    @HostBinding('class.open') isOpen: boolean = false;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    childrenIsActive: boolean = false;\r\n\r\n    ngOnInit(): void {\r\n        if (!this.item) {\r\n            throw new Error('No @Input item is defined.');\r\n        }\r\n\r\n        // Listen for router events\r\n        this._router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe((event: Event) => {\r\n                if (!this.item) {\r\n                    console.warn('No @Input item is defined.');\r\n                    return;\r\n                }\r\n\r\n                // Check if the url can be found in one of the children of this item\r\n                if (this.isUrlInChildren(this.item, (event as NavigationEnd).urlAfterRedirects)) {\r\n                    this.childrenIsActive = true;\r\n                    this.expand();\r\n                } else {\r\n                    this.childrenIsActive = false;\r\n                    this.collapse();\r\n                }\r\n            });\r\n\r\n        // Check if the url can be found in one of the children of this item\r\n        if (this.isUrlInChildren(this.item, this._router.url)) {\r\n            this.childrenIsActive = true;\r\n            this.expand();\r\n        } else {\r\n            this.childrenIsActive = false;\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next(undefined);\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    /**\r\n     * Toggle collapse\r\n     */\r\n    toggleOpen(ev: MouseEvent): void {\r\n        ev.preventDefault();\r\n\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n\r\n    /**\r\n     * Expand the collapsable navigation\r\n     */\r\n    private expand(): void {\r\n        if (this.isOpen) {\r\n            return;\r\n        }\r\n\r\n        this.isOpen = true;\r\n    }\r\n\r\n    /**\r\n     * Collapse the collapsable navigation\r\n     */\r\n    private collapse(): void {\r\n        if (!this.isOpen) {\r\n            return;\r\n        }\r\n\r\n        this.isOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Check if the given url can be found\r\n     * in one of the given parent's children\r\n     */\r\n    private isUrlInChildren(parent: NavigationItem, url: string): boolean {\r\n        const children: NavigationItem[] | undefined = parent.children;\r\n\r\n        if (!children) {\r\n            return false;\r\n        }\r\n\r\n        for (const child of children) {\r\n            if (child.children) {\r\n                if (this.isUrlInChildren(child, url)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (child.url && (child.url === url || url.includes(child.url))) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"item\">\r\n\r\n    <a class=\"nav-link dd-primary-100-bg-hover\" [ngClass]=\"{'dd-primary-50': isOpen}\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\r\n       (click)=\"toggleOpen($event)\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <div class=\"nav-link-icon\">\r\n                <ng-container *ngIf=\"item.icon\">\r\n                    <dd-icon class=\"dd-primary-400-fg\" [icon]=\"item.icon\" [size]=\"'s-20'\"></dd-icon>\r\n                </ng-container>\r\n            </div>\r\n\r\n            <div [ngClass]=\"{'child-navigation-active': childrenIsActive}\">\r\n                {{ item.title }}\r\n            </div>\r\n        </div>\r\n\r\n        <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n            <dd-icon [icon]=\"isOpen ? 'dd-icon-arrow-up' : 'dd-icon-arrow-down'\"></dd-icon>\r\n        </div>\r\n    </a>\r\n\r\n    <div class=\"children dd-primary-50\" *ngIf=\"isOpen\">\r\n        <ng-container *ngFor=\"let item of item.children\">\r\n            <ng-container *ngIf=\"!item.canNavigate$ || (item.canNavigate$ | async)\">\r\n                <ng-container [ngSwitch]=\"item.type\">\r\n                    <ng-container *ngSwitchCase=\"'title'\">\r\n                        <dd-navigation-item-title [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\" (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n                        </dd-navigation-item-title>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"'collapsable'\">\r\n                        <dd-navigation-item-collapsable [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                                        (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n                        </dd-navigation-item-collapsable>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"'item'\">\r\n                        <dd-navigation-item [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\" (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n                        </dd-navigation-item>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "NavigationItemComponent",
            "id": "component-NavigationItemComponent-ab78b5111ad4dc8343b6fb37145d1701e2c3a93f2fb931729a4b16176e530eb4c016c612698cfdde0efb68b75daafc3e71decf26d3e80efe5fd9620cfa52ccd5",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item/navigation-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item",
            "styleUrls": [
                "./navigation-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isFavoriteList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 15,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 27,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 22,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classes",
                    "defaultValue": "'nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Binds the class of the host element to the component.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nBinds the class of the host element to the component.\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsFavoriteClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStops event propagation and emits the navigationClick event.\nEmits the markAsFavorite event if the item is marked as favorite.\n",
                    "description": "<p>Stops event propagation and emits the navigationClick event.\nEmits the markAsFavorite event if the item is marked as favorite.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBinds the class of the host element to the component.\n",
                    "description": "<p>Binds the class of the host element to the component.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { NavigationItem } from '../../models/navigation-models';\r\n\r\n@Component({\r\n    selector: 'dd-navigation-item',\r\n    templateUrl: './navigation-item.component.html',\r\n    styleUrls: ['./navigation-item.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NavigationItemComponent {\r\n    /**\r\n     * Contains all the necessary data for rendering a navigation item.\r\n     */\r\n    @Input() item?: NavigationItem;\r\n\r\n    @Input() isFavoriteList: boolean = false;\r\n\r\n    /**\r\n     * Click event for the navigation items. For instance, this is useful for analytics.\r\n     */\r\n    @Output() navigationClick: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Output event that item is marked as favorite.\r\n     */\r\n    @Output() markAsFavorite: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Binds the class of the host element to the component.\r\n     */\r\n    @HostBinding('class') classes: string = 'nav-item';\r\n\r\n    /**\r\n     * Stops event propagation and emits the navigationClick event.\r\n     * Emits the markAsFavorite event if the item is marked as favorite.\r\n     */\r\n    markAsFavoriteClick(event: MouseEvent): void {\r\n        if (!this.item) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.markAsFavorite.emit(this.item);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-link {\r\n    .nav-link-favorite {\r\n        display: none;\r\n    }\r\n\r\n    // Show the favorite icon on hover\r\n    &:hover .nav-link-favorite {\r\n        display: inline-block;\r\n\r\n        // Hide the favorite icon on touch devices\r\n        @media (hover: none) {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./navigation-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"item\">\r\n    <a class=\"nav-link\" [routerLink]=\"[item.url]\" [routerLinkActive]=\"['navigation-active']\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\r\n       [ngClass]=\"{'dd-primary-100-bg-hover': !isFavoriteList, 'dd-primary-500 dd-primary-700-hover border-bottom dd-white-border': isFavoriteList}\"\r\n       (click)=\"navigationClick.emit(item)\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <div class=\"nav-link-icon\">\r\n                <ng-container *ngIf=\"item.icon\">\r\n                    <dd-icon class=\"dd-primary-400-fg\" [icon]=\"item.icon\" [size]=\"'s-20'\"></dd-icon>\r\n                </ng-container>\r\n            </div>\r\n\r\n            {{item.title}}\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"isFavoriteList; else elseTemplate\">\r\n            <div class=\"nav-link-favorite dd-primary-600-hover border-radius-6 p-spacer-solo cursor-pointer\" (click)=\"markAsFavoriteClick($event)\">\r\n                <dd-icon [icon]=\"'dd-icon-close'\" [size]=\"'s-16'\"></dd-icon>\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #elseTemplate>\r\n            <ng-container *ngIf=\"!(item.hideFavorite$ | async)\">\r\n                <div class=\"nav-link-favorite dd-primary-300-hover border-radius-6 p-spacer-solo cursor-pointer\" (click)=\"markAsFavoriteClick($event)\">\r\n                    <dd-icon [icon]=\"'dd-icon-check'\" [size]=\"'s-16'\"></dd-icon>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n    </a>\r\n</ng-container>\r\n"
        },
        {
            "name": "NavigationItemTitleComponent",
            "id": "component-NavigationItemTitleComponent-10ebf416faa0d676b4c61c392a91e4de24c146750964569485c6c972e7a2eb1158ad0b818a162435a7e4f9f08a725665bd9999c687ef0ec58d693be2c66f83cf",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item-title/navigation-item-title.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item-title",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-item-title.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 13,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 18,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { NavigationItem } from '../../models/navigation-models';\r\n\r\n@Component({\r\n    selector: 'dd-navigation-item-title',\r\n    templateUrl: './navigation-item-title.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NavigationItemTitleComponent {\r\n    /**\r\n     * Contains all the necessary data for rendering a navigation item.\r\n     */\r\n    @Input() item?: NavigationItem;\r\n\r\n    /**\r\n     * Click event for the navigation items. For instance, this is useful for analytics.\r\n     */\r\n    @Output() navigationClick: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Output event that item is marked as favorite.\r\n     */\r\n    @Output() markAsFavorite: EventEmitter<NavigationItem> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"item\">\r\n    <div class=\"nav-item-title text-body-2 bold mt-spacer-xmini dd-primary-400-fg\">\r\n        {{ item.title }}\r\n    </div>\r\n\r\n    <ng-container *ngFor=\"let item of item.children\">\r\n        <ng-container *ngIf=\"item.type === 'item'\">\r\n            <ng-container *ngIf=\"!item.canNavigate$ || (item.canNavigate$ | async)\">\r\n                <dd-navigation-item [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                    (markAsFavorite)=\"markAsFavorite.emit($event)\"></dd-navigation-item>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-f118df0cda55cc0e2b1b229721133449b6845ab49d84a501cd651343060ae560298312e73faf6f6a97791e5626b024ae43d7110900527ad076045c14a71d8ad8",
            "file": "projects/digital-delights-library/src/notification/components/notification/notification.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDifferent styles for notification.\n'callout' should be used when customer action is required. 'callout' does not support icon.\n",
                    "description": "<p>Different styles for notification.\n&#39;callout&#39; should be used when customer action is required. &#39;callout&#39; does not support icon.</p>\n",
                    "line": 14,
                    "type": "\"error\" | \"info\" | \"success\" | \"callout\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-notification',\r\n    templateUrl: './notification.component.html',\r\n    styleUrls: ['./notification.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NotificationComponent {\r\n    @Input() text?: string;\r\n    /** Different styles for notification.\r\n     * 'callout' should be used when customer action is required. 'callout' does not support icon.\r\n     */\r\n    @Input() type: 'error' | 'info' | 'success' | 'callout' = 'info';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n.info {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('primary-300') !important;\r\n        .badge {\r\n            background-color: themify.dd-color('primary-100') !important;\r\n            color: themify.dd-color('primary-300') !important;\r\n        }\r\n    }\r\n}\r\n\r\n.error {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('danger') !important;\r\n        .badge {\r\n            background-color: themify.dd-color('danger') !important;\r\n            color: themify.dd-color-contrast('danger') !important;\r\n        }\r\n    }\r\n}\r\n\r\n.success {\r\n    @include themify.dd-themify() {\r\n        border-color: themify.dd-color('success') !important;\r\n        .badge {\r\n            background-color: themify.dd-color('success') !important;\r\n            color: themify.dd-color-contrast('success') !important;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"text\">\r\n\r\n    <ng-container *ngIf=\"type === 'callout'; else notificationTemplate\">\r\n        <div class=\"p-spacer-mini dd-callout border-radius-8\">\r\n            <span class=\"text-body-1\">\r\n                {{text}}\r\n            </span>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #notificationTemplate>\r\n\r\n        <div [class]=\"type\" class=\"border border-radius-6 dd-white\">\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\r\n\r\n                <span class=\"badge p-spacer-xmini border-radius-6-left\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <ng-container [ngSwitch]=\"type\">\r\n                        <dd-icon [icon]=\"'dd-icon-error'\" *ngSwitchCase=\"'error'\">\r\n                        </dd-icon>\r\n                        <dd-icon [icon]=\"'dd-icon-warning'\" *ngSwitchCase=\"'info'\">\r\n                        </dd-icon>\r\n                        <dd-icon [icon]=\"'dd-icon-check'\" *ngSwitchCase=\"'success'\">\r\n                        </dd-icon>\r\n                    </ng-container>\r\n                </span>\r\n\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <span class=\"text-body-1 dd-primary-500-fg mx-spacer-mini py-spacer-solo\">\r\n                        {{text}}\r\n                    </span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </ng-template>\r\n</ng-container>\r\n"
        },
        {
            "name": "OverlayBodyComponent",
            "id": "component-OverlayBodyComponent-5717a126a572a5dc4ca7d0689d3eae271a22aa03b7dc70797fb3d68a87a4c3c8722d14bdd00c62797031ec4a3d51470d8a1ad9789318319649067adfb96c40c7",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-body/overlay-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-body",
            "styleUrls": [
                "./overlay-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-body.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px, with 64px padding on the bottom.\nWhen used with variant input 'selection-menu', padding will only apply to bottom.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px, with 64px padding on the bottom.\nWhen used with variant input &#39;selection-menu&#39;, padding will only apply to bottom.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the body.\n'dialog' adds p-24 padding class.\n'selection-menu' adds py-8 padding class to the body.\nDefault is 'dialog'.\n",
                    "description": "<p>Determines the type of padding added to the body.\n&#39;dialog&#39; adds p-24 padding class.\n&#39;selection-menu&#39; adds py-8 padding class to the body.\nDefault is &#39;dialog&#39;.</p>\n",
                    "line": 16,
                    "type": "\"selection-menu\" | \"dialog\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-overlay-body',\r\n    templateUrl: './overlay-body.component.html',\r\n    styleUrls: ['./overlay-body.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OverlayBodyComponent {\r\n    /**\r\n     * Determines the type of padding added to the body.\r\n     * 'dialog' adds p-24 padding class.\r\n     * 'selection-menu' adds py-8 padding class to the body.\r\n     * Default is 'dialog'.\r\n     */\r\n    @Input() variant: 'selection-menu' | 'dialog' = 'dialog';\r\n\r\n    /** False padding is 16px and true is 32px, with 64px padding on the bottom.\r\n     * When used with variant input 'selection-menu', padding will only apply to bottom.\r\n     * Small overlays will often require smaller padding to fit all content */\r\n    @Input() padding?: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    flex: 1 1 100%;\r\n    box-sizing: border-box;\r\n    max-width: 100%;\r\n    overflow: auto;\r\n\r\n    .dd-overlay-body {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n}\r\n",
                    "styleUrl": "./overlay-body.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"dd-overlay-body\"\r\n     [ngClass]=\"{'p-spacer-basic': variant === 'dialog' &&  padding, 'p-spacer-mini': variant === 'dialog' && !padding, 'p-spacer-xmini': variant === 'selection-menu', 'pb-spacer-mega' : padding }\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "OverlayFooterComponent",
            "id": "component-OverlayFooterComponent-a873dfe8ff86a2dedc67b3ca51d8c920c3644fe921a7cf38edf07d03e73a5bc8842d9e966c74db04c2b0279b56bfaf0b7e6d864141b5a7aa1d884cdd4a9082e2",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-footer/overlay-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-footer",
            "styleUrls": [
                "./overlay-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fxLayoutAlign",
                    "defaultValue": "'start center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines how the footer content should be aligned.",
                    "description": "<p>Determines how the footer content should be aligned.</p>\n",
                    "line": 11,
                    "type": "\"end center\" | \"start center\" | \"space-between center\"",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-overlay-footer',\r\n    templateUrl: './overlay-footer.component.html',\r\n    styleUrls: ['./overlay-footer.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OverlayFooterComponent {\r\n    /** Determines how the footer content should be aligned. */\r\n    @Input() fxLayoutAlign: 'end center' | 'start center' | 'space-between center' = 'start center';\r\n\r\n    /** False padding is 16px and true is 32px.\r\n     * Small overlays will often require smaller padding to fit all content */\r\n    @Input() padding?: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./overlay-footer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"border-top w-100-p\" [ngClass]=\"{'p-spacer-basic': padding, 'p-spacer-mini':!padding}\" fxLayout=\"row\" [attr.fxLayoutAlign]=\"fxLayoutAlign\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "OverlayHeaderComponent",
            "id": "component-OverlayHeaderComponent-8c59f3ee64faacec1479a1c419d242145127e19c496d4764b9e1e6e46a825097f54b39f62593b9c2a516f4e33cc1c7bc71e3606ee9c7c62b78af7467953e51bb",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-header/overlay-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-header",
            "styleUrls": [
                "./overlay-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasCloseButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds title to the header.",
                    "description": "<p>Adds title to the header.</p>\n",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideBorder",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'h5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the title.\nSupports plain h5 and h5.caption\n\nDefaults to h5.\n",
                    "description": "<p>Type of the title.\nSupports plain h5 and h5.caption</p>\n<p>Defaults to h5.</p>\n",
                    "line": 19,
                    "type": "\"caption\" | \"h5\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-overlay-header',\r\n    templateUrl: './overlay-header.component.html',\r\n    styleUrls: ['./overlay-header.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OverlayHeaderComponent {\r\n    /** Adds title to the header. */\r\n    @Input() heading?: string;\r\n\r\n    /**\r\n     * Type of the title.\r\n     * Supports plain h5 and h5.caption\r\n     *\r\n     * Defaults to h5.\r\n     */\r\n    @Input() type: 'caption' | 'h5' = 'h5';\r\n\r\n    @Input() hideBorder: boolean = false;\r\n\r\n    /** False padding is 16px and true is 32px.\r\n     * Small overlays will often require smaller padding to fit all content */\r\n    @Input() padding?: boolean = true;\r\n\r\n    @Input() hasCloseButton?: boolean = false;\r\n\r\n    @Output() closeOverlay: EventEmitter<void> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./overlay-header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [ngClass]=\"{'border-bottom': !hideBorder, 'p-spacer-basic': padding, 'p-spacer-mini':!padding}\">\r\n    <div *ngIf=\"heading\" [ngClass]=\"{'caption': type === 'caption', 'h5': type === 'h5'}\">{{heading}}</div>\r\n    <dd-icon *ngIf=\"hasCloseButton\" class=\"cursor-pointer\" [iconAriaLabel]=\"'Close'\" [icon]=\"'dd-icon-close'\" (click)=\"closeOverlay.emit()\">\r\n    </dd-icon>\r\n</div>\r\n"
        },
        {
            "name": "OverlayListActionsComponent",
            "id": "component-OverlayListActionsComponent-5dbcfa071518d567ab224fe0ed928c6576760a29db2ad436a67c93273a41502891d1c77e6dedfe05d445daee592550ab229d3d5361c3b9de7663d4d1ee439df8",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-list-actions/overlay-list-actions.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-list-actions",
            "styleUrls": [
                "./overlay-list-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-list-actions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines that header should be full width (aka without x-axis padding).",
                    "description": "<p>Determines that header should be full width (aka without x-axis padding).</p>\n",
                    "line": 11,
                    "type": "\"dialog\" | \"full-width-search\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-overlay-list-actions',\r\n    templateUrl: './overlay-list-actions.component.html',\r\n    styleUrls: ['./overlay-list-actions.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OverlayListActionsComponent {\r\n    /** Determines that header should be full width (aka without x-axis padding). */\r\n    @Input() variant: 'dialog' | 'full-width-search' = 'dialog';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./overlay-list-actions.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"24px\"\r\n     [ngClass]=\"{'p-spacer-mini': variant === 'dialog', 'p-spacer-xmini': variant === 'full-width-search'}\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "OverlayWrapperComponent",
            "id": "component-OverlayWrapperComponent-54280056d5c5c19accbcb7338f8af73b43d801c644f4d46e81b04781f9df36ac655ea061967040aefd4dacf79dcefd64564c5ba3c17e5eac23d43b0ed7622218",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-wrapper/overlay-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "OverlayAnimationState",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isScrollableOverlay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "klass",
                    "defaultValue": "'dd-white-bg border-radius-6 elevation-05 h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "style_display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "captureDoneEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "captureStartEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "@slideFromTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "OverlayAnimationState | ",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "'dd-white-bg border-radius-6 elevation-05 h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.flexDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Wrapper component for overlay. This component provides the overlay with a slideFromTop\nanimation and the classes used for the overlay panel. Component also sets flex direction for parent component to keep a flex-column layout.\nFor a dialog wrapper with a slideFromRight animation, use DialogWrapperComponent.</p>\n",
            "rawdescription": "\n\nWrapper component for overlay. This component provides the overlay with a slideFromTop\nanimation and the classes used for the overlay panel. Component also sets flex direction for parent component to keep a flex-column layout.\nFor a dialog wrapper with a slideFromRight animation, use DialogWrapperComponent.\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostBinding, Input } from '@angular/core';\r\nimport { OverlayAnimationState, overlayAnimations } from '../../models/animations';\r\n\r\n/**\r\n * Wrapper component for overlay. This component provides the overlay with a slideFromTop\r\n * animation and the classes used for the overlay panel. Component also sets flex direction for parent component to keep a flex-column layout.\r\n * For a dialog wrapper with a slideFromRight animation, use DialogWrapperComponent.\r\n */\r\n@Component({\r\n    selector: 'dd-overlay-wrapper',\r\n    template: '<ng-content></ng-content>',\r\n    // To work with scrollable overlay, \"scrollable\" class can to be added only when\r\n    // animation is finished, or otherwise the animation wont work due to overflow being hidden.\r\n    // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n    host: {\r\n        '(@slideFromTop.start)': 'captureStartEvent($event)',\r\n        '(@slideFromTop.done)': 'captureDoneEvent($event)',\r\n    },\r\n    animations: [overlayAnimations.slideFromTop],\r\n})\r\nexport class OverlayWrapperComponent {\r\n    constructor(private elRef: ElementRef) {}\r\n    @Input() viewState?: OverlayAnimationState;\r\n\r\n    @HostBinding('class') klass = 'dd-white-bg border-radius-6 elevation-05 h-100-p';\r\n\r\n    // Keeping correct layout for the overlay.\r\n    @HostBinding('style.display') style_display = 'flex';\r\n    @HostBinding('style.flexDirection') get style_flexDirection() {\r\n        return 'column';\r\n    }\r\n\r\n    // If no viewstate is provided, give a default state to keep position.\r\n    @HostBinding('@slideFromTop') get slideFromTopState(): OverlayAnimationState | false {\r\n        if (this.viewState) {\r\n            return this.viewState;\r\n        } else {\r\n            return 'default';\r\n        }\r\n    }\r\n\r\n    // When no animation is used, disable trigger.\r\n    @HostBinding('@.disabled') get hasAnimation(): boolean {\r\n        if (!this.viewState) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isScrollableOverlay: boolean = false;\r\n\r\n    captureStartEvent(event: AnimationEvent) {\r\n        const el = this.elRef.nativeElement.parentElement.parentElement;\r\n        // Check if overlay should be scrollable, and mark it as such.\r\n        if (this.viewState && el.classList.contains('scrollable')) {\r\n            this.isScrollableOverlay = true;\r\n            // Disable the overflow: overlay style for now.\r\n            el.classList.remove('scrollable');\r\n        }\r\n    }\r\n\r\n    captureDoneEvent(event: AnimationEvent) {\r\n        const el = this.elRef.nativeElement.parentElement.parentElement;\r\n\r\n        // When scrollable overlay is in view, add class again.\r\n        if (this.viewState && this.viewState !== 'hide' && this.isScrollableOverlay) {\r\n            el.classList.add('scrollable');\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "style_flexDirection": {
                    "name": "style_flexDirection",
                    "getSignature": {
                        "name": "style_flexDirection",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "slideFromTopState": {
                    "name": "slideFromTopState",
                    "getSignature": {
                        "name": "slideFromTopState",
                        "type": "",
                        "returnType": "OverlayAnimationState | ",
                        "line": 34
                    }
                },
                "hasAnimation": {
                    "name": "hasAnimation",
                    "getSignature": {
                        "name": "hasAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-70ec4b985ab7803a58ca5149a8c0c7bd204dc279668978dc530c1ac1d53b3d040d5a0a4a777a8b48988eea00e72fa0446c538b3ba2386e8a6a729b558f3e1ac1",
            "file": "projects/digital-delights-library/src/pagination/components/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTotal number of items that determine the pagecount when divided by pageSize.",
                    "description": "<p>Total number of items that determine the pagecount when divided by pageSize.</p>\n",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe start index of pagination.",
                    "description": "<p>The start index of pagination.</p>\n",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe number of items displayed on each page.",
                    "description": "<p>The number of items displayed on each page.</p>\n",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "arrayLengthBeforeAndAfterEllipses",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "displayedPages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(number | undefined)[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "maxVisiblePages",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "pageCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pagesBeforeAndAfterEllipses",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "startIndexat0",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDisplayedPages",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageClick",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-pagination',\r\n    templateUrl: './pagination.component.html',\r\n    styleUrls: ['./pagination.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaginationComponent implements OnChanges {\r\n    /** The number of items displayed on each page. */\r\n    @Input() pageSize: number = 0;\r\n    /** The start index of pagination.*/\r\n    @Input() pageIndex: number = 0;\r\n    /** Total number of items that determine the pagecount when divided by pageSize. */\r\n    @Input() items: number = 0;\r\n\r\n    @Input() isMobile: boolean = false;\r\n\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n    /* The array of pages currently shown in the paginator. */\r\n    displayedPages: (number | undefined)[] = [];\r\n\r\n    activePage: number = 0;\r\n    pageCount: number = 0;\r\n\r\n    private readonly maxVisiblePages: number = 7;\r\n    private readonly startIndexat0: number = 3;\r\n    private readonly pagesBeforeAndAfterEllipses: number = 5;\r\n    private readonly arrayLengthBeforeAndAfterEllipses: number = 4;\r\n\r\n    ngOnChanges(): void {\r\n        this.activePage = this.pageIndex;\r\n        this.pageCount = this.getPageCount();\r\n        this.displayedPages = this.getDisplayedPages();\r\n    }\r\n\r\n    private getPageCount(): number {\r\n        let countedPages = 0;\r\n\r\n        if (this.items > 0 && this.pageSize > 0) {\r\n            const pageCount = this.items / this.pageSize;\r\n            const roundedPageCount = Math.floor(pageCount);\r\n\r\n            // If rounded pageCount is smaller than actual pageCount, add 1 so that all items will be shown.\r\n            countedPages = roundedPageCount < pageCount ? roundedPageCount + 1 : roundedPageCount;\r\n        }\r\n        return countedPages;\r\n    }\r\n\r\n    private getIndex(): number {\r\n        // Indexing should start at 0 when active page is 4 or less than, to always show pages 1-5. Same thing if there are seven or less pages.\r\n        if (this.activePage <= this.startIndexat0 || this.pageCount <= this.maxVisiblePages) {\r\n            return 0;\r\n        }\r\n\r\n        // If the last set of pages is 5 or smaller, or last page is clicked, move index backwards to always display the last 5 pages.\r\n        if ((this.pageCount - this.activePage < this.pagesBeforeAndAfterEllipses && this.activePage !== this.pageCount) || this.activePage === this.pageCount) {\r\n            // When navigating to first number of last set, show previous number.\r\n            if (this.pageCount - this.activePage === this.pagesBeforeAndAfterEllipses) {\r\n                return this.pageCount - (this.pagesBeforeAndAfterEllipses - 1);\r\n            }\r\n            return this.pageCount - this.pagesBeforeAndAfterEllipses;\r\n        }\r\n\r\n        return this.activePage - 1;\r\n    }\r\n\r\n    private getDisplayedPages(): (number | undefined)[] {\r\n        const pageArray: (number | undefined)[] = [];\r\n\r\n        if (this.pageCount >= 0) {\r\n            const index = this.getIndex();\r\n\r\n            // When array is long enough, show first page before ellipses.\r\n            if (this.activePage >= this.arrayLengthBeforeAndAfterEllipses && this.pageCount > this.maxVisiblePages) {\r\n                pageArray.push(0);\r\n                pageArray.push(undefined);\r\n            }\r\n\r\n            for (let i = index; i <= this.pageCount - 1; i++) {\r\n                // Array can have up to seven elements.\r\n                if (pageArray.length <= this.arrayLengthBeforeAndAfterEllipses || i >= this.pageCount - 2) {\r\n                    pageArray.push(i);\r\n                } else {\r\n                    pageArray.push(undefined);\r\n                    pageArray.push(this.pageCount - 1);\r\n                    return pageArray;\r\n                }\r\n            }\r\n        }\r\n\r\n        return pageArray;\r\n    }\r\n\r\n    nextPage(pageNumber: number): void {\r\n        if (pageNumber > this.pageCount) {\r\n            return;\r\n        }\r\n\r\n        this.pageChange.emit(pageNumber);\r\n    }\r\n\r\n    previousPage(pageNumber: number): void {\r\n        if (pageNumber < 0) {\r\n            return;\r\n        }\r\n\r\n        this.pageChange.emit(pageNumber);\r\n    }\r\n\r\n    onPageClick(pageNumber: number): void {\r\n        this.pageChange.emit(pageNumber);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/variables/breakpoints';\r\n\r\n/* Disable text selection. */\r\n.no-selection {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\n.dd-pagination-item {\r\n    &:hover {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('primary-100') !important;\r\n            color: themify.dd-color('primary-500') !important;\r\n        }\r\n    }\r\n    &:hover.active {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('accent-darker') !important;\r\n        }\r\n    }\r\n\r\n    &.active {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('accent') !important;\r\n            color: themify.dd-color-contrast('accent') !important;\r\n        }\r\n    }\r\n    cursor: pointer;\r\n}\r\n\r\n.dd-pagination-arrow {\r\n    &:hover {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('primary-100') !important;\r\n            color: themify.dd-color('primary-500') !important;\r\n        }\r\n    }\r\n\r\n    cursor: pointer;\r\n}\r\n\r\n.disabled {\r\n    pointer-events: none !important;\r\n    opacity: 0.2 !important;\r\n}\r\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"activePage >= 0\">\r\n    <ng-container *ngIf=\"!isMobile; else mobilePaginationTemplate\">\r\n        <div class=\"h-44 dd-pagination\" fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutGap-lt-sm=\"2px\" fxLayoutAlign=\"center stretch\">\r\n            <div class=\"dd-pagination-arrow back border-radius-6 w-44\" [ngClass]=\"{'disabled' : activePage === 0 || !pageCount}\" fxLayoutAlign=\"center center\"\r\n                 (click)=\"previousPage(activePage - 1)\">\r\n                <dd-icon [icon]=\"'dd-icon-arrow-back'\"></dd-icon>\r\n            </div>\r\n            <ng-container *ngFor=\"let item of displayedPages\">\r\n                <ng-container *ngIf=\"item === undefined; else pageTemplate\">\r\n                    <div fxLayoutAlign=\"center center\" class=\"w-44 no-selection ellipses\">\r\n                        <span>\r\n                            ...\r\n                        </span>\r\n                    </div>\r\n                </ng-container>\r\n                <ng-template #pageTemplate>\r\n                    <div *ngIf=\"item !== undefined\" [ngClass]=\"{'active': item === activePage}\" class=\"dd-pagination-item no-selection border-radius-6 w-44\"\r\n                         fxLayoutAlign=\"center center\" (click)=\"onPageClick(item)\">\r\n                        <span>\r\n                            {{item + 1}}\r\n                        </span>\r\n                    </div>\r\n                </ng-template>\r\n            </ng-container>\r\n            <div class=\"dd-pagination-arrow next no-selection border-radius-6 w-44\" [ngClass]=\"{'disabled': activePage === pageCount - 1 || !pageCount}\"\r\n                 fxLayoutAlign=\"center center\" (click)=\"nextPage(activePage + 1)\">\r\n                <dd-icon [icon]=\"'dd-icon-arrow'\"></dd-icon>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #mobilePaginationTemplate>\r\n        <div class=\"h-44 dd-pagination border-radius-6 dd-white pr-spacer-xmini pl-spacer-xmini elevation-01\" fxLayoutGap=\"4px\" fxLayout=\"row\"\r\n             fxLayoutAlign=\"center stretch\">\r\n            <div class=\"w-40 dd-accent-fg\" [ngClass]=\"{'disabled' : activePage === 0 || !pageCount}\" fxLayoutAlign=\"center center\"\r\n                 (click)=\"previousPage(activePage - 1)\">\r\n                <dd-icon [icon]=\"'dd-icon-arrow-left'\"></dd-icon>\r\n            </div>\r\n            <div class=\"no-selection w-40 border-left dd-primary-100-border-left\" fxLayoutAlign=\"center center\">\r\n                <span>\r\n                    {{activePage + 1}}\r\n                </span>\r\n            </div>\r\n            <div class=\"no-selection w-20\" fxLayoutAlign=\"center center\">\r\n                <span>\r\n                    /\r\n                </span>\r\n            </div>\r\n            <div class=\"no-selection w-40 border-right dd-primary-100-border-right\" fxLayoutAlign=\"center center\">\r\n                <span>\r\n                    {{pageCount}}\r\n                </span>\r\n            </div>\r\n            <div class=\"w-40 dd-accent-fg\" [ngClass]=\"{'disabled': activePage === pageCount - 1  || !pageCount}\" fxLayoutAlign=\"center center\"\r\n                 (click)=\"nextPage(activePage + 1)\">\r\n                <dd-icon [icon]=\"'dd-icon-arrow-right'\"></dd-icon>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</ng-container>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-51f395194e1f1d3fc285961770bed754066b3c16cb4325cb3fe6069becfc8b3f2ea634762988bf2699c2442e259da14a6cc399b8bc3610ba231d929bda6006dd",
            "file": "projects/digital-delights-library/src/progress-bar/components/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentStateIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum progress.",
                    "description": "<p>Maximum progress.</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of current progress in relation to max progress.",
                    "description": "<p>Value of current progress in relation to max progress.</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ProgressBarState[]",
                    "decorators": []
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, Input } from '@angular/core';\r\n\r\nexport interface ProgressBarState {\r\n    icon: string;\r\n    label: string;\r\n    color?: 'dd-success' | 'dd-accent';\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-progress-bar',\r\n    templateUrl: './progress-bar.component.html',\r\n    styleUrls: ['./progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProgressBarComponent {\r\n    constructor(private el: ElementRef) {}\r\n    /** Value of current progress in relation to max progress. */\r\n    @Input() progress: number = 0;\r\n    /** Maximum progress. */\r\n    @Input() max: number = 100;\r\n\r\n    @Input() states?: ProgressBarState[];\r\n\r\n    @Input() currentStateIndex?: number;\r\n\r\n    @Input() vertical: boolean = false;\r\n\r\n    get progressPercentage(): number {\r\n        if (this.states && this.states.length > 0 && this.currentStateIndex !== undefined) {\r\n            if (this.currentStateIndex >= this.states.length - 1) {\r\n                return 100;\r\n            }\r\n\r\n            const progressBarLength = this.vertical ? this.el.nativeElement.getBoundingClientRect().height : this.el.nativeElement.getBoundingClientRect().width;\r\n\r\n            const padding = 8 / progressBarLength;\r\n\r\n            if (this.currentStateIndex === 0) {\r\n                return (16 / progressBarLength + padding) * 100;\r\n            }\r\n\r\n            const stateGap = progressBarLength / (this.states.length - 1);\r\n\r\n            const retval = ((this.currentStateIndex * stateGap) / progressBarLength + padding) * 100;\r\n\r\n            return Math.min(retval, 100);\r\n        }\r\n\r\n        // Also handles 0 value\r\n        if (!this.progress) {\r\n            // Always show some progress (numbers are from Figma)\r\n            return (16 / 1083) * 100;\r\n        }\r\n\r\n        // Can progress over max.\r\n        if (this.progress > this.max) {\r\n            return 100;\r\n        }\r\n\r\n        return (this.progress / this.max) * 100;\r\n    }\r\n\r\n    get labelSpace(): number {\r\n        const progressBarLength = this.vertical ? this.el.nativeElement.getBoundingClientRect().height : this.el.nativeElement.getBoundingClientRect().width;\r\n        if (this.states?.length) {\r\n            const padding = progressBarLength > 600 ? 16 : 8;\r\n            return (progressBarLength / (this.states?.length - 1)) * (2 / 3) - padding;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get verticalBarMinHeight(): number {\r\n        if (this.states?.length) {\r\n            return this.states?.length * 80;\r\n        }\r\n        return 200;\r\n    }\r\n\r\n    get statesReversed(): ProgressBarState[] {\r\n        return this.states?.slice().reverse() ?? [];\r\n    }\r\n\r\n    get barColor(): string {\r\n        if (this.states && this.states.length > 0 && this.currentStateIndex !== undefined) {\r\n            if (this.currentStateIndex < this.states.length && this.currentStateIndex >= 0 && !!this.states[this.currentStateIndex]?.color) {\r\n                return this.states[this.currentStateIndex].color ?? '';\r\n            }\r\n\r\n            if (this.currentStateIndex + 1 >= this.states.length) {\r\n                return 'dd-success';\r\n            }\r\n            return 'dd-accent';\r\n        }\r\n\r\n        if (this.progress >= this.max) {\r\n            return 'dd-success';\r\n        }\r\n        return 'dd-accent';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n\r\n:host {\r\n    .state {\r\n        align-items: center !important;\r\n\r\n        &:first-of-type {\r\n            align-items: flex-start !important;\r\n        }\r\n        &:last-of-type {\r\n            align-items: flex-end !important;\r\n        }\r\n    }\r\n\r\n    .progress {\r\n        transition-property: background-color, width, height;\r\n        transition-duration: 0.4s;\r\n        transition-timing-function: ease;\r\n    }\r\n\r\n    .dot {\r\n        z-index: 2;\r\n    }\r\n\r\n    .label {\r\n        inline-size: max-content;\r\n    }\r\n\r\n    .text-align-end {\r\n        text-align: end;\r\n    }\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "progressPercentage": {
                    "name": "progressPercentage",
                    "getSignature": {
                        "name": "progressPercentage",
                        "type": "number",
                        "returnType": "number",
                        "line": 28
                    }
                },
                "labelSpace": {
                    "name": "labelSpace",
                    "getSignature": {
                        "name": "labelSpace",
                        "type": "number",
                        "returnType": "number",
                        "line": 63
                    }
                },
                "verticalBarMinHeight": {
                    "name": "verticalBarMinHeight",
                    "getSignature": {
                        "name": "verticalBarMinHeight",
                        "type": "number",
                        "returnType": "number",
                        "line": 72
                    }
                },
                "statesReversed": {
                    "name": "statesReversed",
                    "getSignature": {
                        "name": "statesReversed",
                        "type": "[]",
                        "returnType": "ProgressBarState[]",
                        "line": 79
                    }
                },
                "barColor": {
                    "name": "barColor",
                    "getSignature": {
                        "name": "barColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 83
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"!vertical; else verticalBarTemplate\">\r\n    <div *ngIf=\"states?.length && currentStateIndex !== undefined\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n        <div *ngFor=\"let state of states; let i = index\" fxLayout=\"column\" fxLayoutAlign=\"start center\"\r\n             [ngClass]=\"{'dd-primary-300-fg' : i > currentStateIndex}\" class=\"w-0 h-36 state\">\r\n            <div class=\"pb-spacer-solo\">\r\n                <dd-icon [icon]=\"state.icon\"></dd-icon>\r\n            </div>\r\n            <div class=\"w-32 h-0 pt-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div class=\"h-8 w-8 border-radius-100-p dd-white-bg dot\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"w-100-p border-radius-6 dd-primary-100-bg h-16\" id=\"progress-bar\">\r\n        <div class=\"border-radius-6 h-16 progress\" [ngStyle]=\"{'width': progressPercentage + '%'}\" [ngClass]=\"barColor\">\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"states?.length && currentStateIndex !== undefined\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n        <div *ngFor=\"let state of states; let i = index\" fxLayout=\"column\" class=\"w-0 state\" [ngClass]=\"{'dd-primary-300-fg' : i > currentStateIndex}\">\r\n            <div class=\"label pt-spacer-mini\" [ngStyle]=\"{'max-width': labelSpace + 'px'}\" [ngClass]=\"{'text-align-end': i + 1 === states?.length}\">\r\n                {{state.label}}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #verticalBarTemplate>\r\n    <div fxLayout=\"row\" class=\"h-100-p\">\r\n        <div *ngIf=\"states?.length && currentStateIndex !== undefined\" fxLayout=\"column\" fxLayoutAlign=\"space-between start\">\r\n            <div *ngFor=\"let state of statesReversed; let i = index\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                 [ngClass]=\"{'dd-primary-300-fg' : i < (statesReversed.length - 1 - currentStateIndex)}\" class=\"h-0 w-36 state\">\r\n                <div class=\"pr-spacer-solo\">\r\n                    <dd-icon [icon]=\"state.icon\"></dd-icon>\r\n                </div>\r\n                <div class=\"h-32 w-0 pl-spacer-xmini\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                    <div class=\"h-8 w-8 border-radius-100-p dd-white-bg dot\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"border-radius-6 dd-primary-100-bg w-16 \" id=\"progress-bar-vertical\" [ngClass]=\"{'offset-bar-vertical' : (states?.length)}\"\r\n             [ngStyle]=\"{'min-height': verticalBarMinHeight + 'px'}\" fxLayout=\"column\" fxLayoutAlign=\"end start\">\r\n            <div class=\"border-radius-6 w-16 progress\" [ngStyle]=\"{'height': progressPercentage + '%'}\" [ngClass]=\"barColor\">\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"states?.length && currentStateIndex !== undefined\" fxLayout=\"column\" fxLayoutAlign=\"space-between start\" class=\"py-spacer-xmini\">\r\n            <div *ngFor=\"let state of statesReversed; let i = index\" fxLayout=\"row\" class=\"h-0 state\"\r\n                 [ngClass]=\"{'dd-primary-300-fg' : i < (statesReversed.length - 1 - currentStateIndex)}\">\r\n                <div class=\"label-vertical pl-spacer-mini\">\r\n                    {{state.label}}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ReadMoreAreaComponent",
            "id": "component-ReadMoreAreaComponent-c5271e0ba13e69f50002de5909f69bf3a4dd1a6fae80df3da8c32cbe090239376e894f2c68a5cb614324bff7f3d82bac94ba3e665be9e018425864693c9a0daf",
            "file": "projects/digital-delights-library/src/read-more-area/components/read-more-area/read-more-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-read-more-area",
            "styleUrls": [
                "./read-more-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./read-more-area.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonTextClosed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonTextOpen",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHeight of the visible area when closed.",
                    "description": "<p>Height of the visible area when closed.</p>\n",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the full text is visible or not.",
                    "description": "<p>Whether the full text is visible or not.</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "readMoreAreaClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-read-more-area',\r\n    templateUrl: './read-more-area.component.html',\r\n    styleUrls: ['./read-more-area.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReadMoreAreaComponent {\r\n    /** Height of the visible area when closed. */\r\n    @Input() height: string = '';\r\n    /** Whether the full text is visible or not. */\r\n    @HostBinding('class.open') @Input() open: boolean = false;\r\n\r\n    @Input() buttonTextOpen: string = '';\r\n    @Input() buttonTextClosed: string = '';\r\n\r\n    @Output() readMoreAreaClick: EventEmitter<void> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/variables/opacity';\r\n\r\n.read-more-area-wrapper {\r\n    position: relative;\r\n}\r\n.read-more-fade {\r\n    @include themify.dd-themify() {\r\n        background: linear-gradient(0deg, themify.dd-color('white'), themify.dd-color('white', opacity.$opacity-selectable-medium)) !important;\r\n    }\r\n\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 40%;\r\n    text-align: center;\r\n}\r\n",
                    "styleUrl": "./read-more-area.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"read-more-area-wrapper\">\r\n    <div [ngStyle]=\"{'overflow': open ? 'auto': 'hidden' }\" [ngClass]=\"!open ? height : ''\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"read-more-fade\" [hidden]=\"open\">\r\n    </div>\r\n</div>\r\n<!-- Show button only if the text for it is defined in the state. -->\r\n<ng-container *ngIf=\"(open && buttonTextOpen) || (!open && buttonTextClosed)\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"mt-spacer-mini\">\r\n        <dd-button [text]=\"open ? buttonTextOpen : buttonTextClosed\" [color]=\"'primary-light'\" (click)=\" this.readMoreAreaClick.emit();\"></dd-button>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SearchInputComponent",
            "id": "component-SearchInputComponent-8d1f469b21a97942ad3af7a26a513e77da566bf258a635a2e592623f399ba6b615f0dda68ef7be4eda469ec2ad3351c1447adb8644ccb3a3b01ffddead0c6961",
            "file": "projects/digital-delights-library/src/input/components/search-input/search-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-search-input",
            "styleUrls": [
                "./search-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "inputValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "searchInputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'dd-search-input',\r\n    templateUrl: './search-input.component.html',\r\n    styleUrls: ['./search-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SearchInputComponent implements OnInit, OnDestroy {\r\n    @ViewChild('searchInputElement') searchInputElement?: ElementRef<HTMLInputElement>;\r\n\r\n    @Input() icon: string = 'dd-icon-search';\r\n    @Input() debounceTime: number = 500;\r\n    @Input() placeHolder?: string = '';\r\n    @Input() autoFocus: boolean = false;\r\n    @Input() currentValue?: string = '';\r\n    @Output() inputValueChanged: EventEmitter<string> = new EventEmitter();\r\n    @Output() buttonClick: EventEmitter<string> = new EventEmitter();\r\n\r\n    readonly searchInput: FormControl<string | null | undefined> = new FormControl('');\r\n\r\n    /**\r\n     * Unsubscribe subject for handling the subscriptions.\r\n     */\r\n    private readonly _unsubscribeAllSubject: Subject<void> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        if (this.currentValue) {\r\n            this.searchInput.setValue(this.currentValue);\r\n        }\r\n\r\n        this.searchInput?.valueChanges.pipe(debounceTime(this.debounceTime), takeUntil(this._unsubscribeAllSubject)).subscribe((inputValue?: string | null) => {\r\n            if (typeof inputValue === 'string') {\r\n                this.inputValueChanged.emit(inputValue);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Completes the exposed subject. */\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next();\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n\r\n    .search-input-container {\r\n        position: relative;\r\n\r\n        input {\r\n            padding: 12px 35px 12px 12px;\r\n\r\n            @include themify.dd-themify() {\r\n                height: themify.dd-configuration('inputs', default-size) !important;\r\n            }\r\n        }\r\n\r\n        // Center the icon in the search input.\r\n        .search-input-icon {\r\n            position: absolute;\r\n            right: 1px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./search-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"search-input-container\">\r\n    <ng-container *ngIf=\"autoFocus; else notAutoFocusedTemplate\">\r\n        <input #searchInputElement [type]=\"'text'\" class=\"border dd-primary-200-border border-radius-6 w-100-p text-body-1\" [formControl]=\"searchInput\"\r\n               [autocomplete]=\"'off'\" autocorrect=\"off\" [spellcheck]=\"'false'\" [attr.placeholder]=\"placeHolder\" autofocus>\r\n    </ng-container>\r\n    <ng-template #notAutoFocusedTemplate>\r\n        <input #searchInputElement [type]=\"'text'\" class=\"border dd-primary-200-border border-radius-6 w-100-p text-body-1\" [formControl]=\"searchInput\"\r\n               [autocomplete]=\"'off'\" autocorrect=\"off\" [spellcheck]=\"'false'\" [attr.placeholder]=\"placeHolder\">\r\n    </ng-template>\r\n    <span class=\"search-input-icon\">\r\n        <dd-icon-clickable [icon]=\"icon\" (buttonClick)=\"buttonClick.emit(searchInput.value ?? undefined)\">\r\n        </dd-icon-clickable>\r\n    </span>\r\n</div>\r\n"
        },
        {
            "name": "SearchInputV2Component",
            "id": "component-SearchInputV2Component-c605441961784830e6216daf0eb12c4947d80bd724e11a3fcd84b5135a3e9f2ad031500920649d2a8ee134afdd978166ba4d66d2f692a7eca33b27cd71f0ec5b",
            "file": "projects/digital-delights-library/src/input/components/search-input-v2/search-input-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-search-input-v2",
            "styleUrls": [
                "./search-input-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-input-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initialValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeHolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits search icon click",
                    "description": "<p>Emits search icon click</p>\n",
                    "line": 37,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "inputValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "searchInputContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": true,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputContainer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchInputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>This component acts as a search input field that can be used in either light or dark mode.</p>\n<p>TODO: This does not support changing size dynamically, also should this be removed from the library?</p>\n",
            "rawdescription": "\n\nThis component acts as a search input field that can be used in either light or dark mode.\n\nTODO: This does not support changing size dynamically, also should this be removed from the library?\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output, Renderer2, ViewChild } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { keyboardKeys } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, shareReplay } from 'rxjs';\r\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * This component acts as a search input field that can be used in either light or dark mode.\r\n *\r\n * TODO: This does not support changing size dynamically, also should this be removed from the library?\r\n */\r\n@Component({\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    selector: 'dd-search-input-v2',\r\n    templateUrl: './search-input-v2.component.html',\r\n    styleUrls: ['./search-input-v2.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SearchInputV2Component implements AfterViewInit, OnDestroy {\r\n    constructor(private renderer: Renderer2) {}\r\n\r\n    @Input() initialValue?: string;\r\n    @Input() placeHolder?: string;\r\n    @Input() autoFocus: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() variant: 'light' | 'dark' = 'light';\r\n\r\n    @Output() inputValueChanged: EventEmitter<string> = new EventEmitter();\r\n    /** Emits search icon click */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild('searchInputElement') searchInputElement?: ElementRef<HTMLElement>;\r\n    @ViewChild('searchInputContainer') searchInputContainer?: ElementRef<HTMLElement>;\r\n\r\n    readonly searchInput: FormControl<string | null | undefined> = new FormControl('');\r\n    private readonly debounceTime: number = 500;\r\n\r\n    /**\r\n     * Unsubscribe subject for handling the subscriptions.\r\n     */\r\n    private readonly _unsubscribeAllSubject: Subject<void> = new Subject();\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.initialValue) {\r\n            this.searchInput.setValue(this.initialValue);\r\n            this.renderer.addClass(this.searchInputContainer?.nativeElement, 'has-value');\r\n        }\r\n\r\n        const valueChanges$ = this.searchInput.valueChanges.pipe(shareReplay(1));\r\n\r\n        valueChanges$\r\n            .pipe(\r\n                debounceTime(this.debounceTime),\r\n                filter(() => !this.disabled),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe((inputValue?: string | null) => {\r\n                if (typeof inputValue === 'string') {\r\n                    this.inputValueChanged.emit(inputValue);\r\n                }\r\n            });\r\n\r\n        valueChanges$.pipe(takeUntil(this._unsubscribeAllSubject)).subscribe((inputValue?: string | null) => {\r\n            if (inputValue && !this.disabled) {\r\n                this.renderer.addClass(this.searchInputContainer?.nativeElement, 'has-value');\r\n            } else {\r\n                this.renderer.removeClass(this.searchInputContainer?.nativeElement, 'has-value');\r\n            }\r\n        });\r\n\r\n        if (this.autoFocus) {\r\n            setTimeout(() => {\r\n                this.searchInputElement?.nativeElement.focus();\r\n            }, 1);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next();\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    // This is needed for enter key to fire button click on mobile as well.\r\n    @HostListener('document:keydown', ['$event'])\r\n    handleKeyboardEvent(event: KeyboardEvent): void {\r\n        if (event.key === keyboardKeys.enter && event.target === this.searchInputElement?.nativeElement) {\r\n            this.onButtonClick();\r\n        }\r\n    }\r\n\r\n    onButtonClick(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.buttonClick.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n\r\n    .search-input-container {\r\n        height: 56px;\r\n        position: relative;\r\n\r\n        border-top-right-radius: 8px;\r\n        border-top-left-radius: 8px;\r\n\r\n        border-bottom: solid 2px;\r\n        transition: border-bottom-color 0.2s ease-in-out;\r\n\r\n        &.light {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('primary-100');\r\n                border-bottom-color: themify.dd-color('primary-400');\r\n\r\n                input {\r\n                    color: themify.dd-color-contrast('primary-100');\r\n                }\r\n\r\n                .search-label {\r\n                    color: themify.dd-color('primary-400');\r\n                }\r\n\r\n                dd-icon {\r\n                    color: themify.dd-color('primary-400');\r\n                }\r\n\r\n                input:disabled,\r\n                dd-icon.disabled {\r\n                    color: themify.dd-color('primary-300') !important;\r\n                }\r\n            }\r\n        }\r\n\r\n        &.dark {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('primary-500');\r\n                border-bottom-color: themify.dd-color('primary-300');\r\n\r\n                input {\r\n                    color: themify.dd-color-contrast('primary-500');\r\n                }\r\n\r\n                .search-label {\r\n                    color: themify.dd-color('primary-300');\r\n                }\r\n\r\n                dd-icon {\r\n                    color: themify.dd-color('primary-300');\r\n                }\r\n\r\n                input:disabled,\r\n                dd-icon.disabled {\r\n                    color: themify.dd-color('primary-400') !important;\r\n                }\r\n            }\r\n        }\r\n\r\n        &:focus-within,\r\n        &.has-value {\r\n            dd-icon {\r\n                @include themify.dd-themify() {\r\n                    color: themify.dd-color('accent');\r\n                }\r\n            }\r\n        }\r\n\r\n        input {\r\n            position: absolute;\r\n            top: 12px;\r\n\r\n            background-color: transparent;\r\n            padding: 12px 35px 12px 12px;\r\n\r\n            border: none;\r\n        }\r\n\r\n        .search-label {\r\n            pointer-events: none;\r\n            position: absolute;\r\n            top: 16px;\r\n            left: 10px;\r\n            font-size: 14px;\r\n            transition: top 0.2s ease-in, font-size 0.2s ease-in;\r\n        }\r\n\r\n        .search-input-icon {\r\n            position: absolute;\r\n            right: 1px;\r\n            width: 35px;\r\n            transition: color 0.2s ease-in-out;\r\n\r\n            // Center icon\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n\r\n    .search-input-container:focus-within {\r\n        @include themify.dd-themify() {\r\n            border-bottom-color: themify.dd-color('accent');\r\n        }\r\n    }\r\n\r\n    .search-input-container:hover,\r\n    .search-input-container:focus-within,\r\n    .search-input-container.has-value {\r\n        &.light {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('primary-200');\r\n            }\r\n        }\r\n\r\n        &.dark {\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('primary-600');\r\n            }\r\n        }\r\n    }\r\n\r\n    .search-input-container.has-value .search-label,\r\n    input:focus ~ .search-label {\r\n        top: -1px;\r\n        font-size: 11px;\r\n    }\r\n\r\n    .search-input-container.has-value.light .search-label,\r\n    .light input:focus ~ .search-label {\r\n        @include themify.dd-themify() {\r\n            color: themify.dd-color('primary-500');\r\n        }\r\n    }\r\n\r\n    .search-input-container.has-value.dark .search-label,\r\n    .dark input:focus ~ .search-label {\r\n        @include themify.dd-themify() {\r\n            color: themify.dd-color('primary-300');\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./search-input-v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"search-input-container text-body-1 {{variant}}\" [ngClass]=\"{'disabled': disabled}\" #searchInputContainer>\r\n    <input #searchInputElement [type]=\"'text'\" class=\"w-100-p\" [formControl]=\"searchInput\" [autocomplete]=\"'off'\" autocorrect=\"off\" [spellcheck]=\"'false'\"\r\n           [attr.disabled]=\"disabled ? true : undefined\">\r\n\r\n    <label class=\"search-label\">{{placeHolder}}</label>\r\n\r\n    <span class=\"search-input-icon h-100-p\">\r\n        <dd-icon [ngClass]=\"disabled ? 'disabled' : 'cursor-pointer'\" [icon]=\"'dd-icon-search'\" (click)=\"onButtonClick()\"></dd-icon>\r\n    </span>\r\n</div>\r\n"
        },
        {
            "name": "SelectItemComponent",
            "id": "component-SelectItemComponent-c6098aa58fb0ade8e9102fd7cafb8c158fb996197781dfc77e2cdf0998b657534d031780147f5f75ddca1e6663f84ab6180c6867a286ec0a74fbeebdd16da36d",
            "file": "projects/digital-delights-library/src/select/components/select-item/select-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-item",
            "styleUrls": [
                "./select-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderBottom",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SelectItem<any>",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "SelectListComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { SelectItem, SelectListComponentVariant } from '../../select-models';\r\n\r\n@Component({\r\n    selector: 'dd-select-item',\r\n    templateUrl: './select-item.component.html',\r\n    styleUrls: ['./select-item.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectItemComponent {\r\n    @Input() item?: SelectItem<any>;\r\n    @Input() selected: boolean = false;\r\n    @Input() borderBottom: boolean = true;\r\n    @Input() variant: SelectListComponentVariant = 'basic';\r\n\r\n    @Output() itemClick: EventEmitter<SelectItem<any>> = new EventEmitter();\r\n\r\n    get selectItemClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            selected: this.selected, //\r\n            'border-bottom': this.borderBottom,\r\n            'basic-variant': this.variant === 'basic',\r\n            'select-disabled': !!this.item?.disabled,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n\r\n.dd-select-item {\r\n    @include themify.dd-themify() {\r\n        height: themify.dd-configuration('inputs', default-size) !important;\r\n    }\r\n\r\n    .selected-bar {\r\n        opacity: 0;\r\n    }\r\n\r\n    &.selected {\r\n        @include themify.dd-themify() {\r\n            color: themify.dd-color('accent') !important;\r\n        }\r\n\r\n        .selected-bar {\r\n            width: 2px;\r\n            height: 100%;\r\n            opacity: 1;\r\n\r\n            @include themify.dd-themify() {\r\n                background-color: themify.dd-color('accent') !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    &:hover {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('primary-50') !important;\r\n        }\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n\r\n    &.select-disabled {\r\n        opacity: opacity.$opacity-button-disabled !important;\r\n        pointer-events: none !important;\r\n    }\r\n}\r\n\r\n.basic-variant {\r\n    min-width: 224px;\r\n}\r\n",
                    "styleUrl": "./select-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "selectItemClasses": {
                    "name": "selectItemClasses",
                    "getSignature": {
                        "name": "selectItemClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 18
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"item\">\r\n    <div [attr.id]=\"item.id\" class=\"dd-select-item dd-white-bg dd-primary-500-fg cursor-pointer\" [ngClass]=\"selectItemClasses\" fxLayoutAlign=\"start center\"\r\n         (click)=\"!item.disabled && itemClick.emit(item)\">\r\n        <div class=\"selected-bar\"></div>\r\n        <div class=\"mx-spacer-mini\">\r\n            <div class=\"subtitle\">{{item.text}}</div>\r\n            <ng-container *ngIf=\"item.description\">\r\n                <div class=\"dd-primary-500-fg caption text-truncate\">{{item.description}}</div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SelectListComponent",
            "id": "component-SelectListComponent-e9e3a5bc94c881b81219d77f634763636d4b475606cb16c7059792d32dc07106f56a95784017d22b1dea6bfb86506f229d47480fda2962e8343358cf233df7dc",
            "file": "projects/digital-delights-library/src/select/components/select-list/select-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-list",
            "styleUrls": [
                "./select-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchNoResultsMessage",
                    "defaultValue": "'No results'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchPlaceHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string | number | undefined",
                    "decorators": []
                },
                {
                    "name": "selectText",
                    "defaultValue": "'Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to be shown when there is no selected item.",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "SelectListComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\r\nimport { OverlayOpenModel, OverlayService } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { Subject } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\nimport { SelectItem, SelectListComponentVariant, SelectListModel } from '../../select-models';\r\nimport { SelectMenuComponent, SelectMenuOutput } from '../select-menu/select-menu.component';\r\n\r\n@Component({\r\n    selector: 'dd-select-list',\r\n    templateUrl: './select-list.component.html',\r\n    styleUrls: ['./select-list.component.scss'],\r\n})\r\nexport class SelectListComponent implements OnDestroy {\r\n    constructor(private overlayService: OverlayService) {}\r\n\r\n    @Input() items: SelectItem<any>[] = [];\r\n    @Input() selected: string | number | undefined;\r\n    /** Text to be shown when there is no selected item. */\r\n    @Input() selectText: string = 'Select';\r\n\r\n    @Input() searchEnabled: boolean = false;\r\n\r\n    @Input() searchPlaceHolder: string = '';\r\n\r\n    @Input() searchNoResultsMessage: string = 'No results';\r\n\r\n    @Input() variant: SelectListComponentVariant = 'basic';\r\n\r\n    @Input() label?: string;\r\n\r\n    @Input() icon?: string = 'dd-icon-arrow-down';\r\n\r\n    /**\r\n     * If you are using the element on different background color than white, you can change the background color of the input.\r\n     * Use color classes that define both background and font color from the library.\r\n     * Default is white background, with white some fonts are using lighter gray color than the contrast is.\r\n     */\r\n    @Input() backgroundColor: string = 'dd-white';\r\n\r\n    @Output() itemClick: EventEmitter<SelectItem<any>> = new EventEmitter();\r\n\r\n    overlayModel?: OverlayOpenModel<SelectMenuComponent>;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    get anchorText(): string | number {\r\n        if (this.selected === null || this.selected === undefined) {\r\n            return this.selectText;\r\n        }\r\n\r\n        return this.items.find((x) => x.id === this.selected)?.text ?? this.selectText;\r\n    }\r\n\r\n    /** Completes the exposed subject. */\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next(undefined);\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    onAnchorClick(element: HTMLDivElement): void {\r\n        // Close existing overlay\r\n        if (!!this.overlayModel) {\r\n            this.closeMenu();\r\n            return;\r\n        }\r\n\r\n        const widthOfMenuelement: number = element.offsetWidth;\r\n\r\n        const data: SelectListModel = {\r\n            items: this.items,\r\n            selected: this.selected ? [this.selected] : [],\r\n            searchEnabled: this.searchEnabled,\r\n            searchNoResultsMessage: this.searchNoResultsMessage,\r\n            searchPlaceholder: this.searchPlaceHolder,\r\n            variant: this.variant,\r\n        };\r\n\r\n        const config = this.overlayService.getConnectedToConfig<SelectListModel>(element, '.dd-select-menu', data);\r\n\r\n        if (config.overlayConfig) {\r\n            config.overlayConfig.minWidth = widthOfMenuelement;\r\n            config.closeOnOutsidePointerEvents = true;\r\n        }\r\n\r\n        this.overlayModel = this.overlayService.open(SelectMenuComponent, config);\r\n\r\n        this.overlayModel.component.itemClick\r\n            .pipe(\r\n                take(1), //\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe((selection: SelectMenuOutput) => {\r\n                const [item, _] = selection;\r\n                this.itemClick.emit(item);\r\n                this.closeMenu();\r\n            });\r\n\r\n        this.overlayModel.overlayRef\r\n            .detachments()\r\n            .pipe(\r\n                // Add delay so when clicking anchor (that is outside event) the anchor click happens first and doesnt open a new overlay.\r\n                delay(1),\r\n                take(1),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n            });\r\n    }\r\n\r\n    /** Helper function to get rid of things. */\r\n    private closeMenu(): void {\r\n        this.overlayModel?.close();\r\n        delete this.overlayModel;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.with-label {\r\n    position: relative;\r\n}\r\n\r\n.dd-select-anchor {\r\n    @include themify.dd-themify() {\r\n        height: themify.dd-configuration('inputs', default-size) !important;\r\n    }\r\n\r\n    &:hover {\r\n        @include themify.dd-themify() {\r\n            border-color: themify.dd-color('primary-600') !important;\r\n        }\r\n    }\r\n\r\n    label {\r\n        position: absolute;\r\n        left: 9px;\r\n        z-index: 2;\r\n        font-size: 12px;\r\n        line-height: 11px;\r\n        background-color: inherit;\r\n        padding: 0 4px;\r\n        // Make the label only the half of the actual height\r\n        // Align content so text is rendered from the bottom\r\n        // Move 1 px up to go over the border.\r\n        height: 6px;\r\n        top: -1px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n    }\r\n\r\n    &:active,\r\n    &:focus,\r\n    &.open {\r\n        @include themify.dd-themify() {\r\n            border-color: themify.dd-color('accent') !important;\r\n        }\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n\r\n.basic-variant {\r\n    min-width: 224px;\r\n}\r\n",
                    "styleUrl": "./select-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "anchorText": {
                    "name": "anchorText",
                    "getSignature": {
                        "name": "anchorText",
                        "type": "",
                        "returnType": "string | number",
                        "line": 46
                    }
                }
            },
            "templateData": "<div #selectAnchor class=\"dd-select-anchor border dd-primary-200-border border-radius-6 cursor-pointer\"\r\n     [ngClass]=\"{'open': !!overlayModel, 'basic-variant': variant === 'basic', 'with-label': label}\" fxLayoutAlign=\"start center\"\r\n     (click)=\"onAnchorClick(selectAnchor)\">\r\n\r\n    <label class=\"{{backgroundColor}}\" [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\"><span>{{ label }}</span></label>\r\n\r\n    <div class=\"{{backgroundColor}} w-100-p ml-spacer-mini mr-spacer-xmini subtitle\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        {{anchorText}}\r\n        <ng-container *ngIf=\"!!overlayModel; else menuClosedIconTemplate\">\r\n            <dd-icon [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" [icon]=\"'dd-icon-arrow-up'\"></dd-icon>\r\n        </ng-container>\r\n        <ng-template #menuClosedIconTemplate>\r\n            <dd-icon [ngClass]=\"{'dd-primary-500-fg': backgroundColor === 'dd-white'}\" [icon]=\"icon\"></dd-icon>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SelectMenuComponent",
            "id": "component-SelectMenuComponent-e2dba5783c5031d8fa9ec5277538ef09c369b1be505cbfc85111ef6c41f8178349e00e1835693be50e0f4ece844a1cf7e9eca2ff1578380059f9699fb4c7f7fa",
            "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-menu",
            "styleUrls": [
                "./select-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the selected element and the list of all selections as output.\n",
                    "description": "<p>Emits the selected element and the list of all selections as output.</p>\n",
                    "line": 20,
                    "type": "EventEmitter<SelectMenuOutput>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectListModel",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "selectedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchTermChange",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { OVERLAY_DATA } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { SelectItem, SelectListModel } from '../../select-models';\r\n\r\nexport type SelectMenuOutput = [any, (string | number)[]];\r\n\r\n@Component({\r\n    selector: 'dd-select-menu',\r\n    templateUrl: './select-menu.component.html',\r\n    styleUrls: ['./select-menu.component.scss'],\r\n})\r\nexport class SelectMenuComponent {\r\n    constructor(@Inject(OVERLAY_DATA) public data: SelectListModel) {\r\n        this.selectedItems = data.selected ?? [];\r\n    }\r\n\r\n    /**\r\n     * Emits the selected element and the list of all selections as output.\r\n     */\r\n    @Output() itemClick: EventEmitter<SelectMenuOutput> = new EventEmitter();\r\n\r\n    selectFilter: string = '';\r\n\r\n    readonly selectedItems: (string | number)[];\r\n\r\n    onSearchTermChange(searchTerm: string): void {\r\n        this.selectFilter = searchTerm;\r\n    }\r\n\r\n    itemSelected(item: SelectItem<any>): void {\r\n        const selectId = item.id;\r\n\r\n        const index = this.selectedItems.indexOf(selectId);\r\n        if (index > -1) {\r\n            this.selectedItems.splice(index, 1);\r\n        } else {\r\n            this.selectedItems.push(selectId);\r\n        }\r\n\r\n        // Emits the clicked event and the list of all selected elements.\r\n        this.itemClick.emit([item, this.selectedItems]);\r\n    }\r\n\r\n    isSelected(item: SelectItem<any>): boolean {\r\n        return this.selectedItems.some((x) => x === item.id);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n.dd-select-menu {\r\n    // Hide overflow so that border radius is applied correctly\r\n    max-height: 400px;\r\n    overflow: hidden;\r\n}\r\n\r\n:host {\r\n    min-width: 100%;\r\n}\r\n\r\n.dd-select-menu-inner {\r\n    // To keep border radius, scroll is applied to the inner div and a max-height is applied to outer div to allow scroll\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    max-height: 20rem;\r\n}\r\n\r\n.dd-select-item {\r\n    @include themify.dd-themify() {\r\n        height: themify.dd-configuration('inputs', default-size) !important;\r\n    }\r\n}\r\n",
                    "styleUrl": "./select-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SelectListModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SelectListModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"data\">\r\n    <div class=\"dd-select-menu dd-white-bg elevation-04 border-radius-6 w-100-p\">\r\n        <div *ngIf=\"data.searchEnabled && data.items.length > 5\" class=\"dd-select-menu-outer p-spacer-mini border-bottom\">\r\n            <dd-search-input [icon]=\"'dd-icon-search'\" [placeHolder]=\"data.searchPlaceholder\" [autoFocus]=\"true\"\r\n                             (inputValueChanged)=\"onSearchTermChange($event)\">\r\n            </dd-search-input>\r\n        </div>\r\n        <div class=\"dd-select-menu-inner\">\r\n            <ng-container *ngIf=\"data.items | ddSelectFilter:selectFilter as filteredItems\">\r\n                <ng-container *ngIf=\"filteredItems.length > 0; else noFilteredItemsTemplate\">\r\n                    <ng-container *ngFor=\"let item of filteredItems\">\r\n                        <dd-select-item [attr.data-testid]=\"'select-item-' + item.id\" [item]=\"item\" [selected]=\"isSelected(item)\" [variant]=\"data.variant\"\r\n                                        (itemClick)=\"itemSelected($event)\">\r\n                        </dd-select-item>\r\n                    </ng-container>\r\n                </ng-container>\r\n                <ng-template #noFilteredItemsTemplate>\r\n                    <div class=\"dd-select-item dd-white-bg dd-primary-500-fg pl-spacer-mini\" fxLayoutAlign=\"start center\">\r\n                        {{data.searchNoResultsMessage}}\r\n                    </div>\r\n                </ng-template>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SideNavigationComponent",
            "id": "component-SideNavigationComponent-1f84485140bf77679075e123d292c97310bff4b1adebc51dffe660292edc7009e07d7fbfdd82b0f237ab6fc21247c0736ca1edd51f8a21feab79c80faa14688e",
            "file": "projects/digital-delights-library/src/navigation/components/side-navigation/side-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-side-navigation",
            "styleUrls": [
                "./side-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "favoriteNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItems marked as favorites from the sidebar.\n",
                    "description": "<p>Items marked as favorites from the sidebar.</p>\n",
                    "line": 18,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains list of all the navigation elements.\n",
                    "description": "<p>Contains list of all the navigation elements.</p>\n",
                    "line": 13,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 28,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NavigationItem } from '../../models/navigation-models';\r\n\r\n@Component({\r\n    selector: 'dd-side-navigation',\r\n    templateUrl: './side-navigation.component.html',\r\n    styleUrls: ['./side-navigation.component.scss'],\r\n})\r\nexport class SideNavigationComponent {\r\n    /**\r\n     * Contains list of all the navigation elements.\r\n     */\r\n    @Input() navigation?: NavigationItem[];\r\n\r\n    /**\r\n     * Items marked as favorites from the sidebar.\r\n     */\r\n    @Input() favoriteNavigation?: NavigationItem[];\r\n\r\n    /**\r\n     * Click event for the navigation items. For instance, this is useful for analytics.\r\n     */\r\n    @Output() navigationClick: EventEmitter<NavigationItem> = new EventEmitter();\r\n\r\n    /**\r\n     * Output event that item is marked as favorite.\r\n     */\r\n    @Output() markAsFavorite: EventEmitter<NavigationItem> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n\r\n:host {\r\n    width: 320px;\r\n\r\n    @include breakpoints.media-breakpoint('lt-sm') {\r\n        width: 100%;\r\n    }\r\n\r\n    transition: 0.3s;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1 0 auto;\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    -webkit-overflow-scrolling: touch;\r\n    z-index: 1000;\r\n    transform: translateX(-100%);\r\n\r\n    &.open {\r\n        transform: translateX(0);\r\n    }\r\n\r\n    &.locked-open {\r\n        transform: translateX(0) !important;\r\n    }\r\n}\r\n\r\n.navbar-scroll-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1 1 auto;\r\n    overflow-y: auto;\r\n    -webkit-overflow-scrolling: touch;\r\n    // Mimic toolbar top\r\n    padding-top: 56px;\r\n}\r\n\r\n.nav ::ng-deep {\r\n    .nav-item-title {\r\n        padding-left: 24px;\r\n    }\r\n\r\n    .nav-item {\r\n        .nav-link {\r\n            box-sizing: content-box;\r\n            text-decoration: none !important;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            height: 32px;\r\n\r\n            position: relative;\r\n            overflow: hidden;\r\n            cursor: pointer;\r\n            user-select: none;\r\n            color: currentColor;\r\n\r\n            > .nav-link-title {\r\n                flex: 1 1 auto;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            @include hover.hover-transition();\r\n\r\n            .nav-link-icon {\r\n                @include themify.dd-themify() {\r\n                    width: 20px;\r\n                    margin-right: 8px;\r\n                }\r\n            }\r\n\r\n            &.navigation-active {\r\n                @include themify.dd-themify() {\r\n                    box-shadow: inset 4px 0 themify.dd-color('accent');\r\n                    background-color: themify.dd-color('primary-50');\r\n                }\r\n\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        &.nav-collapsable {\r\n            display: block;\r\n\r\n            &.nav-item {\r\n                .nav-link {\r\n                    @include themify.dd-themify() {\r\n                        padding-right: 12px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            > .children {\r\n                > .nav-item {\r\n                    @include themify.dd-themify() {\r\n                        > .nav-link,\r\n                        &.nav-group > .group-title,\r\n                        &.nav-group > .group-items > .nav-item > .nav-link {\r\n                            padding-left: 16px;\r\n                        }\r\n\r\n                        > .children {\r\n                            > .nav-item {\r\n                                > .nav-link,\r\n                                &.nav-group > .group-title,\r\n                                &.nav-group > .group-items > .nav-item > .nav-link {\r\n                                    padding-left: 16px;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            .child-navigation-active {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n\r\n    > .nav-item {\r\n        &.nav-collapsable {\r\n            background: transparent;\r\n            transition: background 200ms ease-in-out;\r\n        }\r\n    }\r\n\r\n    .nav-item {\r\n        .nav-link {\r\n            @include themify.dd-themify() {\r\n                padding-left: 8px;\r\n                padding-right: 8px;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./side-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"navbar-scroll-container dd-white\">\r\n    <ng-content></ng-content>\r\n\r\n    <div class=\"navbar-content scrollbar-content pt-spacer-mini\">\r\n        <div class=\"nav\">\r\n            <ng-container *ngIf=\"favoriteNavigation && favoriteNavigation.length\">\r\n                <ng-container *ngFor=\"let item of favoriteNavigation\">\r\n                    <dd-navigation-item [item]=\"item\" [isFavoriteList]=\"true\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                        (markAsFavorite)=\"markAsFavorite.emit($event)\"></dd-navigation-item>\r\n                </ng-container>\r\n\r\n                <dd-divider></dd-divider>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"navigation\">\r\n                <ng-container *ngFor=\"let item of navigation\">\r\n                    <ng-container *ngIf=\"!item.canNavigate$ || (item.canNavigate$ | async)\">\r\n                        <ng-container [ngSwitch]=\"item.type\">\r\n                            <ng-container *ngSwitchCase=\"'title'\">\r\n                                <dd-navigation-item-title [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                                          (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n                                </dd-navigation-item-title>\r\n                            </ng-container>\r\n                            <ng-container *ngSwitchCase=\"'collapsable'\">\r\n                                <dd-navigation-item-collapsable [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                                                (markAsFavorite)=\"markAsFavorite.emit($event)\">\r\n                                </dd-navigation-item-collapsable>\r\n                            </ng-container>\r\n                            <ng-container *ngSwitchCase=\"'item'\">\r\n                                <dd-navigation-item [item]=\"item\" (navigationClick)=\"navigationClick.emit($event)\"\r\n                                                    (markAsFavorite)=\"markAsFavorite.emit($event)\"></dd-navigation-item>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SnackBarComponent",
            "id": "component-SnackBarComponent-6ab037a08e40dbd97ccd1c20e707a47875233cb3a080787a38c1f254fe657c7b99366b4e73c9720122db2a0092e84a154bb7b37f9147d0a13ac7265f62740133",
            "file": "projects/digital-delights-library/src/notification/components/snack-bar/snack-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-snack-bar",
            "styleUrls": [
                "./snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis input is here to trigger change detection.\nChange detection is not triggered when reference type (snack) changes inside a timeout, when closing notifications.\n",
                    "description": "<p>This input is here to trigger change detection.\nChange detection is not triggered when reference type (snack) changes inside a timeout, when closing notifications.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "snack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SnackBar",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<SnackBar>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<SnackBar>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { SnackBar } from '../../models/notifications-models';\r\n\r\n@Component({\r\n    selector: 'dd-snack-bar',\r\n    templateUrl: './snack-bar.component.html',\r\n    styleUrls: ['./snack-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SnackBarComponent {\r\n    @Input() snack?: SnackBar;\r\n    /**\r\n     * This input is here to trigger change detection.\r\n     * Change detection is not triggered when reference type (snack) changes inside a timeout, when closing notifications.\r\n     */\r\n    @Input() dismiss?: boolean;\r\n\r\n    @Output() closeClick: EventEmitter<SnackBar> = new EventEmitter<SnackBar>();\r\n\r\n    get snackBarClasses(): string | undefined {\r\n        return this.snack?.classes?.join(' ');\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n\r\n.dd-snack-bar {\r\n    transition: transform 0.4s linear;\r\n\r\n    &.dismiss {\r\n        transform: translateY(60px);\r\n    }\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-500');\r\n        color: themify.dd-color-contrast('primary-500');\r\n\r\n        &.error {\r\n            background-color: themify.dd-color('danger');\r\n            color: themify.dd-color-contrast('danger');\r\n        }\r\n\r\n        &.success {\r\n            background-color: themify.dd-color('success');\r\n            color: themify.dd-color-contrast('success');\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./snack-bar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "snackBarClasses": {
                    "name": "snackBarClasses",
                    "getSignature": {
                        "name": "snackBarClasses",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 20
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"snack\">\r\n    <div class=\"dd-snack-bar py-spacer-xmini pl-spacer-basic pr-spacer-mini border-radius-6 elevation-05 {{snackBarClasses}}\" fxLayout=\"row\"\r\n         fxLayoutAlign=\"space-between center\">\r\n        <div class=\"mr-spacer-basic subtitle-1\">{{snack.text}}</div>\r\n        <dd-icon class=\"cursor-pointer\" [icon]=\"'dd-icon-close'\" (click)=\"closeClick.emit(snack)\"></dd-icon>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SnackBarListComponent",
            "id": "component-SnackBarListComponent-c484177496dd87906ee1cf133a47755a97ff4d908a635a9990789947e00c8a4b7619605ff3eb0122557e119c0224eb5e8ec6fc575aae13d4f90a6c678beaaf4a",
            "file": "projects/digital-delights-library/src/notification/components/snack-bar-list/snack-bar-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-snack-bar-list",
            "styleUrls": [
                "./snack-bar-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notifications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SnackBar[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "snack",
                            "type": "SnackBar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snack",
                            "type": "SnackBar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { SnackBar } from '../../models/notifications-models';\r\nimport { SnackBarService } from '../../services/snack-bar.service';\r\n\r\n@Component({\r\n    selector: 'dd-snack-bar-list',\r\n    templateUrl: './snack-bar-list.component.html',\r\n    styleUrls: ['./snack-bar-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class SnackBarListComponent {\r\n    constructor(private snackBarService: SnackBarService) {\r\n        this.notifications$ = this.snackBarService.getNotifications$();\r\n    }\r\n\r\n    readonly notifications$: Observable<SnackBar[]>;\r\n\r\n    close(snack: SnackBar): void {\r\n        this.snackBarService.close(snack.id);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dd-notifications {\r\n    position: fixed;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: 2100;\r\n    min-width: 400px;\r\n    max-width: 400px;\r\n}\r\n",
                    "styleUrl": "./snack-bar-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"notifications$ | async as notifications\">\r\n    <ng-container *ngIf=\"notifications?.length\">\r\n        <div class=\"dd-notifications p-spacer-xmini\" fxLayout=\"column\" fxLayoutAlign=\"end end\" fxLayoutGap=\"8px\">\r\n            <ng-container *ngFor=\"let notification of notifications\">\r\n                <dd-snack-bar [snack]=\"notification\" [dismiss]=\"notification?.dismiss\" (closeClick)=\"close($event)\"></dd-snack-bar>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-8b2811c4e2f5844dfcbd2f30fc02a3b8018cedee5021149fc955037ec270950aee268ecbf68ecb8d9a9d4a44e0f52e93b161616dd21e18c27147f3380378304f",
            "file": "projects/digital-delights-library/src/stepper/components/stepper/stepper.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndex of the selected step.\nSteps are only selectable backwards.\n\nSelected index is needed so we can identify backwards which steps are active.\nRouterLinkActive is not sufficient for this as we don't know previous routes that are active.\n",
                    "description": "<p>Index of the selected step.\nSteps are only selectable backwards.</p>\n<p>Selected index is needed so we can identify backwards which steps are active.\nRouterLinkActive is not sufficient for this as we don&#39;t know previous routes that are active.</p>\n",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput steps, does not render anything if steps are not defined.\n",
                    "description": "<p>Input steps, does not render anything if steps are not defined.</p>\n",
                    "line": 31,
                    "type": "DdStep[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "stepClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the index of step that was clicked.\n",
                    "description": "<p>Outputs the index of step that was clicked.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper for reducing the code in the template.",
                    "description": "<p>Helper for reducing the code in the template.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nexport interface DdStep {\r\n    /**\r\n     * Icon for the step.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Title for the step.\r\n     */\r\n    title: string;\r\n\r\n    /**\r\n     * Router link url for the step.\r\n     * If url is provided then the elements renders elements as div instead of a tag.\r\n     */\r\n    url?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-stepper',\r\n    templateUrl: './stepper.component.html',\r\n    styleUrls: ['./stepper.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StepperComponent {\r\n    /**\r\n     * Input steps, does not render anything if steps are not defined.\r\n     */\r\n    @Input() steps?: DdStep[];\r\n\r\n    /**\r\n     * Index of the selected step.\r\n     * Steps are only selectable backwards.\r\n     *\r\n     * Selected index is needed so we can identify backwards which steps are active.\r\n     * RouterLinkActive is not sufficient for this as we don't know previous routes that are active.\r\n     */\r\n    @Input() selectedIndex: number = 0;\r\n\r\n    /**\r\n     * Outputs the index of step that was clicked.\r\n     */\r\n    @Output() stepClick: EventEmitter<number> = new EventEmitter();\r\n\r\n    /** Helper for reducing the code in the template. */\r\n    getButtonClasses(i: number): { [klass: string]: any } {\r\n        return {\r\n            'border-left border-radius-6-left': i === 0,\r\n            'dd-accent dd-accent-darkest-border border-top border-bottom cursor-pointer dd-accent-darker-hover dd-accent-darkest-active': i <= this.selectedIndex,\r\n            'border-radius-6-right': this.steps && i === this.steps.length - 1,\r\n            bold: i === this.selectedIndex,\r\n            'cursor-not-allowed': i > this.selectedIndex,\r\n            'border-right': i !== this.selectedIndex,\r\n            'move-under-arrow': this.selectedIndex + 1 === i,\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".step-row {\r\n    .step-button {\r\n        height: 52px;\r\n\r\n        margin-top: -1px; // Move the step buttons on top of the 1px border defined in the .step-row\r\n\r\n        &.bold {\r\n            font-weight: bold;\r\n        }\r\n        position: relative;\r\n\r\n        .step-area {\r\n            dd-icon {\r\n                z-index: 2;\r\n            }\r\n            span {\r\n                z-index: 2;\r\n                width: max-content;\r\n            }\r\n        }\r\n\r\n        // Create area below the arrow with white so background does not overflow\r\n        .triangle-below {\r\n            width: 15px;\r\n            height: 52px;\r\n            position: absolute;\r\n            right: -8px;\r\n        }\r\n\r\n        // Create arrow.\r\n        .arrow-triangle {\r\n            position: absolute;\r\n            right: -8px;\r\n            background-color: inherit;\r\n            width: 30px;\r\n            height: 26px;\r\n            z-index: 1;\r\n            transform: rotate(-60deg) skewX(-30deg);\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./stepper.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"steps && steps.length\">\r\n    <div fxLayout=\"column\" fxLayoutAlign=\"start center\" class=\"h-52 w-100-p\">\r\n        <div fxLayout=\"row\" fxFlexFill class=\"w-100-p step-row border-top border-bottom border-radius-6 dd-white\">\r\n            <ng-container *ngFor=\"let step of steps; let i = index\">\r\n                <!-- If step does not have url or the index is less than the selected index then render the element as div. -->\r\n                <ng-container *ngIf=\"step.url && i <= selectedIndex; else notALinkStepTemplate\">\r\n                    <a [routerLink]=\"step.url\" class=\"step-button w-100-p\" [ngClass]=\"getButtonClasses(i)\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\r\n                       (click)=\"stepClick.emit(i)\">\r\n                        <ng-container *ngTemplateOutlet=\"insideStepTemplate; context: {step, i}\"></ng-container>\r\n                    </a>\r\n                </ng-container>\r\n                <ng-template #notALinkStepTemplate>\r\n                    <div class=\"step-button w-100-p\" [ngClass]=\"getButtonClasses(i)\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\r\n                         (click)=\"i <= selectedIndex && stepClick.emit(i)\">\r\n                        <ng-container *ngTemplateOutlet=\"insideStepTemplate; context: {step, i}\"></ng-container>\r\n                    </div>\r\n                </ng-template>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #insideStepTemplate let-step=\"step\" let-i=\"i\">\r\n        <div class=\"p-spacer-mini step-area\" fxFlexFill fxLayout=\"row\" fxLayoutGap-gt-sm=\"8px\" fxLayoutAlign-lt-md=\"center center\" fxLayoutAlign=\"start center\">\r\n            <ng-container *ngIf=\"step.icon\">\r\n                <dd-icon [icon]=\"step.icon\"></dd-icon>\r\n            </ng-container>\r\n            <span fxHide-lt-md>\r\n                {{step.title}}\r\n            </span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"selectedIndex === i && i !== steps.length - 1\">\r\n            <div class=\"arrow-triangle dd-accent-darkest-border border-right border-bottom\"></div>\r\n            <div class=\"triangle-below dd-white border-top border-bottom\"></div>\r\n        </ng-container>\r\n    </ng-template>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-b86b94117ca153caa3b4cd4afa71bc337f31b5f7ec7db27270c2cd6042b9ad24c75adbef9160c0ace4388094d39ada6a6dca8c14f72398e39cc19d469ab21a27",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUsed to determine the selected tab. Can be set as true to set initially selected one.",
                    "description": "<p>Used to determine the selected tab. Can be set as true to set initially selected one.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional icon for the tab. dd-icon.",
                    "description": "<p>Optional icon for the tab. dd-icon.</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRendered with the tab to display the number of any notifications.",
                    "description": "<p>Rendered with the tab to display the number of any notifications.</p>\n",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe title of the tab.",
                    "description": "<p>The title of the tab.</p>\n",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabActivated",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-tab',\r\n    templateUrl: './tab.component.html',\r\n    styleUrls: ['./tab.component.scss'],\r\n})\r\nexport class TabComponent {\r\n    /** The title of the tab. */\r\n    @Input() title: string = '';\r\n\r\n    /** Optional icon for the tab. dd-icon. */\r\n    @Input() icon?: string = '';\r\n\r\n    /** Used to determine the selected tab. Can be set as true to set initially selected one. */\r\n    @Input() active: boolean = false;\r\n\r\n    /** Rendered with the tab to display the number of any notifications. */\r\n    @Input() notifications?: number;\r\n\r\n    @Output() tabActivated: EventEmitter<void> = new EventEmitter<void>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"active\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>\r\n"
        },
        {
            "name": "TabNavigationComponent",
            "id": "component-TabNavigationComponent-241d1497fd0c853fb31f23f4ed2c6aef26bbe8f749e94dc31a8f7d06c0ebe7c9615cb5867e8df37e462bee72b323bfb69b1e88b91f247ee750b04ead2eecc867",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation/tab-navigation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation",
            "styleUrls": [
                "./tab-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editActiveHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeader string to show active edit view.\nThis will be shown instead of the tab navigation.\npreviousNavigation should always be defined together with this.\n",
                    "description": "<p>Header string to show active edit view.\nThis will be shown instead of the tab navigation.\npreviousNavigation should always be defined together with this.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "NavigationItem",
                    "decorators": []
                },
                {
                    "name": "tabNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isOverflowing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "tabContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabs'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabNavigationSelectItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<NavigationItem>[]",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "tabsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'navigationTab'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkOverflow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "constructCollapsedItems",
                    "args": [
                        {
                            "name": "tabs",
                            "type": "NavigationItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tabs",
                            "type": "NavigationItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigationItem } from '@digitaldelightsoy/design-library/src/navigation';\r\nimport { OverlayOpenModel, OverlayService } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { SelectItem, SelectListModel, SelectMenuComponent, SelectMenuOutput } from '@digitaldelightsoy/design-library/src/select';\r\nimport { Subject, debounceTime, delay, fromEvent, take, takeUntil } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'dd-tab-navigation',\r\n    templateUrl: './tab-navigation.component.html',\r\n    styleUrls: ['./tab-navigation.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TabNavigationComponent implements AfterViewInit, OnDestroy {\r\n    constructor(\r\n        private overlayService: OverlayService, //\r\n        private router: Router,\r\n        private cdr: ChangeDetectorRef,\r\n        private route: ActivatedRoute\r\n    ) {\r\n        fromEvent(window, 'resize')\r\n            .pipe(debounceTime(250), takeUntil(this._unsubscribeAllSubject))\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n                this.checkOverflow();\r\n            });\r\n    }\r\n\r\n    @Input() tabNavigation?: NavigationItem[];\r\n\r\n    @Input() previousNavigation?: NavigationItem;\r\n\r\n    /**\r\n     * Header string to show active edit view.\r\n     * This will be shown instead of the tab navigation.\r\n     * previousNavigation should always be defined together with this.\r\n     */\r\n    @Input() editActiveHeader?: string;\r\n\r\n    @Input() closeText?: string;\r\n\r\n    @ViewChild('tabs') tabContainer?: ElementRef;\r\n    @ViewChildren('navigationTab') tabsList?: QueryList<ElementRef>;\r\n\r\n    isOverflowing?: boolean;\r\n\r\n    tabNavigationSelectItems?: SelectItem<NavigationItem>[];\r\n\r\n    overlayModel?: OverlayOpenModel<SelectMenuComponent>;\r\n\r\n    private readonly _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnDestroy(): void {\r\n        this._unsubscribeAllSubject.next(undefined);\r\n        this._unsubscribeAllSubject.complete();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (!this.editActiveHeader) {\r\n            if (this.tabNavigation) {\r\n                this.constructCollapsedItems(this.tabNavigation);\r\n            }\r\n\r\n            this.checkOverflow();\r\n        }\r\n    }\r\n\r\n    onAnchorClick(element: HTMLDivElement): void {\r\n        // Close existing overlay\r\n        if (!!this.overlayModel) {\r\n            this.closeMenu();\r\n            return;\r\n        }\r\n\r\n        if (!this.tabNavigationSelectItems) {\r\n            return;\r\n        }\r\n\r\n        const widthOfMenuelement: number = element.offsetWidth;\r\n\r\n        // Filter out active tab. Compare agains The active route path, without the starting slash.\r\n        const items = this.tabNavigationSelectItems.filter((item) => item.value?.url?.replace('/', '') !== this.route.routeConfig?.path);\r\n\r\n        const data: SelectListModel = {\r\n            items,\r\n            searchEnabled: false,\r\n            variant: 'basic',\r\n        };\r\n\r\n        const config = this.overlayService.getConnectedToConfig<SelectListModel>(element, '.dd-select-menu', data);\r\n\r\n        if (config.overlayConfig) {\r\n            config.overlayConfig.minWidth = widthOfMenuelement;\r\n            config.closeOnOutsidePointerEvents = true;\r\n        }\r\n\r\n        this.overlayModel = this.overlayService.open(SelectMenuComponent, config);\r\n\r\n        this.overlayModel.component.itemClick\r\n            .pipe(\r\n                take(1), //\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe((selection: SelectMenuOutput) => {\r\n                this.router.navigate([selection[0].value.url], { relativeTo: this.route });\r\n                this.closeMenu();\r\n            });\r\n\r\n        this.overlayModel.overlayRef\r\n            .detachments()\r\n            .pipe(\r\n                // Add delay so when clicking anchor (that is outside event) the anchor click happens first and doesnt open a new overlay.\r\n                delay(1),\r\n                take(1),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.closeMenu();\r\n            });\r\n    }\r\n\r\n    /** Helper function to get rid of things. */\r\n    private closeMenu(): void {\r\n        this.overlayModel?.close();\r\n        delete this.overlayModel;\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    private checkOverflow(): void {\r\n        const el: HTMLElement = this.tabContainer?.nativeElement;\r\n        if (!el) {\r\n            return;\r\n        }\r\n\r\n        // Change all tabs to visible so we can check if they fit in the container.\r\n        this.tabsList?.forEach((x) => {\r\n            if (x.nativeElement.style.display !== 'block') {\r\n                x.nativeElement.style.display = 'block';\r\n            }\r\n        });\r\n\r\n        // Calculate if there was a scroll bar activated.\r\n        const hasHorizontalScrollbar: boolean = el.scrollWidth > el.clientWidth;\r\n\r\n        // If scroll bar was found, hide all tabs except the active.\r\n        if (hasHorizontalScrollbar) {\r\n            this.tabsList?.forEach((x) => {\r\n                if (x.nativeElement.classList.contains('active')) {\r\n                    x.nativeElement.style.display = 'block';\r\n                } else {\r\n                    x.nativeElement.style.display = 'none';\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isOverflowing = hasHorizontalScrollbar;\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    private constructCollapsedItems(tabs: NavigationItem[]): void {\r\n        this.tabNavigationSelectItems = tabs.map((item) => ({\r\n            id: item.id,\r\n            text: item.title,\r\n            value: item,\r\n        }));\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/variables/opacity';\r\n\r\n.tab-row {\r\n    min-height: 88px;\r\n    padding-top: 32px;\r\n\r\n    .collapsed {\r\n        .tab-link {\r\n            &:not(.active) {\r\n                display: none;\r\n            }\r\n        }\r\n        .tab-link-select {\r\n            min-width: 120px;\r\n            border-radius: 12px 12px 0 0;\r\n            font-weight: bold;\r\n\r\n            @include themify.dd-themify() {\r\n                background: themify.dd-color('primary-50') !important;\r\n                &:hover {\r\n                    background: themify.dd-color('primary-500', opacity.$opacity-selectable-low) !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .tab-link {\r\n        min-width: 120px;\r\n        max-width: 240px;\r\n        display: block;\r\n\r\n        border-radius: 12px 12px 0 0;\r\n\r\n        // Add opacity for tabs if not active.\r\n        &:not(.active) {\r\n            opacity: 0.6;\r\n        }\r\n\r\n        &.active {\r\n            .button-secondary {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        @include themify.dd-themify() {\r\n            // Hover styles for menu items.\r\n            // Add hover only when it's available, otherwise it will leave button \"focused\" on touch devices.\r\n            @media (hover: hover) {\r\n                &:hover {\r\n                    background: themify.dd-color('primary-500', opacity.$opacity-selectable-low) !important;\r\n                }\r\n            }\r\n\r\n            &:active {\r\n                background: themify.dd-color('primary-500', opacity.$opacity-selectable-medium) !important;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.close-button {\r\n    @include themify.dd-themify() {\r\n        color: themify.dd-color('white') !important;\r\n\r\n        // Hover styles for menu items.\r\n        // Add hover only when it's available, otherwise it will leave button \"focused\" on touch devices.\r\n        @media (hover: hover) {\r\n            &:hover {\r\n                background: themify.dd-color('white', opacity.$opacity-selectable-low) !important;\r\n            }\r\n        }\r\n\r\n        &:active {\r\n            background: themify.dd-color('white', opacity.$opacity-selectable-medium) !important;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./tab-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div [ngClass]=\"editActiveHeader ? 'dd-accent-bg py-spacer-mini' : 'tab-row dd-primary-100-bg'\">\r\n    <div class=\"center-container\">\r\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\">\r\n\r\n            <dd-tab-navigation-previous [previousNavigation]=\"previousNavigation\" [editActive]=\"!!editActiveHeader\"></dd-tab-navigation-previous>\r\n\r\n            <ng-container *ngIf=\"editActiveHeader; else tabNavigationTemplate\">\r\n                <div class=\"w-100-p\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div class=\"ml-spacer-mini dd-white-fg\" fxLayoutAlign=\"start center\">\r\n                        <h5 class=\"data all-caps bold\">{{editActiveHeader}}</h5>\r\n                    </div>\r\n                    <div class=\"mr-spacer-basic\" fxLayoutAlign=\"start start\" *ngIf=\"previousNavigation\">\r\n                        <a class=\"close-button\" [routerLink]=\"previousNavigation.url\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                            <div *ngIf=\"closeText\" class=\"text-body-1\">{{closeText}}</div>\r\n                            <dd-icon [icon]=\"'dd-icon-close'\"></dd-icon>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-template #tabNavigationTemplate>\r\n                <div #tabs fxLayout=\"row\" [ngClass]=\"{'collapsed': isOverflowing}\" class=\"w-100-p overflow-x-auto\">\r\n                    <ng-container *ngFor=\"let item of tabNavigation\">\r\n\r\n                        <a #navigationTab class=\"tab-link dd-white-bg dd-primary-500-fg mr-spacer-mini\" [routerLink]=\"[item.url]\"\r\n                           [routerLinkActive]=\"['active', 'dd-accent-fg']\">\r\n                            <div class=\"cursor-pointer py-spacer-xmini px-spacer-mini h-56\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                <span class=\"pr-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                                    <dd-icon *ngIf=\"item.icon\" [icon]=\"item.icon\">\r\n                                        {{item.icon}}\r\n                                    </dd-icon>\r\n                                </span>\r\n\r\n                                <div fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n                                    <div *ngIf=\"item.title\" class=\"button-secondary dd-primary-500-fg\">\r\n                                        {{item.title}}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </a>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"isOverflowing && tabNavigationSelectItems\">\r\n                        <div #selectAnchor class=\"tab-link-select dd-white-bg dd-primary-500-fg\" (click)=\"onAnchorClick(selectAnchor)\">\r\n                            <div class=\"cursor-pointer py-spacer-xmini px-spacer-mini h-56\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                <div fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n                                    <div class=\"button-secondary dd-primary-500-fg\">\r\n                                        More tabs\r\n                                    </div>\r\n                                </div>\r\n                                <span class=\"pr-spacer-xmini\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                                    <dd-icon [icon]=\"!!overlayModel ? 'dd-icon-arrow-up' : 'dd-icon-arrow-down'\"></dd-icon>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "TabNavigationPreviousComponent",
            "id": "component-TabNavigationPreviousComponent-39eab5746341572d0250a2a41c49bd371bdcd00cdbf0cc9d8d23005d480e756b59b857f89c0ba9955f19f95c6063ed63acb9c9d421a1a9fb72bdadbb4545cfed",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation-previous/tab-navigation-previous.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation-previous",
            "styleUrls": [
                "./tab-navigation-previous.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation-previous.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "editActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { NavigationItem } from '@digitaldelightsoy/design-library/src/navigation';\r\n\r\n@Component({\r\n    selector: 'dd-tab-navigation-previous',\r\n    templateUrl: './tab-navigation-previous.component.html',\r\n    styleUrls: ['./tab-navigation-previous.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TabNavigationPreviousComponent {\r\n    @Input() previousNavigation?: NavigationItem;\r\n    @Input() editActive: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/variables/opacity';\r\n\r\na {\r\n    &.tab-item {\r\n        @include themify.dd-themify() {\r\n            .previous-button {\r\n                color: themify.dd-color('primary-500', opacity.$opacity-selectable-high) !important;\r\n            }\r\n\r\n            // Hover styles for menu items.\r\n            // Add hover only when it's available, otherwise it will leave button \"focused\" on touch devices.\r\n            @media (hover: hover) {\r\n                &:hover {\r\n                    background: themify.dd-color('primary-500', opacity.$opacity-selectable-low) !important;\r\n                }\r\n            }\r\n\r\n            &:active {\r\n                background: themify.dd-color('primary-500', opacity.$opacity-selectable-medium) !important;\r\n            }\r\n\r\n            &.edit-active {\r\n                .previous-button {\r\n                    color: themify.dd-color('white') !important;\r\n                }\r\n\r\n                // Hover styles for menu items.\r\n                // Add hover only when it's available, otherwise it will leave button \"focused\" on touch devices.\r\n                @media (hover: hover) {\r\n                    &:hover {\r\n                        background: themify.dd-color('white', opacity.$opacity-selectable-low) !important;\r\n                    }\r\n                }\r\n\r\n                &:active {\r\n                    background: themify.dd-color('white', opacity.$opacity-selectable-medium) !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./tab-navigation-previous.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- Add previous navigation to the tab navigation if one is defined -->\r\n<ng-container *ngIf=\"previousNavigation\">\r\n    <a [routerLink]=\"previousNavigation.url\" class=\"tab-item button-secondary h-56\" [ngClass]=\"{'edit-active': editActive}\" fxLayout=\"row\"\r\n       fxLayoutAlign=\"start center\">\r\n        <div class=\"previous-button py-spacer-xmini px-spacer-xmini\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n            <dd-icon *ngIf=\"previousNavigation.icon\" [icon]=\"previousNavigation.icon\">\r\n            </dd-icon>\r\n            <div class=\"caption all-caps\">\r\n                {{previousNavigation.title}}\r\n            </div>\r\n        </div>\r\n    </a>\r\n</ng-container>\r\n"
        },
        {
            "name": "TabNavigationV2Component",
            "id": "component-TabNavigationV2Component-f95afc211de8922d8078ff8096767c37aee8162d6ff91cd0c8e046c76e7e9b6cd3c7bc211708087287b79e58bd7c8f07c9844b7b4de6a637b6389b32db3e0b23",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation-v2/tab-navigation-v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation-v2",
            "styleUrls": [
                "./tab-navigation-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationItem",
                    "decorators": []
                },
                {
                    "name": "tabNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NavigationItem } from '@digitaldelightsoy/design-library/src/navigation';\r\n\r\n@Component({\r\n    selector: 'dd-tab-navigation-v2',\r\n    templateUrl: './tab-navigation-v2.component.html',\r\n    styleUrls: ['./tab-navigation-v2.component.scss'],\r\n})\r\nexport class TabNavigationV2Component {\r\n    @Input() tabNavigation?: NavigationItem[];\r\n    @Input() previousNavigation?: NavigationItem;\r\n\r\n    @Output() tabClick: EventEmitter<string> = new EventEmitter();\r\n\r\n    onClick(id: string): void {\r\n        this.tabClick.emit(id);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navigation-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    grid-auto-flow: column;\r\n    justify-content: start;\r\n}\r\n",
                    "styleUrl": "./tab-navigation-v2.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"overflow-hidden overflow-x-auto overflow-y-auto hide-scrollbar navigation-container\">\r\n    <ng-container *ngFor=\"let item of tabNavigation\">\r\n        <a class=\"mr-spacer-xmini mb-spacer-xmini\" #rla=\"routerLinkActive\" [routerLinkActive]=\"'active'\" [routerLinkActiveOptions]=\"{exact: true}\"\r\n           [routerLink]=\"item.url\">\r\n            <dd-chip [chipText]=\"item.title\" [stopPropagation]=\"false\" [chipVariant]=\"'tag'\" [selected]=\"rla.isActive\" [notifications]=\"item.notifications\"\r\n                     (chipClick)=\"onClick(item.id)\"></dd-chip>\r\n        </a>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-bc80497cb243eacba383fe7e87ad5e847aa603ded6f10c0f59b08ce1c3354822418d5930d9a22bedbe485a4ee843f0f09c89239d83ba4dd0867f863390a5c795",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundVariant",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nComponents background can be set to one of the two variants, light or dark. Light background is default.",
                    "description": "<p>Components background can be set to one of the two variants, light or dark. Light background is default.</p>\n",
                    "line": 13,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                },
                {
                    "name": "container",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether there should be a container around the tab content. If not selected only a bottom border is shown.",
                    "description": "<p>Whether there should be a container around the tab content. If not selected only a bottom border is shown.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets only one tab as active and displays its content.",
                    "description": "<p>Sets only one tab as active and displays its content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component, ContentChildren, Input, QueryList } from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Component({\r\n    selector: 'dd-tabs',\r\n    templateUrl: './tabs.component.html',\r\n    styleUrls: ['./tabs.component.scss'],\r\n})\r\nexport class TabsComponent implements AfterContentInit {\r\n    @ContentChildren(TabComponent) tabs!: QueryList<TabComponent>;\r\n\r\n    /** Components background can be set to one of the two variants, light or dark. Light background is default.*/\r\n    @Input() backgroundVariant: 'light' | 'dark' = 'light';\r\n\r\n    /** Whether there should be a container around the tab content. If not selected only a bottom border is shown.*/\r\n    @Input() container?: boolean = false;\r\n\r\n    ngAfterContentInit(): void {\r\n        // Check if there are already active tabs set.\r\n        const activeTabs = this.tabs.filter((tab) => tab.active);\r\n\r\n        // If there are no active tab set, activate the first one.\r\n        if (activeTabs.length === 0) {\r\n            this.selectTab(this.tabs.first);\r\n        }\r\n    }\r\n\r\n    /** Sets only one tab as active and displays its content. */\r\n    selectTab(selectedTab: TabComponent): void {\r\n        // Deactivate all tabs.\r\n        this.tabs.toArray().forEach((tab) => (tab.active = false));\r\n\r\n        if (selectedTab) {\r\n            // Activate user selected tab.\r\n            selectedTab.active = true;\r\n            selectedTab.tabActivated.emit();\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/opacity';\r\n@use '../../../../styles/themes/themify';\r\n\r\n.tab-row {\r\n    min-height: 88px;\r\n    padding-top: 32px;\r\n\r\n    .tab-link {\r\n        position: relative;\r\n        min-width: 120px;\r\n        border-radius: 6px 6px 0 0;\r\n\r\n        // Hover styles for menu items.\r\n        // Add hover only when it's available, otherwise it will leave button \"focused\" on touch devices.\r\n        @media (hover: hover) {\r\n            @include themify.dd-themify() {\r\n                &:hover {\r\n                    background: linear-gradient(0deg, themify.dd-color('white', 0%), themify.dd-color('white', 100%)) !important;\r\n                }\r\n            }\r\n        }\r\n\r\n        .tab-notification {\r\n            position: absolute;\r\n            top: -10px;\r\n            right: 6px;\r\n        }\r\n    }\r\n\r\n    &.light {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('white');\r\n            .active {\r\n                background: linear-gradient(0deg, themify.dd-color('white', 0%), themify.dd-color('white', 100%)) !important;\r\n                box-shadow: 0px 3px 0px themify.dd-color('white');\r\n            }\r\n        }\r\n    }\r\n\r\n    &.dark {\r\n        @include themify.dd-themify() {\r\n            background-color: themify.dd-color('primary-100');\r\n            .active {\r\n                background: linear-gradient(0deg, themify.dd-color('white', 0%), themify.dd-color('white', 100%)) !important;\r\n                box-shadow: 0px 3px 0px themify.dd-color('primary-100');\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<div class=\"tab-row pr-spacer-mini pl-spacer-mini pb-spacer-mini\" fxFlex=\"100\" fxLayout=\"column\" [ngClass]=\"backgroundVariant\">\r\n    <div class=\"center-container ml-spacer-xmini mr-spacer-xmini\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\">\r\n            <ng-container *ngFor=\"let tab of tabs\">\r\n\r\n                <div class=\"tab-link border-top border-left border-right dd-primary-400-fg\" [ngClass]=\"{'active': tab.active}\" (click)=\"selectTab(tab)\">\r\n                    <div *ngIf=\"tab.notifications !== undefined && tab.notifications !== null\"\r\n                         [ngClass]=\"{'dd-success': tab.notifications === 0, 'dd-danger': tab.notifications > 0}\"\r\n                         class=\"border-radius-16 px-spacer-solo h-20 min-w-20 tab-notification\" fxLayoutAlign=\"center center\">\r\n                        <span>{{tab.notifications}}</span>\r\n                    </div>\r\n\r\n                    <div class=\"cursor-pointer py-spacer-xmini px-spacer-mini h-56\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <span *ngIf=\"tab.icon\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                            <dd-icon [icon]=\"tab.icon\">{{tab.icon}}\r\n                            </dd-icon>\r\n                        </span>\r\n\r\n                        <div fxLayout=\"column\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\r\n                            <div *ngIf=\"tab.title\" class=\"button-secondary\" [ngClass]=\"{'strong dd-primary-500-fg': tab.active}\">\r\n                                {{tab.title}}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"border-bottom border-top dd-primary-200-border-bottom dd-primary-200-border-top pt-spacer-mini pb-spacer-mini\"\r\n         [ngClass]=\"{'border border-radius-6': container}\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "TabsV2Component",
            "id": "component-TabsV2Component-6ccfd3837284a2cd3a8a993e2bc529adddbd79731215765a70003441982916da50e7573a9d9125f9dadd6a88b1125f7148e599b49bb6fd6df6cca544cd63ba81",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tabs-v2/tabs-v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tabs-v2",
            "styleUrls": [
                "./tabs-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hideTabs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets only one tab as active and displays its content.",
                    "description": "<p>Sets only one tab as active and displays its content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component, ContentChildren, Input, QueryList } from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Component({\r\n    selector: 'dd-tabs-v2',\r\n    templateUrl: './tabs-v2.component.html',\r\n    styleUrls: ['./tabs-v2.component.scss'],\r\n})\r\nexport class TabsV2Component implements AfterContentInit {\r\n    // Option to hide tabs. The use case for this is for example if tabs are created dynamically and should be hidden every time there is only one of them.\r\n    @Input() hideTabs: boolean = false;\r\n    @ContentChildren(TabComponent) tabs!: QueryList<TabComponent>;\r\n\r\n    ngAfterContentInit(): void {\r\n        // Check if there are already active tabs set.\r\n        const activeTabs = this.tabs.filter((tab) => tab.active);\r\n\r\n        // If there are no active tab set, activate the first one.\r\n        if (activeTabs.length === 0) {\r\n            this.selectTab(this.tabs.first);\r\n        }\r\n    }\r\n\r\n    /** Sets only one tab as active and displays its content. */\r\n    selectTab(selectedTab: TabComponent): void {\r\n        // Deactivate all tabs.\r\n        this.tabs.toArray().forEach((tab) => (tab.active = false));\r\n\r\n        if (selectedTab) {\r\n            // Activate user selected tab.\r\n            selectedTab.active = true;\r\n            selectedTab.tabActivated.emit();\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navigation-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    grid-auto-flow: column;\r\n    justify-content: start;\r\n}\r\n",
                    "styleUrl": "./tabs-v2.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ng-container *ngIf=\"!hideTabs\">\r\n    <div class=\"overflow-hidden overflow-x-auto overflow-y-auto hide-scrollbar navigation-container\">\r\n        <ng-container *ngFor=\"let item of tabs\">\r\n            <dd-chip class=\"mr-spacer-xmini mb-spacer-xmini\" [chipText]=\"item.title\" [chipVariant]=\"'tag'\" [selected]=\"item.active\"\r\n                     [notifications]=\"item.notifications\" (chipClick)=\"selectTab(item)\"></dd-chip>\r\n        </ng-container>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-content></ng-content>\r\n"
        },
        {
            "name": "TextButtonComponent",
            "id": "component-TextButtonComponent-d346f4f375c2ec1302c695feac9d4fff847076257a38574b860a4337b992ee425cdfcce26b663667d5be48126a473c5850667a3711485e853944ded5d667be0a",
            "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-text-button",
            "styleUrls": [
                "./text-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds aria label to the button.\n",
                    "description": "<p>Adds aria label to the button.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton type.\nSubmit should be used inside forms.\n",
                    "description": "<p>Button type.\nSubmit should be used inside forms.</p>\n",
                    "line": 51,
                    "type": "\"button\" | \"submit\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the color of the button.\n",
                    "description": "<p>Defines the color of the button.</p>\n",
                    "line": 25,
                    "type": "TextButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMakes the button disabled, button does not output anything when it's disabled.\n",
                    "description": "<p>Makes the button disabled, button does not output anything when it&#39;s disabled.</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the button.\n",
                    "description": "<p>Defines the size of the button.</p>\n",
                    "line": 30,
                    "type": "TextButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 45,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\n",
                    "description": "<p>Text for the button.</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds link support to button click.\n",
                    "description": "<p>Adds link support to button click.</p>\n",
                    "line": 40,
                    "type": "string | string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the click event from the button.\n",
                    "description": "<p>Outputs the click event from the button.</p>\n",
                    "line": 56,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits click event for the button if it's not disabled.\n",
                    "description": "<p>Emits click event for the button if it&#39;s not disabled.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nexport type TextButtonColor = 'primary' | 'secondary';\r\nexport type TextButtonSize = 'large' | 'normal' | 'mini';\r\n\r\n@Component({\r\n    selector: 'dd-text-button',\r\n    templateUrl: './text-button.component.html',\r\n    styleUrls: ['./text-button.component.scss'],\r\n})\r\nexport class TextButtonComponent {\r\n    /**\r\n     * Text for the button.\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * Makes the button disabled, button does not output anything when it's disabled.\r\n     */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * Defines the color of the button.\r\n     */\r\n    @Input() color: TextButtonColor = 'secondary';\r\n\r\n    /**\r\n     * Defines the size of the button.\r\n     */\r\n    @Input() size: TextButtonSize = 'normal';\r\n\r\n    /**\r\n     * Adds aria label to the button.\r\n     */\r\n    @Input() ariaLabel?: string;\r\n\r\n    /**\r\n     * Adds link support to button click.\r\n     */\r\n    @Input() url?: string | string[];\r\n\r\n    /**\r\n     * Allows url to be opened in new tab.\r\n     */\r\n    @Input() target?: '_blank';\r\n\r\n    /**\r\n     * Button type.\r\n     * Submit should be used inside forms.\r\n     */\r\n    @Input() buttonType?: 'button' | 'submit' = 'button';\r\n\r\n    /**\r\n     * Outputs the click event from the button.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Emits click event for the button if it's not disabled.\r\n     */\r\n    onButtonClick(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.buttonClick.emit();\r\n    }\r\n\r\n    /**\r\n     * ngClass selector for the button.\r\n     */\r\n    get buttonClasses(): { [klass: string]: boolean } {\r\n        return {\r\n            strong: true,\r\n            large: this.size === 'large',\r\n            mini: this.size === 'mini',\r\n            'btn-disabled': this.disabled === true,\r\n            'dd-accent-fg dd-accent-darkest-fg-hover': this.color === 'secondary',\r\n            'dd-primary-500-fg-hover': this.color === 'primary',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n\r\nbutton,\r\na {\r\n    background-color: transparent !important;\r\n    font-size: 14px;\r\n    text-decoration: underline;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    border: none !important;\r\n\r\n    &.mini {\r\n        font-size: 12px;\r\n    }\r\n    &.normal {\r\n        font-size: 14px;\r\n    }\r\n    &.large {\r\n        font-size: 16px;\r\n    }\r\n\r\n    &:active {\r\n        box-shadow: none !important;\r\n    }\r\n\r\n    &.btn-disabled {\r\n        cursor: default;\r\n        box-shadow: unset !important;\r\n        pointer-events: none !important;\r\n        opacity: opacity.$opacity-button-disabled !important;\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n",
                    "styleUrl": "./text-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 72,
                        "rawdescription": "\n\nngClass selector for the button.\n",
                        "description": "<p>ngClass selector for the button.</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n    <a [ngClass]=\"buttonClasses\" [routerLink]=\"url\" [target]=\"target\" [attr.aria-label]=\"ariaLabel\" (click)=\"onButtonClick()\">\r\n        {{text}}\r\n    </a>\r\n</ng-container>\r\n<ng-template #buttonWithoutRoutingTemplate>\r\n    <button [ngClass]=\"buttonClasses\" [type]=\"buttonType\" [attr.aria-label]=\"ariaLabel\" (click)=\"onButtonClick()\">\r\n        <div>{{text}}</div>\r\n    </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "TileComponent",
            "id": "component-TileComponent-9fa0fc710029de17eab23dab5025b7bd8df967f109f9c48fe4ed8786e69a1d358836c376f8381167e24e7b9ee612fd419e459c77f27236467b992b8e7e5c3309",
            "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nexport type TileVariant = 'basic' | 'border-radius';\r\n\r\n@Component({\r\n    selector: 'dd-tile',\r\n    templateUrl: './tile.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TileComponent {\r\n    /**\r\n     * Default 'basic' variant renders tile without border radius.\r\n     * 'border-radius' adds 'border-radius-6' class to the tile.\r\n     */\r\n    @Input() variant: TileVariant = 'basic';\r\n\r\n    /**\r\n     * Helper classes for the ngClass.\r\n     */\r\n    get tileClass(): { [klass: string]: boolean } {\r\n        return { 'border-radius-6': this.variant === 'border-radius' };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "tileClass": {
                    "name": "tileClass",
                    "getSignature": {
                        "name": "tileClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nHelper classes for the ngClass.\n",
                        "description": "<p>Helper classes for the ngClass.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"h-100-p cursor-pointer elevation-01 hover-elevation-03 dd-white\" fxLayout=\"row\" fxLayoutAlign=\"center center\" [ngClass]=\"tileClass\">\r\n    <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "TileFixedComponent",
            "id": "component-TileFixedComponent-cd77684743e90fadd496279b288d0842be0df681445745e141884bad63fc04301ac10fb8f42019d4b94e8c4d04dcf5d7f75357f9efe6875adbe48a66a3368b74",
            "file": "projects/digital-delights-library/src/tile/components/tile-fixed/tile-fixed.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile-fixed",
            "styleUrls": [
                "./tile-fixed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-fixed.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional background color. Default is 'dd-white'.\n",
                    "description": "<p>Optional background color. Default is &#39;dd-white&#39;.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional body text. Too long text will be truncated.\n",
                    "description": "<p>Optional body text. Too long text will be truncated.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional heading for the tile.\n",
                    "description": "<p>Optional heading for the tile.</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the tile. 'Basic' is 272px and 'small' is 140px high.\nDefault is 'basic'.\n",
                    "description": "<p>Size of the tile. &#39;Basic&#39; is 272px and &#39;small&#39; is 140px high.\nDefault is &#39;basic&#39;.</p>\n",
                    "line": 15,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'dd-primary-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional text color. Default is 'dd-primary-500-fg'.\n",
                    "description": "<p>Optional text color. Default is &#39;dd-primary-500-fg&#39;.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSupports data and normal fonts.\n",
                    "description": "<p>Supports data and normal fonts.</p>\n",
                    "line": 30,
                    "type": "\"data\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { TileComponent } from '../tile/tile.component';\r\n\r\n@Component({\r\n    selector: 'dd-tile-fixed',\r\n    templateUrl: './tile-fixed.component.html',\r\n    styleUrls: ['./tile-fixed.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TileFixedComponent extends TileComponent {\r\n    /**\r\n     * Size of the tile. 'Basic' is 272px and 'small' is 140px high.\r\n     * Default is 'basic'.\r\n     */\r\n    @Input() size: 'basic' | 'small' = 'basic';\r\n\r\n    /**\r\n     * Optional heading for the tile.\r\n     */\r\n    @Input() header?: string;\r\n\r\n    /**\r\n     * Optional body text. Too long text will be truncated.\r\n     */\r\n    @Input() bodyText?: string;\r\n\r\n    /**\r\n     * Supports data and normal fonts.\r\n     */\r\n    @Input() textVariant: 'data' | 'default' = 'default';\r\n\r\n    /**\r\n     * Optional background color. Default is 'dd-white'.\r\n     */\r\n    @Input() backgroundColor?: string = 'dd-white';\r\n\r\n    /**\r\n     * Optional text color. Default is 'dd-primary-500-fg'.\r\n     */\r\n    @Input() textColor?: string = 'dd-primary-500';\r\n\r\n    /**\r\n     * Helper classes for the ngClass.\r\n     */\r\n    get tileClass(): { [klass: string]: boolean } {\r\n        return {\r\n            'border-radius-6': this.variant === 'border-radius', //\r\n            'h-140': this.size === 'small',\r\n            'h-272': this.size === 'basic',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n\r\n.tile-fixed {\r\n    position: relative;\r\n}\r\n\r\n.text-truncate {\r\n    &.small {\r\n        -webkit-line-clamp: 3;\r\n    }\r\n\r\n    &.basic {\r\n        -webkit-line-clamp: 9;\r\n    }\r\n\r\n    &.basic.data {\r\n        -webkit-line-clamp: 12;\r\n    }\r\n}\r\n",
                    "styleUrl": "./tile-fixed.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "TileComponent"
            ],
            "accessors": {
                "tileClass": {
                    "name": "tileClass",
                    "getSignature": {
                        "name": "tileClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 45,
                        "rawdescription": "\n\nHelper classes for the ngClass.\n",
                        "description": "<p>Helper classes for the ngClass.</p>\n"
                    }
                }
            },
            "templateData": "<div [ngClass]=\"tileClass\" class=\"w-240 tile-fixed elevation-01 hover-elevation-03 py-spacer-xmini px-spacer-mini {{backgroundColor}} {{textColor}}-fg\"\r\n     fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n    <ng-container *ngIf=\"header || bodyText; else customTemplate\">\r\n        <!-- header -->\r\n        <div class=\"h-36\" fxLayoutAlign=\"start center\">\r\n            <ng-container *ngIf=\"header; else customHeaderTemplate\">\r\n                <div class=\"h6 semibold\">{{ header }}</div>\r\n            </ng-container>\r\n            <ng-template #customHeaderTemplate>\r\n                <ng-content select=\"[header]\"></ng-content>\r\n            </ng-template>\r\n        </div>\r\n\r\n        <!-- body -->\r\n        <ng-container *ngIf=\"bodyText; else customBodyTemplate\">\r\n            <div class=\"text-truncate\" [ngClass]=\"{'text-body-1 data': textVariant === 'data', 'small': size === 'small', 'basic': size === 'basic'}\">\r\n                {{ bodyText }}\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #customBodyTemplate>\r\n            <ng-content select=\"[body]\"></ng-content>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-template #customTemplate>\r\n        <ng-content select=\"[customContent]\"></ng-content>\r\n    </ng-template>\r\n\r\n    <!-- footer -->\r\n    <ng-content select=\"[footer]\"></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "TileFooterComponent",
            "id": "component-TileFooterComponent-98171a9cf5b6b23627fbc9bb8489af87ee893de8b3031cca30b1cb931c480b90ffcb244f28c9afe16b2c19bc2c664ae27efccdcd2ef7a368abcc7dba21474e48",
            "file": "projects/digital-delights-library/src/tile/components/tile-footer/tile-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile-footer",
            "styleUrls": [
                "./tile-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAlign text and icon. Default is 'start'.\n",
                    "description": "<p>Align text and icon. Default is &#39;start&#39;.</p>\n",
                    "line": 44,
                    "type": "\"start\" | \"center\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds aria label to the button.\n",
                    "description": "<p>Adds aria label to the button.</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional background color. If left out, footer will be transparent.\n",
                    "description": "<p>Optional background color. If left out, footer will be transparent.</p>\n",
                    "line": 14,
                    "type": "template literal type",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional icon.\n",
                    "description": "<p>Optional icon.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional icon color. Default is defined by textColor.\n",
                    "description": "<p>Optional icon color. Default is defined by textColor.</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the icons. Default is the configured default icon size.\n",
                    "description": "<p>Size of the icons. Default is the configured default icon size.</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 54,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCTA text\n",
                    "description": "<p>CTA text</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'dd-primary-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional text color. Default is 'dd-primary-500'.\n",
                    "description": "<p>Optional text color. Default is &#39;dd-primary-500&#39;.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional url.\n",
                    "description": "<p>Optional url.</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional body text. Too long text will be truncated.\n",
                    "description": "<p>Optional body text. Too long text will be truncated.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional heading for the tile.\n",
                    "description": "<p>Optional heading for the tile.</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the tile. 'Basic' is 272px and 'small' is 140px high.\nDefault is 'basic'.\n",
                    "description": "<p>Size of the tile. &#39;Basic&#39; is 272px and &#39;small&#39; is 140px high.\nDefault is &#39;basic&#39;.</p>\n",
                    "line": 15,
                    "type": "\"basic\" | \"small\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSupports data and normal fonts.\n",
                    "description": "<p>Supports data and normal fonts.</p>\n",
                    "line": 30,
                    "type": "\"data\" | \"default\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 64,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TileFixedComponent } from '../tile-fixed/tile-fixed.component';\r\n\r\n@Component({\r\n    selector: 'dd-tile-footer',\r\n    templateUrl: './tile-footer.component.html',\r\n    styleUrls: ['./tile-footer.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TileFooterComponent extends TileFixedComponent {\r\n    /**\r\n     * Optional background color. If left out, footer will be transparent.\r\n     */\r\n    @Input() backgroundColor?: `dd-${string}` = undefined;\r\n\r\n    /**\r\n     * CTA text\r\n     */\r\n    @Input() text?: string;\r\n\r\n    /**\r\n     * Optional text color. Default is 'dd-primary-500'.\r\n     */\r\n    @Input() textColor?: string = 'dd-primary-500';\r\n\r\n    /**\r\n     * Optional icon.\r\n     */\r\n    @Input() icon?: string;\r\n\r\n    /**\r\n     * Optional icon color. Default is defined by textColor.\r\n     */\r\n    @Input() iconColor?: string = undefined;\r\n\r\n    /**\r\n     * Size of the icons. Default is the configured default icon size.\r\n     */\r\n    @Input() iconSize?: string;\r\n\r\n    /**\r\n     * Align text and icon. Default is 'start'.\r\n     */\r\n    @Input() align?: 'start' | 'center' | 'end' = 'start';\r\n\r\n    /**\r\n     * Optional url.\r\n     */\r\n    @Input() url?: string;\r\n\r\n    /**\r\n     * Allows url to be opened in new tab.\r\n     */\r\n    @Input() target?: '_blank';\r\n\r\n    /**\r\n     * Adds aria label to the button.\r\n     */\r\n    @Input() ariaLabel?: string;\r\n\r\n    /**\r\n     * Emit the button click event.\r\n     */\r\n    @Output() buttonClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    get tileFooterFlexLayout(): string {\r\n        return this.align + ' ' + 'center';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/helpers/hover';\r\n@use '../../../../styles/variables/opacity';\r\n\r\nbutton {\r\n    text-align: center;\r\n    background: transparent;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    text-decoration: none !important;\r\n    border: none !important;\r\n\r\n    &:active {\r\n        box-shadow: none !important;\r\n    }\r\n\r\n    @include hover.hover-transition();\r\n}\r\n\r\n.tile-footer {\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n\r\n    dd-icon {\r\n        margin-left: -5px;\r\n        margin-top: 2px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./tile-footer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "TileFixedComponent"
            ],
            "accessors": {
                "tileFooterFlexLayout": {
                    "name": "tileFooterFlexLayout",
                    "getSignature": {
                        "name": "tileFooterFlexLayout",
                        "type": "string",
                        "returnType": "string",
                        "line": 66
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"url; else buttonWithoutRoutingTemplate\">\r\n    <a class=\"{{textColor}}-fg h-32 {{backgroundColor}} tile-footer px-spacer-mini py-spacer-xmini\" fxLayout=\"row\" [attr.fxLayoutAlign]=\"tileFooterFlexLayout\"\r\n       [ngClass]=\"{ 'border-radius-6-bottom': variant === 'border-radius' }\" [target]=\"target\" [routerLink]=\"url\" fxFlex=\"0 1 auto\" fxLayout=\"row\"\r\n       [attr.aria-label]=\"ariaLabel\" (click)=\"buttonClick.emit()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </a>\r\n</ng-container>\r\n<ng-template #buttonWithoutRoutingTemplate>\r\n    <button class=\"{{textColor}}-fg h-32 {{backgroundColor}} tile-footer px-spacer-mini py-spacer-xmini\" fxLayout=\"row\"\r\n            [attr.fxLayoutAlign]=\"tileFooterFlexLayout\" [ngClass]=\"{ 'border-radius-6-bottom': variant === 'border-radius' }\" [type]=\"'button'\"\r\n            fxFlex=\"0 1 auto\" fxLayout=\"row\" [attr.aria-label]=\"ariaLabel\" (click)=\"buttonClick.emit()\">\r\n        <ng-container *ngTemplateOutlet=\"insideButtonTemplate\"></ng-container>\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #insideButtonTemplate>\r\n    <span class=\"text-body-1 mr-spacer-solo\" [ngClass]=\"{'data': textVariant === 'data'}\">\r\n        {{text}}\r\n    </span>\r\n    <div *ngIf=\"icon\">\r\n        <dd-icon class=\"{{iconColor}}-fg\" [icon]=\"icon\" [size]=\"iconSize\">\r\n        </dd-icon>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ToggleSliderComponent",
            "id": "component-ToggleSliderComponent-9b42f2b76c1cec5e73fd25be074220494faa22b92d3b80881b7faaedd089f720d9c8b726c97be22e318f346c027c7c4edda39c46ab268d729a92753289c52f9f",
            "file": "projects/digital-delights-library/src/input/components/toggle-slider/toggle-slider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-toggle-slider",
            "styleUrls": [
                "./toggle-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sliderClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an click event for the input.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits an click event for the input.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 20,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.\n",
                    "description": "<p>Handles event change for the component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dd-toggle-slider',\r\n    templateUrl: './toggle-slider.component.html',\r\n    styleUrls: ['./toggle-slider.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToggleSliderComponent {\r\n    /** If the input is checked. */\r\n    @Input() checked: boolean = false;\r\n\r\n    /** If the input is disabled. */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * Emits an click event for the input.\r\n     * Parent should always handle the event and switch the inputs for the component.\r\n     */\r\n    @Output() private sliderClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    readonly uniqueId: string = Math.random().toString(36).substring(2);\r\n\r\n    /**\r\n     * Handles event change for the component.\r\n     * First makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\r\n     * Then outpus the input click event.\r\n     */\r\n    handleChangeEvent(event: any): void {\r\n        // Cancel the assingment of the checked variable in the scope of this component.\r\n        // eslint-disable-next-line eqeqeq\r\n        if (event?.target?.checked != undefined) {\r\n            event.target.checked = this.checked;\r\n        }\r\n\r\n        // Emit the input click event to the parent.\r\n        this.sliderClick.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/themes/themify';\r\n@use '../../../../styles/helpers/hover';\r\n\r\n.toggle-slider {\r\n    @include themify.dd-themify() {\r\n        height: themify.dd-configuration('inputs', default-size);\r\n    }\r\n}\r\n\r\n.disabled {\r\n    cursor: default !important;\r\n    opacity: 0.6 !important;\r\n}\r\n\r\n.switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 53px;\r\n    max-width: none;\r\n    height: 24px;\r\n}\r\n.switch input {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n}\r\n.slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n    border-radius: 8px;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('primary-200');\r\n    }\r\n}\r\n.slider:before {\r\n    position: absolute;\r\n    content: '';\r\n    height: 18px;\r\n    width: 18px;\r\n    left: 5px;\r\n    bottom: 3px;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n    border-radius: 50%;\r\n\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('white');\r\n    }\r\n}\r\n\r\ninput:checked + .slider {\r\n    @include themify.dd-themify() {\r\n        background-color: themify.dd-color('accent');\r\n    }\r\n}\r\n\r\ninput:not([disabled]):hover + .slider {\r\n    @include hover.hover-transition();\r\n\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-50') !important;\r\n    }\r\n}\r\n\r\ninput:not([disabled]):focus + .slider {\r\n    @include themify.dd-themify() {\r\n        box-shadow: 0 0 0 4px themify.dd-color('primary-100') !important;\r\n    }\r\n}\r\n\r\ninput:checked + .slider:before {\r\n    -webkit-transform: translateX(26px);\r\n    -ms-transform: translateX(26px);\r\n    transform: translateX(26px);\r\n}\r\n",
                    "styleUrl": "./toggle-slider.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"toggle-slider\" fxLayoutAlign=\"center center\" [ngClass]=\"{'disabled': disabled}\">\r\n    <label class=\"switch\" [id]=\"uniqueId\">\r\n        <input [type]=\"'checkbox'\" [checked]=\"checked\" [disabled]=\"disabled\" (change)=\"handleChangeEvent($event)\">\r\n        <span class=\"slider\" [ngClass]=\"{'disabled': disabled}\"></span>\r\n    </label>\r\n</div>\r\n"
        },
        {
            "name": "ToolbarTopComponent",
            "id": "component-ToolbarTopComponent-4403fc3f7a9cdbcc83e5ecb30a77079cdcaf4817c23a74d26f8331dce5e610c17d90e562352a40b018714e693f08c7a89473a8a0e47bacc9c547a15bdca2c1c0",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-toolbar-top",
            "styleUrls": [
                "./toolbar-top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar-top.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the top bar.\n",
                    "description": "<p>Configuration for the top bar.</p>\n",
                    "line": 178,
                    "type": "TopbarConfiguration",
                    "decorators": []
                },
                {
                    "name": "hideButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHides the top bar button.",
                    "description": "<p>Hides the top bar button.</p>\n",
                    "line": 173,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 180,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 187,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SearchInputComponent",
                    "optional": true,
                    "description": "",
                    "line": 182,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SearchInputComponent, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "showMobileSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "unlisten",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Unlisten",
                    "optional": true,
                    "description": "",
                    "line": 186,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMobileSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the mobile search element.\n",
                    "description": "<p>Toggles the mobile search element.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { SearchInputComponent } from '@digitaldelightsoy/design-library/src/input';\r\nimport { BindingsDictionary, HotkeysService, Unlisten } from '@digitaldelightsoy/design-library/src/services';\r\nimport { Subject, filter, takeUntil } from 'rxjs';\r\n\r\nexport interface TopbarConfiguration {\r\n    /**\r\n     * Renders a text next to the menu button on larger screens.\r\n     */\r\n    menuText?: string;\r\n\r\n    /**\r\n     * Topbar logo configuration.\r\n     * If configuration is not provided, logo is not rendered.\r\n     */\r\n    logo?: TopbarLogo;\r\n\r\n    /**\r\n     * Topbar user button configuration.\r\n     * If configuration is not provided, user button is not rendered.\r\n     */\r\n    user?: TopbarUser;\r\n\r\n    /**\r\n     * Topbar additional buttons configuration.\r\n     * If configuration is not provided, additional buttons are not rendered.\r\n     *\r\n     * Only one button can be shown on smallest mobile screen size.\r\n     */\r\n    additionalButtons?: TopbarAdditionalButton[];\r\n\r\n    /**\r\n     * Topbar search configuration.\r\n     * If configuration is not provided, search is not rendered.\r\n     */\r\n    search?: TopbarSearchConfiguration;\r\n}\r\n\r\nexport interface TopbarSearchConfiguration {\r\n    /**\r\n     * Placeholder text for the search input.\r\n     */\r\n    searchPlaceholder: string;\r\n\r\n    /**\r\n     * Output event when user has searched for something.\r\n     * Emits a list that contains the search string and references the the search container.\r\n     */\r\n    searchEvent: (searchText: string, searchContainer: HTMLElement) => void;\r\n\r\n    /**\r\n     * List of hotkeys that are used to trigger the search.\r\n     */\r\n    hotkeyList?: { key: string; ctrlKey?: boolean; altKey?: boolean; shiftKey?: boolean }[];\r\n}\r\n\r\n/**\r\n * Topbar user button configuration.\r\n */\r\nexport interface TopbarUser {\r\n    /**\r\n     * First name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last name of the user.\r\n     * Names are split to two so initials can be rendered.\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Description text for the user button.\r\n     * This is rendered under the user name.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Image url for the user button.\r\n     * If not provided, the user button is rendered with initials of the user.\r\n     */\r\n    imageUrl?: string;\r\n\r\n    /**\r\n     * Click event for the user button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders buttons on the right side of the top bar.\r\n * The buttons are placed on the left side of the user button.\r\n */\r\nexport interface TopbarAdditionalButton {\r\n    /**\r\n     * Icon for the button.\r\n     */\r\n    icon: string;\r\n\r\n    /**\r\n     * Color of the badge.\r\n     * If not provided, the defaults to danger color.\r\n     */\r\n    badgeColor?: string;\r\n\r\n    /**\r\n     * Shows a badge with the given text.\r\n     * If not provided, the badge is not rendered.\r\n     */\r\n    badgeText?: string;\r\n\r\n    /**\r\n     * If the button should be shown on small screens mobile.\r\n     * Only the first button where this is true is shown on mobile.\r\n     */\r\n    showOnMobile?: boolean;\r\n\r\n    /**\r\n     * Click event for the topbar button.\r\n     */\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Renders a logo to the top bar.\r\n * The logo is rendered on the left side of the top bar.\r\n * The logo will always route to the home ('/' route) page.\r\n */\r\nexport interface TopbarLogo {\r\n    /**\r\n     * Logo url.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Color of the background of the logo.\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Title is rendered on the right side of the logo.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * Small text rendered on top of the logo.\r\n     */\r\n    additionalText?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'dd-toolbar-top',\r\n    templateUrl: './toolbar-top.component.html',\r\n    styleUrls: ['./toolbar-top.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarTopComponent implements OnInit, OnDestroy {\r\n    constructor(private cdr: ChangeDetectorRef, private hotkeys: HotkeysService, router: Router) {\r\n        // Make sure the mobile search is closed when navigation happens.\r\n        router.events\r\n            .pipe(\r\n                filter((event) => event instanceof NavigationEnd),\r\n                takeUntil(this._unsubscribeAllSubject)\r\n            )\r\n            .subscribe(() => {\r\n                this.showMobileSearch = false;\r\n            });\r\n    }\r\n\r\n    /** Hides the top bar button. */\r\n    @Input() hideButton: boolean = false;\r\n\r\n    /**\r\n     * Configuration for the top bar.\r\n     */\r\n    @Input() configuration?: TopbarConfiguration;\r\n\r\n    @Output() menuClick: EventEmitter<void> = new EventEmitter();\r\n\r\n    @ViewChild(SearchInputComponent, { static: false }) private searchInput?: SearchInputComponent;\r\n\r\n    showMobileSearch: boolean = false;\r\n\r\n    private unlisten?: Unlisten;\r\n    private _unsubscribeAllSubject: Subject<undefined> = new Subject();\r\n\r\n    ngOnInit(): void {\r\n        // If there are hotkeys then create the listener for them.\r\n        if (this.configuration?.search?.hotkeyList?.length) {\r\n            const bindings: BindingsDictionary = {};\r\n\r\n            // Go through all the hotkeys and create bindings for them.\r\n            this.configuration.search.hotkeyList.forEach((hotkey) => {\r\n                bindings[hotkey.key] = (event: KeyboardEvent) => {\r\n                    if (hotkey.ctrlKey && !event.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.altKey && !event.altKey) {\r\n                        return;\r\n                    }\r\n                    if (hotkey.shiftKey && !event.shiftKey) {\r\n                        return;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    this.searchInput?.searchInputElement?.nativeElement.focus();\r\n                };\r\n            });\r\n\r\n            // Create the listener for the hotkeys.\r\n            this.unlisten = this.hotkeys.listen(bindings, {\r\n                priority: 99,\r\n                emitInputs: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unlisten?.();\r\n    }\r\n\r\n    /**\r\n     * Get user initials from the given user.\r\n     */\r\n    get userInitials(): string {\r\n        if (!this.configuration?.user) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.configuration.user.firstName[0]}${this.configuration.user.lastName[0]}`.trim();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the first additional button that should be shown on mobile.\r\n     */\r\n    get additionalMobileButtonIndex(): number | undefined {\r\n        if (!this.configuration?.additionalButtons) {\r\n            return -1;\r\n        }\r\n\r\n        return this.configuration.additionalButtons.findIndex((button) => button.showOnMobile);\r\n    }\r\n\r\n    /**\r\n     * Toggles the mobile search element.\r\n     */\r\n    toggleMobileSearch(): void {\r\n        this.showMobileSearch = !this.showMobileSearch;\r\n\r\n        this.cdr.markForCheck();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/variables/breakpoints';\r\n@use '../../../../styles/themes/themify';\r\n\r\n// Generic styles for the toolbar.\r\n.dd-topbar-top {\r\n    white-space: nowrap;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: 2000;\r\n    height: 56px;\r\n\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n\r\n    @include breakpoints.media-breakpoint('xxs') {\r\n        padding-left: 4px;\r\n        padding-right: 4px;\r\n    }\r\n\r\n    .dd-topbar-menu-button-text {\r\n        @include breakpoints.media-breakpoint('lt-lg') {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .dd-topbar-logo-with-bg {\r\n        padding-left: 8px;\r\n        padding-right: 8px;\r\n\r\n        @include breakpoints.media-breakpoint('gt-lg') {\r\n            padding-left: 0px;\r\n        }\r\n    }\r\n\r\n    // Hide all borders from the toolbar on very small screens.\r\n    .border-right.dd-white-border.h-100-p {\r\n        @include breakpoints.media-breakpoint('xxs') {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .dd-topbar-left-container {\r\n        gap: 8px;\r\n\r\n        // The area should grow on smaller screens\r\n        @include breakpoints.media-breakpoint('gt-md') {\r\n            flex: 1 1 100%;\r\n            box-sizing: border-box;\r\n            max-width: 100%;\r\n        }\r\n\r\n        // Logo container\r\n        .dd-topbar-logo-container {\r\n            gap: 12px;\r\n\r\n            // Logo image and the description that is rendered below it.\r\n            .dd-topbar-logo-image {\r\n                display: flex;\r\n                align-items: center;\r\n                position: relative;\r\n\r\n                .dd-topbar-description-container {\r\n                    position: absolute;\r\n                    padding: 0 4px;\r\n                    bottom: 4px;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n\r\n                    @include themify.dd-themify() {\r\n                        background-color: themify.dd-color('primary-900', 0.6) !important;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Define that logo can only be certain width.\r\n        .dd-topbar-logo-image,\r\n        .dd-topbar-logo {\r\n            max-width: 140px;\r\n        }\r\n\r\n        // Make the logo smaller on very small screens.\r\n        @include breakpoints.media-breakpoint('xxs') {\r\n            .dd-topbar-logo-image,\r\n            .dd-topbar-logo {\r\n                max-width: 80px;\r\n            }\r\n        }\r\n\r\n        // Title can be hidden in mobile.\r\n        @include breakpoints.media-breakpoint('lt-md') {\r\n            .dd-topbar-title-container {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n\r\n    // All the styles that are used in the center of the toolbar.\r\n    // Contains only the search bar currently.\r\n    .dd-topbar-center-container {\r\n        padding-left: 12px;\r\n        padding-right: 12px;\r\n\r\n        @include breakpoints.media-breakpoint('lt-md') {\r\n            display: none;\r\n        }\r\n\r\n        @include breakpoints.media-breakpoint('gt-md') {\r\n            max-width: 400px;\r\n            width: 100%;\r\n        }\r\n\r\n        @include breakpoints.media-breakpoint('lt-lg') {\r\n            flex: 1 1 100%;\r\n            box-sizing: border-box;\r\n            max-width: 100%;\r\n        }\r\n    }\r\n\r\n    // Styles for the additional buttons in topbar. Same style is used for menu and search buttons.\r\n    .additional-button {\r\n        position: relative;\r\n        padding: 12px;\r\n\r\n        // Generic badge for additional buttons.\r\n        .additional-button-badge {\r\n            position: absolute;\r\n\r\n            right: 4px;\r\n            top: 4px;\r\n            text-transform: uppercase;\r\n            padding: 2px;\r\n            border-radius: 16px;\r\n            min-width: 16px;\r\n        }\r\n    }\r\n\r\n    // All the styles that are used in the right side of the toolbar.\r\n    .dd-topbar-right-container {\r\n        gap: 8px;\r\n\r\n        @include breakpoints.media-breakpoint('gt-md') {\r\n            flex: 1 1 100%;\r\n            box-sizing: border-box;\r\n            max-width: 100%;\r\n        }\r\n\r\n        // The container for the search bar.\r\n        .dd-topbar-search-container {\r\n            padding: 12px;\r\n        }\r\n\r\n        // Show the search button on smaller screens.\r\n        @include breakpoints.media-breakpoint('gt-sm') {\r\n            .dd-topbar-search-container {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        // Hide all unnecessary additional buttons on smaller screens.\r\n        @include breakpoints.media-breakpoint('lt-sm') {\r\n            .dd-topbar-low-priority-button {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        // Top left user button for the toolbar.\r\n        .dd-topbar-user-button {\r\n            gap: 8px;\r\n            padding: 8px;\r\n\r\n            // Add support for user image. This is a circle image.\r\n            // The image is 32px by 32px make sure it's not overflowing.\r\n            .dd-topbar-user-image {\r\n                overflow: hidden;\r\n\r\n                img {\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    overflow: hidden;\r\n                }\r\n            }\r\n\r\n            // Remove the text from the UI on smaller screens.\r\n            .dd-topbar-user-button-text {\r\n                @include breakpoints.media-breakpoint('lt-lg') {\r\n                    display: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // Create a search bar that is fixed to the top of the screen for mobile devices.\r\n    // In mobile design there is a button that opens the search bar.\r\n    // -----------------------------------------------------------------------------------------------------\r\n    .mobile-search-bar {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 56px;\r\n\r\n        z-index: 2000;\r\n\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        gap: 12px;\r\n\r\n        padding-left: 12px;\r\n        padding-right: 12px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./toolbar-top.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hotkeys",
                        "type": "HotkeysService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 159,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hotkeys",
                        "type": "HotkeysService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "userInitials": {
                    "name": "userInitials",
                    "getSignature": {
                        "name": "userInitials",
                        "type": "string",
                        "returnType": "string",
                        "line": 227,
                        "rawdescription": "\n\nGet user initials from the given user.\n",
                        "description": "<p>Get user initials from the given user.</p>\n"
                    }
                },
                "additionalMobileButtonIndex": {
                    "name": "additionalMobileButtonIndex",
                    "getSignature": {
                        "name": "additionalMobileButtonIndex",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 238,
                        "rawdescription": "\n\nGet the index of the first additional button that should be shown on mobile.\n",
                        "description": "<p>Get the index of the first additional button that should be shown on mobile.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"dd-topbar-top dd-primary-600-bg elevation-03\" fxFlex=\"100\" fxFill fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div class=\"dd-topbar-left-container h-100-p\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <ng-container *ngIf=\"!hideButton\">\r\n            <button class=\"additional-button cursor-pointer dd-primary-600 dd-primary-700-active dd-primary-900-hover border-radius-6 border-none\"\r\n                    fxLayout=\"row\" fxLayoutAlign=\"center center\" (click)=\"menuClick.emit()\">\r\n                <dd-icon [icon]=\"'dd-icon-hamburger'\" [size]=\"'s-24'\"></dd-icon>\r\n\r\n                <ng-container *ngIf=\"configuration && configuration.menuText\">\r\n                    <div class=\"dd-topbar-menu-button-text ml-spacer-xmini subtitle-2 bold all-caps\">\r\n                        {{configuration.menuText}}\r\n                    </div>\r\n                </ng-container>\r\n            </button>\r\n\r\n            <ng-container *ngIf=\"!configuration?.logo?.backgroundColor\">\r\n                <div class=\"border-right dd-white-border h-100-p\"></div>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"configuration && configuration.logo\">\r\n            <div class=\"dd-topbar-logo-container h-100-p\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                 [ngClass]=\"{'dd-topbar-logo-with-bg': !!configuration.logo.backgroundColor}\"\r\n                 [ngStyle]=\"{'backgroundColor': configuration.logo.backgroundColor}\">\r\n                <a class=\"dd-topbar-logo-image h-100-p\" [routerLink]=\"'/'\">\r\n                    <img class=\"dd-topbar-logo h-48\" [src]=\"configuration.logo.url\">\r\n\r\n                    <ng-container *ngIf=\"configuration.logo.additionalText\">\r\n                        <div class=\"dd-topbar-description-container text-body-2 data dd-primary-900 border-radius-6\">\r\n                            {{configuration.logo.additionalText}}\r\n                        </div>\r\n                    </ng-container>\r\n                </a>\r\n\r\n            </div>\r\n\r\n            <div class=\"dd-topbar-title-container text-body-1 bold dd-primary-50-fg\">\r\n                {{configuration.logo.title}}\r\n            </div>\r\n        </ng-container>\r\n\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"configuration && configuration.search\">\r\n        <div class=\"dd-topbar-center-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\" #searchInputContainer searchInputContainer>\r\n            <dd-search-input [placeHolder]=\"configuration.search.searchPlaceholder\"\r\n                             (inputValueChanged)=\"configuration.search.searchEvent($event, searchInputContainer)\"\r\n                             (buttonClick)=\"configuration.search.searchEvent($event, searchInputContainer)\"></dd-search-input>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"showMobileSearch\">\r\n            <div class=\"mobile-search-bar dd-primary-600\">\r\n                <div fxFlex=\"100\" #mobileSearchInputContainer>\r\n                    <dd-search-input [placeHolder]=\"configuration.search.searchPlaceholder\"\r\n                                     (inputValueChanged)=\"configuration.search.searchEvent($event, mobileSearchInputContainer)\"\r\n                                     (buttonClick)=\"configuration.search.searchEvent($event, mobileSearchInputContainer)\"></dd-search-input>\r\n                </div>\r\n                <dd-icon-clickable [icon]=\"'dd-icon-close'\" [color]=\"'white'\" (buttonClick)=\"toggleMobileSearch()\"></dd-icon-clickable>\r\n            </div>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n    <div class=\"dd-topbar-right-container h-100-p\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <ng-container *ngIf=\"configuration && configuration.search\">\r\n            <div class=\"dd-topbar-search-container border-right dd-white-border h-100-p\"></div>\r\n\r\n            <button class=\"dd-topbar-search-container additional-button cursor-pointer dd-primary-600 dd-primary-700-active dd-primary-900-hover border-radius-6 border-none\"\r\n                    fxLayout=\"row\" fxLayoutAlign=\"center center\" (click)=\"toggleMobileSearch()\">\r\n                <dd-icon [icon]=\"'dd-icon-search'\" [size]=\"'s-24'\"></dd-icon>\r\n            </button>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"configuration && configuration.additionalButtons?.length\">\r\n            <ng-container *ngFor=\"let button of configuration.additionalButtons | slice:0:3; let i = index\">\r\n                <div class=\"border-right dd-white-border h-100-p\" [ngClass]=\"{'dd-topbar-low-priority-button': i !== additionalMobileButtonIndex}\"></div>\r\n\r\n                <button class=\"additional-button cursor-pointer dd-primary-600 dd-primary-700-active dd-primary-900-hover border-radius-6 border-none\"\r\n                        [ngClass]=\"{'dd-topbar-low-priority-button': i !== additionalMobileButtonIndex}\" fxLayout=\"row\" fxLayoutAlign=\"center center\"\r\n                        (click)=\"button.onClick()\">\r\n                    <dd-icon [icon]=\"button.icon\" [size]=\"'s-24'\"></dd-icon>\r\n                    <ng-container *ngIf=\"button.badgeText\">\r\n                        <div class=\"additional-button-badge dd-danger caption\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                            <span>\r\n                                {{button.badgeText}}\r\n                            </span>\r\n                        </div>\r\n                    </ng-container>\r\n                </button>\r\n\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"configuration && configuration.user\">\r\n\r\n            <div class=\"border-right dd-white-border h-100-p\"></div>\r\n\r\n            <button class=\"dd-topbar-user-button cursor-pointer dd-primary-600 dd-primary-700-active dd-primary-900-hover border-radius-6 border-none\"\r\n                    fxLayout=\"row\" fxLayoutAlign=\"center center\" (click)=\"configuration.user.onClick()\">\r\n                <div class=\"dd-topbar-user-image border-radius-100-p h-32 w-32\" [ngClass]=\"{'border dd-white-border': !configuration.user.imageUrl}\"\r\n                     fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <ng-container *ngIf=\"configuration.user.imageUrl; else noUserImageElseTemplate\">\r\n                        <img [src]=\"configuration.user.imageUrl\">\r\n                    </ng-container>\r\n                    <ng-template #noUserImageElseTemplate>\r\n                        <span>\r\n                            {{userInitials}}\r\n                        </span>\r\n                    </ng-template>\r\n                </div>\r\n\r\n                <div class=\"dd-topbar-user-button-text\" fxLayout=\"column\" fxLayoutAlign=\"center end\">\r\n                    <div class=\"subtitle-2 all-caps bold\">\r\n                        {{configuration.user.firstName}} {{configuration.user.lastName}}\r\n                    </div>\r\n                    <ng-container *ngIf=\"configuration.user.description\">\r\n                        <div class=\"caption dd-primary-300-fg data\">\r\n                            {{configuration.user.description}}\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n            </button>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AccordionModule",
            "id": "module-AccordionModule-0a1639df718029bf374a26fbb90fb6666725d3659b14dde7d717e9f0291c8d57a2bf7162e4c64d8c3d774b931ed5ddf457bef974af22bed82c4d17d54a96c083",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { AccordionV2Component } from './components/accordion-v2/accordion-v2.component';\r\nimport { AccordionComponent } from './components/accordion/accordion.component';\r\n\r\nconst components: any[] = [\r\n    AccordionComponent, //\r\n    AccordionV2Component,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n    ],\r\n})\r\nexport class AccordionModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BadgeModule",
            "id": "module-BadgeModule-0e755f0ba8afaefcb60315097d67c06200027e068227c62e0ec317e734a2b2942252d34ba2d7c785fdd3b6df5eea3d933cdd9e0f5c2892ff71b85f1be0e66d56",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { BadgeInfoOverlayComponent } from './components/badge-info-overlay/badge-info-overlay.component';\r\nimport { BadgeInfoComponent } from './components/badge-info/badge-info.component';\r\nimport { BadgeComponent } from './components/badge/badge.component';\r\n\r\nconst components: any[] = [\r\n    BadgeComponent, //\r\n    BadgeInfoComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components, BadgeInfoOverlayComponent],\r\n    exports: [...components],\r\n    imports: [CommonModule, IconModule],\r\n})\r\nexport class BadgeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        },
                        {
                            "name": "BadgeInfoOverlayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-a052f6362e13959297ded1e45cf135055477f90695a3ea7aa33a7722b4b0342408f87d0ef01868a0da8c58f9b003d061a282a17965096258ea3be444ac09a04d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { LoaderModule } from '@digitaldelightsoy/design-library/src/loader';\r\nimport { DdSharedModule } from '@digitaldelightsoy/design-library/src/shared';\r\nimport { ButtonGroupV2Component } from './components/button-group-v2/button-group-v2.component';\r\nimport { ButtonGroupComponent } from './components/button-group/button-group.component';\r\nimport { ButtonComponent } from './components/button/button.component';\r\nimport { HeaderButtonComponent } from './components/header-button/header-button.component';\r\nimport { IconButtonComponent } from './components/icon-button/icon-button.component';\r\nimport { IconClickableComponent } from './components/icon-clickable/icon-clickable.component';\r\nimport { TextButtonComponent } from './components/text-button/text-button.component';\r\n\r\nconst components: any[] = [\r\n    ButtonComponent, //\r\n    HeaderButtonComponent,\r\n    IconButtonComponent,\r\n    IconClickableComponent,\r\n    ButtonGroupComponent,\r\n    ButtonGroupV2Component,\r\n    TextButtonComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        RouterModule,\r\n        DdSharedModule,\r\n        LoaderModule,\r\n        ClipboardModule,\r\n    ],\r\n})\r\nexport class ButtonModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DdSharedModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "LoaderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "id": "module-CardModule-4209f010b86dd660a94ca787036efbd8cf5fdf4a08066abb007630d052165925791b2d7103bb43afcf3427a2a75733ffbb77c8f84b5d936ec15ca0bba44d4650",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { CardHeaderComponent } from './components/card-header/card-header.component';\r\nimport { CardRowComponent } from './components/card-row/card-row.component';\r\nimport { CardComponent } from './components/card/card.component';\r\n\r\nconst components: any[] = [\r\n    CardComponent, //\r\n    CardHeaderComponent,\r\n    CardRowComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components], // Expose the components so other overlay modules can use them (file-upload-overlay).\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n    ],\r\n})\r\nexport class CardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChipModule",
            "id": "module-ChipModule-0101cce382e5268ad8fa424b7aaf6391990989d75feb610c2cb275fb384b90b100eee902089be7622345f2dbd49c10b5d16ec05ef673f0fd36fe026d71669085",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/chip/chip.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { ChipComponent } from './components/chip/chip.component';\r\n\r\n@NgModule({\r\n    declarations: [ChipComponent],\r\n    exports: [ChipComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n    ],\r\n})\r\nexport class ChipModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatepickerModule",
            "id": "module-DatepickerModule-b0bb438fd2ff166e6b2f249b0522e6a2cdaaea5da03f462cd46626beb763d03d0af6434fec46dc4dd940ca0dde8d5c9a9e9789629cb6c3b0a73e78693dbdaf22",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { DatepickerComponent } from './components/datepicker/datepicker.component';\r\n\r\nconst components: any[] = [\r\n    DatepickerComponent, //\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        ButtonModule,\r\n    ],\r\n})\r\nexport class DatepickerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DdSharedModule",
            "id": "module-DdSharedModule-faf2075a33a58207995c7b3e475efd225cdebba4877329dbf450ba44373439180b8ba793456511a0aaac4be5239fecaa7c42db22bf3a83193a93fef7321ffecf",
            "description": "<p>Purpose of this Module is to hold basic functionalities that website might need.\nExample: DividerComponent mimics functionality of <code>&lt;hr&gt;</code> element with custom implementation.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { DividerComponent } from './components/divider/divider.component';\r\n\r\nconst components: any[] = [\r\n    DividerComponent, //\r\n];\r\n\r\n/**\r\n * Purpose of this Module is to hold basic functionalities that website might need.\r\n * Example: DividerComponent mimics functionality of `<hr>` element with custom implementation.\r\n *\r\n * @export\r\n * @class DdSharedModule\r\n */\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [CommonModule],\r\n})\r\nexport class DdSharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DdSharedPipesModule",
            "id": "module-DdSharedPipesModule-4b1b94d0b1a6c3382886dd043148e0abd541069832eee1fa9a7f7a6f1401086efe04523802f965da9c39d0650b5fc9759a2988919a86df7b110ab634ba6dc73b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { BreakpointPipe } from './pipes/breakpoint.pipe';\r\nimport { CurrencyPipe } from './pipes/currency.pipe';\r\nimport { DatePipe } from './pipes/date.pipe';\r\nimport { DateTimePipe } from './pipes/datetime.pipe';\r\nimport { FilterPipe } from './pipes/filter.pipe';\r\nimport { FindPipe } from './pipes/find.pipe';\r\nimport { SanitizerPipe } from './pipes/sanitizer.pipe';\r\nimport { ShortDatePipe } from './pipes/short-date.pipe';\r\nimport { SortPipe } from './pipes/sort.pipe';\r\nimport { TimePipe } from './pipes/time.pipe';\r\n\r\nconst sharedPipes: any[] = [\r\n    DatePipe, //\r\n    DateTimePipe,\r\n    CurrencyPipe,\r\n    TimePipe,\r\n    ShortDatePipe,\r\n    SanitizerPipe,\r\n    FilterPipe,\r\n    FindPipe,\r\n    SortPipe,\r\n    BreakpointPipe,\r\n];\r\n\r\n@NgModule({\r\n    providers: [...sharedPipes],\r\n    declarations: [...sharedPipes],\r\n    exports: [...sharedPipes],\r\n    imports: [\r\n        CommonModule, //\r\n    ],\r\n})\r\nexport class DdSharedPipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreakpointPipe"
                        },
                        {
                            "name": "CurrencyPipe"
                        },
                        {
                            "name": "DatePipe"
                        },
                        {
                            "name": "DateTimePipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "FindPipe"
                        },
                        {
                            "name": "SanitizerPipe"
                        },
                        {
                            "name": "ShortDatePipe"
                        },
                        {
                            "name": "SortPipe"
                        },
                        {
                            "name": "TimePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreakpointPipe"
                        },
                        {
                            "name": "CurrencyPipe"
                        },
                        {
                            "name": "DatePipe"
                        },
                        {
                            "name": "DateTimePipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "FindPipe"
                        },
                        {
                            "name": "SanitizerPipe"
                        },
                        {
                            "name": "ShortDatePipe"
                        },
                        {
                            "name": "SortPipe"
                        },
                        {
                            "name": "TimePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileUploadModule",
            "id": "module-FileUploadModule-074740d69a71ab7901c9e7af9c8cd4eb3de98db63be0e3c7b6d02403c78d85eb8782dcb3569b3264ad9a45b66dc1faf9072c9ae18adffbde9b4edd4283281926",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/file-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { CardModule } from '@digitaldelightsoy/design-library/src/card';\r\nimport { ChipModule } from '@digitaldelightsoy/design-library/src/chip';\r\nimport { FormFieldModule } from '@digitaldelightsoy/design-library/src/form-field';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { NotificationModule } from '@digitaldelightsoy/design-library/src/notification';\r\nimport { FileUploadComponent } from './components/file-upload/file-upload.component';\r\nimport { DragDropDirective } from './drag-drop.directive';\r\n\r\n@NgModule({\r\n    declarations: [FileUploadComponent],\r\n    exports: [FileUploadComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        ButtonModule,\r\n        IconModule,\r\n        CardModule,\r\n        FormFieldModule,\r\n        ReactiveFormsModule,\r\n        ButtonModule,\r\n        ChipModule,\r\n        NotificationModule,\r\n        DragDropDirective,\r\n    ],\r\n})\r\nexport class FileUploadModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "ChipModule"
                        },
                        {
                            "name": "DragDropDirective"
                        },
                        {
                            "name": "FormFieldModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "NotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldDatepickerModule",
            "id": "module-FormFieldDatepickerModule-36a069459ec441b42695ed3c24c4c3c8fc1383e6443f5db71a95d082e052973853c0120b542caaf365d41f4c5ffd3ca3707c36cef2d68608cc5782119e04655a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { DatepickerModule } from '@digitaldelightsoy/design-library/src/datepicker';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { InputModule } from '@digitaldelightsoy/design-library/src/input';\r\nimport { LoaderModule } from '@digitaldelightsoy/design-library/src/loader';\r\nimport { DdSharedPipesModule } from '@digitaldelightsoy/design-library/src/pipes';\r\nimport { SelectModule } from '@digitaldelightsoy/design-library/src/select';\r\nimport { FormDatepickerFieldComponent } from './components/form-datepicker-field/form-datepicker-field.component';\r\nimport { FormFieldDatepickerComponent } from './components/form-field-datepicker/form-field-datepicker.component';\r\n\r\nconst components: any[] = [FormFieldDatepickerComponent, FormDatepickerFieldComponent];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        ReactiveFormsModule,\r\n        LoaderModule,\r\n        InputModule,\r\n        DatepickerModule,\r\n        IconModule,\r\n        SelectModule,\r\n        DdSharedPipesModule,\r\n        FormsModule,\r\n        ButtonModule,\r\n    ],\r\n})\r\nexport class FormFieldDatepickerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DatepickerModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "id": "module-FormFieldModule-e8b2b8db193fa020dc7fec4ba843ceb0809501f890c28527d447259e56d0c0526f50a2592a734cebf2ad0d6dec100e6502f51fb9a8639dd6180efc49c760e554",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { InputModule } from '@digitaldelightsoy/design-library/src/input';\r\nimport { LoaderModule } from '@digitaldelightsoy/design-library/src/loader';\r\nimport { SelectModule } from '@digitaldelightsoy/design-library/src/select';\r\nimport { FormCheckboxComponent } from './components/form-checkbox/form-checkbox.component';\r\nimport { FormFieldComponent } from './components/form-field/form-field.component';\r\nimport { FormRadioComponent } from './components/form-radio/form-radio.component';\r\nimport { FormSelectComponent } from './components/form-select/form-select.component';\r\nimport { FormToggleSliderComponent } from './components/form-toggle-slider/form-toggle-slider.component';\r\n\r\nconst components: any[] = [\r\n    FormFieldComponent, //\r\n    FormCheckboxComponent,\r\n    FormRadioComponent,\r\n    FormSelectComponent,\r\n    FormToggleSliderComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        ReactiveFormsModule.withConfig({ callSetDisabledState: 'whenDisabledForLegacyCode' }),\r\n        LoaderModule,\r\n        InputModule,\r\n        SelectModule,\r\n    ],\r\n})\r\nexport class FormFieldModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-07c2d3964b56b814e7937602b68e7ef0b78866f02925adbdc3a3e70e3a34d13a7e48dc3086409a8163cd535899069aae521d20b6a8485db2a66b107bb6ed13a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconComponent } from './components/icon/icon.component';\r\n\r\nconst components: any[] = [\r\n    IconComponent, //\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [CommonModule],\r\n})\r\nexport class IconModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-42478b8e040a138e6ba0821b8a9ae11131e25da299d18385a03172710bfba205932a69ace35bfe5cdfdd54fcb9612854c3bec00851d132fcbd650d34fbad1f1f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { InputContentComponent } from './components/input-content/input-content.component';\r\nimport { InputComponent } from './components/input/input.component';\r\nimport { SearchInputComponent } from './components/search-input/search-input.component';\r\nimport { ToggleSliderComponent } from './components/toggle-slider/toggle-slider.component';\r\n\r\nconst components: any[] = [\r\n    InputComponent, //\r\n    InputContentComponent,\r\n    SearchInputComponent,\r\n    ToggleSliderComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        ReactiveFormsModule,\r\n        ButtonModule,\r\n    ],\r\n})\r\nexport class InputModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoaderModule",
            "id": "module-LoaderModule-1ac3038bf9d7dc6396c853302e25bac84cd45887ef0af28edea2aa3c40d16544041b47190e71f892c3f0e59c5251ac6ed68d50c754501b4002e8ab3cfaf81a11",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/loader/loader.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { LoaderOverlayComponent } from './components/loader-overlay/loader-overlay.component';\r\nimport { LoaderPageComponent } from './components/loader-page/loader-page.component';\r\nimport { LoaderSpinnerComponent } from './components/loader-spinner/loader-spinner.component';\r\n\r\nconst components: any[] = [\r\n    LoaderSpinnerComponent, //\r\n    LoaderOverlayComponent,\r\n    LoaderPageComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n    ],\r\n})\r\nexport class LoaderModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "id": "module-NavigationModule-fe20eda1a5bc571eae63d2ec9324a47eb889b53ea579ac77bb0a4204e1adef337000cfa4bf98fce8c93a801fb957b5c94976abd4c9e9092b32395dacedaac42c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/navigation/navigation.module.ts",
            "methods": [],
            "sourceCode": "import { LayoutModule } from '@angular/cdk/layout';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { InputModule } from '@digitaldelightsoy/design-library/src/input';\r\nimport { LoaderModule } from '@digitaldelightsoy/design-library/src/loader';\r\nimport { DdSharedModule } from '@digitaldelightsoy/design-library/src/shared';\r\nimport { NavigationItemCollapsableComponent } from './components/navigation-item-collapsable/navigation-item-collapsable.component';\r\nimport { NavigationItemTitleComponent } from './components/navigation-item-title/navigation-item-title.component';\r\nimport { NavigationItemComponent } from './components/navigation-item/navigation-item.component';\r\nimport { NavigationComponent } from './components/navigation/navigation.component';\r\nimport { SideNavigationComponent } from './components/side-navigation/side-navigation.component';\r\nimport { ToolbarTopComponent } from './components/toolbar-top/toolbar-top.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NavigationComponent, //\r\n        ToolbarTopComponent,\r\n        SideNavigationComponent,\r\n        NavigationItemComponent,\r\n        NavigationItemCollapsableComponent,\r\n        NavigationItemTitleComponent,\r\n    ],\r\n    exports: [NavigationComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        ButtonModule,\r\n        LoaderModule,\r\n        RouterModule,\r\n        LayoutModule,\r\n        InputModule,\r\n        DdSharedModule,\r\n    ],\r\n})\r\nexport class NavigationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "NavigationItemCollapsableComponent"
                        },
                        {
                            "name": "NavigationItemComponent"
                        },
                        {
                            "name": "NavigationItemTitleComponent"
                        },
                        {
                            "name": "SideNavigationComponent"
                        },
                        {
                            "name": "ToolbarTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DdSharedModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "id": "module-NotificationModule-3210736eb17b30aeac5e17eea0469ac109d98ce0d45ed7f0353bf84d829a628b4d7a5224f1048540222fd66d6c60fa494650d4d091841824d041ba4bb1cd7ec2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/notification/notification.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { OverlayModule } from '@digitaldelightsoy/design-library/src/overlay';\r\nimport { NotificationComponent } from './components/notification/notification.component';\r\nimport { SnackBarListComponent } from './components/snack-bar-list/snack-bar-list.component';\r\nimport { SnackBarComponent } from './components/snack-bar/snack-bar.component';\r\n\r\n@NgModule({\r\n    declarations: [NotificationComponent, SnackBarComponent, SnackBarListComponent],\r\n    exports: [NotificationComponent, SnackBarListComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        OverlayModule,\r\n    ],\r\n})\r\nexport class NotificationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SnackBarComponent"
                        },
                        {
                            "name": "SnackBarListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OverlayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SnackBarListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlayModule",
            "id": "module-OverlayModule-a5ef26810bfc06f791e1785d747ef7d6ce224d6d7dae165963b9705d4557388f3d7bbbd099b918c8c7b088a848f60975aab012bf12478464e0b97660612b0fbf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
            "methods": [],
            "sourceCode": "import { Overlay } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { ConfirmSelectionOverlayComponent } from './components/confirm-selection-overlay/confirm-selection-overlay.component';\r\nimport { DialogBodyComponent } from './components/dialog-body/dialog-body.component';\r\nimport { DialogFooterComponent } from './components/dialog-footer/dialog-footer.component';\r\nimport { DialogHeaderComponent } from './components/dialog-header/dialog-header.component';\r\nimport { DialogWrapperComponent } from './components/dialog-wrapper/dialog-wrapper.component';\r\nimport { OverlayBodyComponent } from './components/overlay-body/overlay-body.component';\r\nimport { OverlayFooterComponent } from './components/overlay-footer/overlay-footer.component';\r\nimport { OverlayHeaderComponent } from './components/overlay-header/overlay-header.component';\r\nimport { OverlayListActionsComponent } from './components/overlay-list-actions/overlay-list-actions.component';\r\nimport { OverlayWrapperComponent } from './components/overlay-wrapper/overlay-wrapper.component';\r\nimport { OverlayService } from './services/overlay.service';\r\n\r\nconst components: any[] = [\r\n    OverlayListActionsComponent, //\r\n    OverlayBodyComponent,\r\n    OverlayFooterComponent,\r\n    OverlayHeaderComponent,\r\n    ConfirmSelectionOverlayComponent,\r\n    DialogFooterComponent,\r\n    DialogBodyComponent,\r\n    DialogHeaderComponent,\r\n    DialogWrapperComponent,\r\n    OverlayWrapperComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components], // Expose the components so other overlay modules can use them (file-upload-overlay).\r\n    imports: [\r\n        CommonModule, //\r\n        ReactiveFormsModule,\r\n        ButtonModule,\r\n        IconModule,\r\n    ],\r\n    providers: [OverlayService, Overlay],\r\n})\r\nexport class OverlayModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "OverlayService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-7e59fb7777c9530be27dfd3887f671d326f5fc7757934e7621f83ea0bc043f0f2d99d602cb59a3a8cf1fc72ee115cff89a4113973c40fa93911e549adc8335e9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { PaginationComponent } from './components/pagination/pagination.component';\r\n\r\n@NgModule({\r\n    declarations: [PaginationComponent],\r\n    exports: [PaginationComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n    ],\r\n})\r\nexport class PaginationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressBarModule",
            "id": "module-ProgressBarModule-93d5240c9ebb8ef67cece40d340a5848b38cb889d36dc8427234cc101a6d6fbc19afa5cf794737492530cbda49701a208996d8a532b61d94dc5079dde33f5614",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { ProgressBarComponent } from './components/progress-bar/progress-bar.component';\r\n\r\n@NgModule({\r\n    declarations: [ProgressBarComponent],\r\n    exports: [ProgressBarComponent],\r\n    imports: [CommonModule, IconModule],\r\n})\r\nexport class ProgressBarModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReadMoreAreaModule",
            "id": "module-ReadMoreAreaModule-3fb4004217c39304e6f42397ef9f9914e2638962f211cdadf42c788b29bfed8cc5d0cae46acb7474428d9699dfff7ce3d8d74bfa193dffe64c1f5ad7b3687a2d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/read-more-area/read-more-area.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { ReadMoreAreaComponent } from './components/read-more-area/read-more-area.component';\r\n\r\n@NgModule({\r\n    declarations: [ReadMoreAreaComponent],\r\n    exports: [ReadMoreAreaComponent],\r\n    imports: [CommonModule, ButtonModule],\r\n})\r\nexport class ReadMoreAreaModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ReadMoreAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ReadMoreAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-32249443be0c1bf2a01c6c42acb160066336a06758ed7cee8e0491858b58328f7f9a327d04fcb4247e85a69c02ea0521be8ae1363e3e5549df82e99b2c61285c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { InputModule } from '@digitaldelightsoy/design-library/src/input';\r\nimport { MultiSelectListComponent } from './components/multi-select-list/multi-select-list.component';\r\nimport { SelectItemComponent } from './components/select-item/select-item.component';\r\nimport { SelectListComponent } from './components/select-list/select-list.component';\r\nimport { SelectMenuComponent } from './components/select-menu/select-menu.component';\r\nimport { SelectFilterPipe } from './pipes/select-filter.pipe';\r\n\r\nconst components: any[] = [\r\n    SelectListComponent, //\r\n    SelectItemComponent,\r\n    SelectMenuComponent,\r\n    MultiSelectListComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components, SelectFilterPipe],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        InputModule,\r\n    ],\r\n})\r\nexport class SelectModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        },
                        {
                            "name": "SelectFilterPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StepperModule",
            "id": "module-StepperModule-bf6f813e247b368e1359c6d4c8ad4fa2260a9f7d052dd5f1a8fb5e0c5b9adae9c871f0625eb566d63490968d1107352522646507943432f200b451fb25984dd3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/stepper/stepper.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ButtonModule } from '@digitaldelightsoy/design-library/src/button';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { StepperComponent } from './components/stepper/stepper.component';\r\n\r\n@NgModule({\r\n    declarations: [StepperComponent],\r\n    exports: [StepperComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        ButtonModule,\r\n        RouterModule,\r\n        IconModule,\r\n    ],\r\n})\r\nexport class StepperModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabNavigationModule",
            "id": "module-TabNavigationModule-f566986118accafa732355bc022f4bb6c1cbb18ddb82636330e0d1d92894e8e0b7294594ce432d7dbeba516ad1613844827c89ddd7672d22bbc8add2b66e32ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ChipModule } from '@digitaldelightsoy/design-library/src/chip';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { NavigationModule } from '@digitaldelightsoy/design-library/src/navigation';\r\nimport { SelectModule } from '@digitaldelightsoy/design-library/src/select';\r\nimport { TabNavigationPreviousComponent } from './components/tab-navigation-previous/tab-navigation-previous.component';\r\nimport { TabNavigationV2Component } from './components/tab-navigation-v2/tab-navigation-v2.component';\r\nimport { TabNavigationComponent } from './components/tab-navigation/tab-navigation.component';\r\nimport { TabComponent } from './components/tab/tab.component';\r\nimport { TabsV2Component } from './components/tabs-v2/tabs-v2.component';\r\nimport { TabsComponent } from './components/tabs/tabs.component';\r\n\r\nconst components: any[] = [\r\n    TabNavigationComponent, //\r\n    TabNavigationPreviousComponent,\r\n    TabsComponent,\r\n    TabComponent,\r\n    TabNavigationV2Component,\r\n    TabsV2Component,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [...components],\r\n    exports: [...components],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        RouterModule,\r\n        NavigationModule,\r\n        SelectModule,\r\n        ChipModule,\r\n    ],\r\n})\r\nexport class TabNavigationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChipModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TileModule",
            "id": "module-TileModule-702a6ddd47b0a759ad730d26b04b1a4c7dbb60f7e5e40a2bde25ac65aced42f7ab48496c474593aaef04f3d3d334b778d056eb6274d52a0494019d67fe6488ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tile/tile.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { IconModule } from '@digitaldelightsoy/design-library/src/icon';\r\nimport { TileFixedComponent } from './components/tile-fixed/tile-fixed.component';\r\nimport { TileFooterComponent } from './components/tile-footer/tile-footer.component';\r\nimport { TileComponent } from './components/tile/tile.component';\r\n\r\n@NgModule({\r\n    declarations: [TileComponent, TileFixedComponent, TileFooterComponent],\r\n    exports: [TileComponent, TileFixedComponent, TileFooterComponent],\r\n    imports: [\r\n        CommonModule, //\r\n        IconModule,\r\n        RouterModule,\r\n    ],\r\n})\r\nexport class TileModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileFixedComponent"
                        },
                        {
                            "name": "TileFooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileFixedComponent"
                        },
                        {
                            "name": "TileFooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-d37eba197fb32b9f1fcc1f9b70db5ab9dba90582d5ae2e517c890cde043b84c053531a9bb7fd54dcbc0abe15c8173509cdcd64c2f19782a4e19fe14b91357945",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TooltipDirective } from './tooltip.directive';\r\n\r\n@NgModule({\r\n    declarations: [TooltipDirective],\r\n    exports: [TooltipDirective],\r\n    imports: [CommonModule],\r\n})\r\nexport class TooltipModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "animationInTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "200"
            },
            {
                "name": "animationOutTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "200"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    AccordionComponent, //\r\n    AccordionV2Component,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/badge/badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    BadgeComponent, //\r\n    BadgeInfoComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/button/button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    ButtonComponent, //\r\n    HeaderButtonComponent,\r\n    IconButtonComponent,\r\n    IconClickableComponent,\r\n    ButtonGroupComponent,\r\n    ButtonGroupV2Component,\r\n    TextButtonComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/card/card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    CardComponent, //\r\n    CardHeaderComponent,\r\n    CardRowComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    DatepickerComponent, //\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    FormFieldComponent, //\r\n    FormCheckboxComponent,\r\n    FormRadioComponent,\r\n    FormSelectComponent,\r\n    FormToggleSliderComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[FormFieldDatepickerComponent, FormDatepickerFieldComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/icon/icon.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    IconComponent, //\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/input/input.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    InputComponent, //\r\n    InputContentComponent,\r\n    SearchInputComponent,\r\n    ToggleSliderComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/loader/loader.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    LoaderSpinnerComponent, //\r\n    LoaderOverlayComponent,\r\n    LoaderPageComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    OverlayListActionsComponent, //\r\n    OverlayBodyComponent,\r\n    OverlayFooterComponent,\r\n    OverlayHeaderComponent,\r\n    ConfirmSelectionOverlayComponent,\r\n    DialogFooterComponent,\r\n    DialogBodyComponent,\r\n    DialogHeaderComponent,\r\n    DialogWrapperComponent,\r\n    OverlayWrapperComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/select/select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    SelectListComponent, //\r\n    SelectItemComponent,\r\n    SelectMenuComponent,\r\n    MultiSelectListComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    DividerComponent, //\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    TabNavigationComponent, //\r\n    TabNavigationPreviousComponent,\r\n    TabsComponent,\r\n    TabComponent,\r\n    TabNavigationV2Component,\r\n    TabsV2Component,\r\n]"
            },
            {
                "name": "defaultOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DatepickerOptions",
                "defaultValue": "{\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n}",
                "rawdescription": "Default configuration options for the datepicker.",
                "description": "<p>Default configuration options for the datepicker.</p>\n"
            },
            {
                "name": "keyboardKeyCodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": true,
                "deprecationMessage": "KeyCodes are depricated (fallback to IE).",
                "type": "KeyboardKeyCodes",
                "defaultValue": "{\r\n    escape: 27,\r\n}",
                "rawdescription": "The deprecated key codes.",
                "description": "<p>The deprecated key codes.</p>\n"
            },
            {
                "name": "keyboardKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyboardKeys",
                "defaultValue": "{\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n}",
                "rawdescription": "Exports a constant object that holds specific keyboard keys used in the project.\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",
                "description": "<p>Exports a constant object that holds specific keyboard keys used in the project.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values</a></p>\n"
            },
            {
                "name": "keyEvents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyEvents",
                "defaultValue": "{\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n}",
                "rawdescription": "Holds the different key events that could be used.",
                "description": "<p>Holds the different key events that could be used.</p>\n"
            },
            {
                "name": "OVERLAY_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InjectionToken<literal type>",
                "defaultValue": "new InjectionToken<{}>('OverlayData')"
            },
            {
                "name": "OVERLAY_REF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InjectionToken<literal type>",
                "defaultValue": "new InjectionToken<OverlayRef>('OverlayRef')"
            },
            {
                "name": "OVERLAY_UNDEFINED_DATA_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/providers/test-providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValueProvider",
                "defaultValue": "{\r\n    provide: OVERLAY_DATA,\r\n    useValue: undefined,\r\n}",
                "rawdescription": "Provider for tests",
                "description": "<p>Provider for tests</p>\n"
            },
            {
                "name": "overlayAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n    // This animation can be added to parent DOM, when initial animation should be skipped.\r\n    blockInitialRenderAnimation: trigger(\r\n        'blockInitialRenderAnimation', //\r\n        [\r\n            transition(\r\n                ':enter', //\r\n                []\r\n            ),\r\n        ]\r\n    ),\r\n    slideFromTop: trigger('slideFromTop', [\r\n        // Transition states.\r\n        state(\r\n            'in-top',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            'default',\r\n            style({\r\n                transform: 'translate3d(0, 0, 0)',\r\n            })\r\n        ),\r\n        // Void state (hidden).\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'in-top => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideFromLeft: trigger('slideFromLeft', [\r\n        state(\r\n            'in-left',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(-100%,0,0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Left slide transition.\r\n        transition(\r\n            'in-left => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideFromRight: trigger('slideFromRight', [\r\n        state(\r\n            'in-right',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(100%, 0, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            'default',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(100%, 0, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(100%,0,0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Right slide transition.\r\n        transition(\r\n            'in-right => hide',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideInOut: trigger('slideInOut', [\r\n        // Transition states.\r\n        state(\r\n            'in-top',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n                'z-index': 20000001,\r\n            })\r\n        ),\r\n        state(\r\n            'in-left',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n                'z-index': 20000001,\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n                'z-index': -1,\r\n            })\r\n        ),\r\n        // Top (modal) transition.\r\n        transition(\r\n            'in-top => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'hide => in-top',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0, -100%, 0)', 'z-index': 20000001 }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Left slide transition.\r\n        transition(\r\n            'in-left => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'hide => in-left',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(-100%,0,0)', 'z-index': 20000001 }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    backdropInOut: trigger('backdropInOut', [\r\n        state(\r\n            'in',\r\n            style({\r\n                backgroundColor: '#5555',\r\n            })\r\n        ),\r\n        state(\r\n            'out',\r\n            style({\r\n                backgroundColor: 'transparent',\r\n            })\r\n        ),\r\n        transition('in => out', animate(`${animationOutTime}ms ease-in-out`)),\r\n        transition('out => in', animate(`${animationInTime}ms ease-in-out`)),\r\n    ]),\r\n}"
            },
            {
                "name": "sharedPipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    DatePipe, //\r\n    DateTimePipe,\r\n    CurrencyPipe,\r\n    TimePipe,\r\n    ShortDatePipe,\r\n    SanitizerPipe,\r\n    FilterPipe,\r\n    FindPipe,\r\n    SortPipe,\r\n    BreakpointPipe,\r\n]"
            },
            {
                "name": "styleClasses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StyleDict",
                "defaultValue": "{\r\n    'primary-light': 'dd-primary-500-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'primary-dark': 'dd-primary-400-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    'secondary-light': 'dd-accent-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'secondary-dark': 'dd-accent-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    white: 'dd-white-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary\" | \"green\" | \"gray\" | \"yellow\" | \"red\"",
                "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"large\" | \"normal\" | \"mini\"",
                "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipIconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dd-danger-fg\" | \"dd-accent-fg\"",
                "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported colors for chips.</p>\n",
                "kind": 192
            },
            {
                "name": "ChipVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"removable\" | \"tag\"",
                "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported variants for chip.</p>\n",
                "kind": 192
            },
            {
                "name": "DdCulture",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"da-dk\" | \"nb-no\" | \"fi-fi\" | \"sv-se\" | \"en-gb\"",
                "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DdLocale",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dk\" | \"no\" | \"fi\" | \"se\" | \"en\"",
                "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DialogOverlaySize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dialog-wide\" | \"dialog-narrow\" | \"dialog-mega\"",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Handler",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "HeaderButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-dark\" | \"secondary\"",
                "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the header button.</p>\n",
                "kind": 192
            },
            {
                "name": "HeaderButtonIconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the header button icon.</p>\n",
                "kind": 201
            },
            {
                "name": "IconButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"secondary\" | \"primary-light\" | \"primary-dark\"",
                "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the icon button.</p>\n",
                "kind": 192
            },
            {
                "name": "IconClickableColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary-light\" | \"secondary-dark\" | \"white\"",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the icon button.</p>\n",
                "kind": 192
            },
            {
                "name": "InputComponentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"radio\"",
                "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                "kind": 192
            },
            {
                "name": "InputComponentVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"mini\"",
                "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                "kind": 192
            },
            {
                "name": "LoaderSpinnerSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"16\" | \"24\" | \"32\" | \"36\" | \"48\" | \"64\" | \"128\"",
                "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Defines the spinner sizes for loaders.</p>\n",
                "kind": 192
            },
            {
                "name": "OverlayAnimationState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hide\" | \"in-left\" | \"in-right\" | \"in-top\" | \"default\"",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "OverlaySize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectListComponentVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"small\"",
                "file": "projects/digital-delights-library/src/select/select-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; has 224px min-width and &#39;small&#39; has no minimun width.</p>\n",
                "kind": 192
            },
            {
                "name": "SelectMenuOutput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[any, (string | number)[]]",
                "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "StyleDict",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            },
            {
                "name": "TextButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\"",
                "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TextButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"large\" | \"normal\" | \"mini\"",
                "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TileVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"border-radius\"",
                "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Unlisten",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            }
        ],
        "enumerations": [
            {
                "name": "DdBreakPointsEnum",
                "childs": [
                    {
                        "name": "xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 599px)"
                    },
                    {
                        "name": "sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 600px) and (max-width: 959px)"
                    },
                    {
                        "name": "md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 960px) and (max-width: 1279px)"
                    },
                    {
                        "name": "lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1280px) and (max-width: 1919px)"
                    },
                    {
                        "name": "xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1920px) and (max-width: 5000px)"
                    },
                    {
                        "name": "lt-sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 599px)"
                    },
                    {
                        "name": "lt-md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 959px)"
                    },
                    {
                        "name": "lt-lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 1279px)"
                    },
                    {
                        "name": "lt-xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 1919px)"
                    },
                    {
                        "name": "gt-xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 600px)"
                    },
                    {
                        "name": "gt-sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 960px)"
                    },
                    {
                        "name": "gt-md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1280px)"
                    },
                    {
                        "name": "gt-lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1920px)"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts"
            }
        ],
        "groupedVariables": {
            "projects/digital-delights-library/src/overlay/models/animations.ts": [
                {
                    "name": "animationInTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "200"
                },
                {
                    "name": "animationOutTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "200"
                },
                {
                    "name": "overlayAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n    // This animation can be added to parent DOM, when initial animation should be skipped.\r\n    blockInitialRenderAnimation: trigger(\r\n        'blockInitialRenderAnimation', //\r\n        [\r\n            transition(\r\n                ':enter', //\r\n                []\r\n            ),\r\n        ]\r\n    ),\r\n    slideFromTop: trigger('slideFromTop', [\r\n        // Transition states.\r\n        state(\r\n            'in-top',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            'default',\r\n            style({\r\n                transform: 'translate3d(0, 0, 0)',\r\n            })\r\n        ),\r\n        // Void state (hidden).\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'in-top => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideFromLeft: trigger('slideFromLeft', [\r\n        state(\r\n            'in-left',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(-100%,0,0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Left slide transition.\r\n        transition(\r\n            'in-left => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideFromRight: trigger('slideFromRight', [\r\n        state(\r\n            'in-right',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(100%, 0, 0)',\r\n            })\r\n        ),\r\n        state(\r\n            'default',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n            })\r\n        ),\r\n        state(\r\n            '*',\r\n            style({\r\n                transform: 'translate3d(100%, 0, 0)',\r\n            })\r\n        ),\r\n        transition(\r\n            ':enter',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(100%,0,0)' }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Right slide transition.\r\n        transition(\r\n            'in-right => hide',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    slideInOut: trigger('slideInOut', [\r\n        // Transition states.\r\n        state(\r\n            'in-top',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n                'z-index': 20000001,\r\n            })\r\n        ),\r\n        state(\r\n            'in-left',\r\n            style({\r\n                transform: 'translate3d(0,0,0)',\r\n                'z-index': 20000001,\r\n            })\r\n        ),\r\n        state(\r\n            'hide',\r\n            style({\r\n                transform: 'translate3d(0, -100%, 0)',\r\n                'z-index': -1,\r\n            })\r\n        ),\r\n        // Top (modal) transition.\r\n        transition(\r\n            'in-top => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'hide => in-top',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0, -100%, 0)', 'z-index': 20000001 }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        // Left slide transition.\r\n        transition(\r\n            'in-left => hide',\r\n            animate(\r\n                `${animationOutTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n        transition(\r\n            'hide => in-left',\r\n            animate(\r\n                `${animationInTime}ms ease-in-out`, //\r\n                keyframes([\r\n                    style({ transform: 'translate3d(-100%,0,0)', 'z-index': 20000001 }), //\r\n                    style({ transform: 'translate3d(0,0,0)' }), //\r\n                ])\r\n            )\r\n        ),\r\n    ]),\r\n    backdropInOut: trigger('backdropInOut', [\r\n        state(\r\n            'in',\r\n            style({\r\n                backgroundColor: '#5555',\r\n            })\r\n        ),\r\n        state(\r\n            'out',\r\n            style({\r\n                backgroundColor: 'transparent',\r\n            })\r\n        ),\r\n        transition('in => out', animate(`${animationOutTime}ms ease-in-out`)),\r\n        transition('out => in', animate(`${animationInTime}ms ease-in-out`)),\r\n    ]),\r\n}"
                }
            ],
            "projects/digital-delights-library/src/accordion/accordion.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    AccordionComponent, //\r\n    AccordionV2Component,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/badge/badge.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/badge/badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    BadgeComponent, //\r\n    BadgeInfoComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/button/button.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/button/button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    ButtonComponent, //\r\n    HeaderButtonComponent,\r\n    IconButtonComponent,\r\n    IconClickableComponent,\r\n    ButtonGroupComponent,\r\n    ButtonGroupV2Component,\r\n    TextButtonComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/card/card.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/card/card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    CardComponent, //\r\n    CardHeaderComponent,\r\n    CardRowComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/datepicker/datepicker.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    DatepickerComponent, //\r\n]"
                }
            ],
            "projects/digital-delights-library/src/form-field/form-field.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    FormFieldComponent, //\r\n    FormCheckboxComponent,\r\n    FormRadioComponent,\r\n    FormSelectComponent,\r\n    FormToggleSliderComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[FormFieldDatepickerComponent, FormDatepickerFieldComponent]"
                }
            ],
            "projects/digital-delights-library/src/icon/icon.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/icon/icon.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    IconComponent, //\r\n]"
                }
            ],
            "projects/digital-delights-library/src/input/input.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/input/input.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    InputComponent, //\r\n    InputContentComponent,\r\n    SearchInputComponent,\r\n    ToggleSliderComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/loader/loader.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/loader/loader.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    LoaderSpinnerComponent, //\r\n    LoaderOverlayComponent,\r\n    LoaderPageComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/overlay/overlay.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    OverlayListActionsComponent, //\r\n    OverlayBodyComponent,\r\n    OverlayFooterComponent,\r\n    OverlayHeaderComponent,\r\n    ConfirmSelectionOverlayComponent,\r\n    DialogFooterComponent,\r\n    DialogBodyComponent,\r\n    DialogHeaderComponent,\r\n    DialogWrapperComponent,\r\n    OverlayWrapperComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/select/select.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/select/select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    SelectListComponent, //\r\n    SelectItemComponent,\r\n    SelectMenuComponent,\r\n    MultiSelectListComponent,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/shared/shared.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    DividerComponent, //\r\n]"
                }
            ],
            "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    TabNavigationComponent, //\r\n    TabNavigationPreviousComponent,\r\n    TabsComponent,\r\n    TabComponent,\r\n    TabNavigationV2Component,\r\n    TabsV2Component,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts": [
                {
                    "name": "defaultOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerOptions",
                    "defaultValue": "{\r\n    minDate: new Date(),\r\n    maxDate: null,\r\n    firstCalendarDay: 1,\r\n    legendTranslations: undefined,\r\n    allSelectable: false,\r\n}",
                    "rawdescription": "Default configuration options for the datepicker.",
                    "description": "<p>Default configuration options for the datepicker.</p>\n"
                }
            ],
            "projects/digital-delights-library/src/services/models/keyboard.ts": [
                {
                    "name": "keyboardKeyCodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": true,
                    "deprecationMessage": "KeyCodes are depricated (fallback to IE).",
                    "type": "KeyboardKeyCodes",
                    "defaultValue": "{\r\n    escape: 27,\r\n}",
                    "rawdescription": "The deprecated key codes.",
                    "description": "<p>The deprecated key codes.</p>\n"
                },
                {
                    "name": "keyboardKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyboardKeys",
                    "defaultValue": "{\r\n    arrowdown: 'ArrowDown',\r\n    arrowup: 'ArrowUp',\r\n    enter: 'Enter',\r\n    escape: 'Escape',\r\n    tab: 'Tab',\r\n    f1: 'F1',\r\n}",
                    "rawdescription": "Exports a constant object that holds specific keyboard keys used in the project.\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",
                    "description": "<p>Exports a constant object that holds specific keyboard keys used in the project.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values</a></p>\n"
                },
                {
                    "name": "keyEvents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyEvents",
                    "defaultValue": "{\r\n    keyup: 'keyup',\r\n    keydown: 'keydown',\r\n}",
                    "rawdescription": "Holds the different key events that could be used.",
                    "description": "<p>Holds the different key events that could be used.</p>\n"
                }
            ],
            "projects/digital-delights-library/src/overlay/models/overlay.ts": [
                {
                    "name": "OVERLAY_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InjectionToken<literal type>",
                    "defaultValue": "new InjectionToken<{}>('OverlayData')"
                },
                {
                    "name": "OVERLAY_REF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InjectionToken<literal type>",
                    "defaultValue": "new InjectionToken<OverlayRef>('OverlayRef')"
                }
            ],
            "projects/digital-delights-library/src/providers/test-providers.ts": [
                {
                    "name": "OVERLAY_UNDEFINED_DATA_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/providers/test-providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValueProvider",
                    "defaultValue": "{\r\n    provide: OVERLAY_DATA,\r\n    useValue: undefined,\r\n}",
                    "rawdescription": "Provider for tests",
                    "description": "<p>Provider for tests</p>\n"
                }
            ],
            "projects/digital-delights-library/src/pipes/pipes.module.ts": [
                {
                    "name": "sharedPipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    DatePipe, //\r\n    DateTimePipe,\r\n    CurrencyPipe,\r\n    TimePipe,\r\n    ShortDatePipe,\r\n    SanitizerPipe,\r\n    FilterPipe,\r\n    FindPipe,\r\n    SortPipe,\r\n    BreakpointPipe,\r\n]"
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts": [
                {
                    "name": "styleClasses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StyleDict",
                    "defaultValue": "{\r\n    'primary-light': 'dd-primary-500-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'primary-dark': 'dd-primary-400-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    'secondary-light': 'dd-accent-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n    'secondary-dark': 'dd-accent-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\r\n    white: 'dd-white-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/digital-delights-library/src/navigation/models/navigation-models.ts": [
                {
                    "name": "DdBreakPointsEnum",
                    "childs": [
                        {
                            "name": "xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 599px)"
                        },
                        {
                            "name": "sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 600px) and (max-width: 959px)"
                        },
                        {
                            "name": "md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 960px) and (max-width: 1279px)"
                        },
                        {
                            "name": "lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1280px) and (max-width: 1919px)"
                        },
                        {
                            "name": "xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1920px) and (max-width: 5000px)"
                        },
                        {
                            "name": "lt-sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 599px)"
                        },
                        {
                            "name": "lt-md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 959px)"
                        },
                        {
                            "name": "lt-lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 1279px)"
                        },
                        {
                            "name": "lt-xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 1919px)"
                        },
                        {
                            "name": "gt-xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 600px)"
                        },
                        {
                            "name": "gt-sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 960px)"
                        },
                        {
                            "name": "gt-md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1280px)"
                        },
                        {
                            "name": "gt-lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1920px)"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/digital-delights-library/src/button/components/button/button.component.ts": [
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary\" | \"green\" | \"gray\" | \"yellow\" | \"red\"",
                    "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"large\" | \"normal\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/chip/components/chip/chip.component.ts": [
                {
                    "name": "ChipIconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dd-danger-fg\" | \"dd-accent-fg\"",
                    "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported colors for chips.</p>\n",
                    "kind": 192
                },
                {
                    "name": "ChipVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"removable\" | \"tag\"",
                    "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported variants for chip.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/pipes/services/locale.service.ts": [
                {
                    "name": "DdCulture",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"da-dk\" | \"nb-no\" | \"fi-fi\" | \"sv-se\" | \"en-gb\"",
                    "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DdLocale",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dk\" | \"no\" | \"fi\" | \"se\" | \"en\"",
                    "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/overlay/models/overlay.ts": [
                {
                    "name": "DialogOverlaySize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dialog-wide\" | \"dialog-narrow\" | \"dialog-mega\"",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "OverlaySize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/services/models/keyboard.ts": [
                {
                    "name": "Handler",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Unlisten",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts": [
                {
                    "name": "HeaderButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-dark\" | \"secondary\"",
                    "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the header button.</p>\n",
                    "kind": 192
                },
                {
                    "name": "HeaderButtonIconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the header button icon.</p>\n",
                    "kind": 201
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts": [
                {
                    "name": "IconButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"secondary\" | \"primary-light\" | \"primary-dark\"",
                    "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the icon button.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts": [
                {
                    "name": "IconClickableColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary-light\" | \"secondary-dark\" | \"white\"",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the icon button.</p>\n",
                    "kind": 192
                },
                {
                    "name": "StyleDict",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                }
            ],
            "projects/digital-delights-library/src/input/components/input/input.component.ts": [
                {
                    "name": "InputComponentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"radio\"",
                    "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                    "kind": 192
                },
                {
                    "name": "InputComponentVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts": [
                {
                    "name": "LoaderSpinnerSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"16\" | \"24\" | \"32\" | \"36\" | \"48\" | \"64\" | \"128\"",
                    "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Defines the spinner sizes for loaders.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/overlay/models/animations.ts": [
                {
                    "name": "OverlayAnimationState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hide\" | \"in-left\" | \"in-right\" | \"in-top\" | \"default\"",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/select/select-models.ts": [
                {
                    "name": "SelectListComponentVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"small\"",
                    "file": "projects/digital-delights-library/src/select/select-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; has 224px min-width and &#39;small&#39; has no minimun width.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts": [
                {
                    "name": "SelectMenuOutput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[any, (string | number)[]]",
                    "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts": [
                {
                    "name": "TextButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\"",
                    "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TextButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"large\" | \"normal\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/tile/components/tile/tile.component.ts": [
                {
                    "name": "TileVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"border-radius\"",
                    "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/tooltip/tooltip.directive.ts": [
                {
                    "name": "TooltipPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    }
}