{
    "pipes": [
        {
            "name": "BreakpointPipe",
            "id": "pipe-BreakpointPipe-bb0e86f022399f723b3e81d272854e9161d580a00f7adbdc8904b0e412e3137bd35201303e8b85bc307b6be5f84919d3842b5e557fb39ab72e129319bfb063b3",
            "file": "projects/digital-delights-library/src/pipes/pipes/breakpoint.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "lastValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "breakpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "breakpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddbreakpoint"
        },
        {
            "name": "CurrencyPipe",
            "id": "pipe-CurrencyPipe-664f24f7a1b3eee40118a66a98c7bb3ec60918b27b424aa0a36ba296cdcc475f4f24153f4e61c79398dc534d6490ca6da4bfbb933b0da91915d3e841c26eed69",
            "file": "projects/digital-delights-library/src/pipes/pipes/currency.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>CurrencyPipe renders an input string or decimal to decimal.\nFI currencies are always shown with 2 decimals and other countries with 0-2 decimals.\nDecimal separator comes from Intl.NumberFormat.\nUsage:\n{{price | ddcurrency}} renders the price with currency symbol,</p>\n",
            "rawdescription": "\n\nCurrencyPipe renders an input string or decimal to decimal.\nFI currencies are always shown with 2 decimals and other countries with 0-2 decimals.\nDecimal separator comes from Intl.NumberFormat.\nUsage:\n{{price | ddcurrency}} renders the price with currency symbol,\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DdCulture>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddcurrency"
        },
        {
            "name": "DatePipe",
            "id": "pipe-DatePipe-93af107457e9b02b94aef7936337970f54ce139a072725347485ee5c001447be3398710770ce6c77e4d96502b4a80f040a3b5d39d7756fea21eadb5216527165",
            "file": "projects/digital-delights-library/src/pipes/pipes/date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>DatePipe uses moment to render a date value from input Date of date string.</p>\n",
            "rawdescription": "\n\nDatePipe uses moment to render a date value from input Date of date string.\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "dddate"
        },
        {
            "name": "DateTimePipe",
            "id": "pipe-DateTimePipe-eae4faa006c012ac2b22da3aa269137492859d41e1998ba70ed341da7c76cddb43a97e92eb1c6b8380d83d67fdb31ae3497e6cde80d4fec5907a3f820105153b",
            "file": "projects/digital-delights-library/src/pipes/pipes/datetime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "dddatetime"
        },
        {
            "name": "FilterPipe",
            "id": "pipe-FilterPipe-07467be668481eb0244c85ca23ab9c3e6f3a222f340b2f8713c44dc8b3a46483d8a6d40318e63f9e880b5d06c2483ab67a1cdced0283830549f192fdde5c98e4",
            "file": "projects/digital-delights-library/src/pipes/pipes/filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>FilterPipe exposes possibility to give function which filters the input array.</p>\n",
            "rawdescription": "\nFilterPipe exposes possibility to give function which filters the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddfilter"
        },
        {
            "name": "FindPipe",
            "id": "pipe-FindPipe-b4db1df09daac95a867615bc0b36b60a3e55a436d23dd284516af769a37f6202836451f0fefb405de56b9324cae178d665bd49eceb83c1cd01ff95c3606263f0",
            "file": "projects/digital-delights-library/src/pipes/pipes/find.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>FindPipe exposes possibility to give function which finds an element from the input array.</p>\n",
            "rawdescription": "\nFindPipe exposes possibility to give function which finds an element from the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "findFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "findFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddfind"
        },
        {
            "name": "SanitizerPipe",
            "id": "pipe-SanitizerPipe-35a2cb65a634ef095a9944ce1a0b470bc4ccf9bb2b7ddc65effe779a809f25875bdab56385f6bd679eb298b1000f07cd5e0a5d75e1189d855da6921f768622ea",
            "file": "projects/digital-delights-library/src/pipes/pipes/sanitizer.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Sanitizes a string so it can be safely rendered to template.\nstringToBeSanitized | safe: &#39;type&#39;</p>\n",
            "rawdescription": "\n\nSanitizes a string so it can be safely rendered to template.\nstringToBeSanitized | safe: 'type'\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl | undefined",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "safe"
        },
        {
            "name": "SelectFilterPipe",
            "id": "pipe-SelectFilterPipe-c6e4c0594f6f84f28e710aef552d87a781d0cb99d5aaca7befceae74672fc744ed8fe1ce5f5e7aecca57b3a654e15488b57d1c1f84d87aca4f14679eef615d1c",
            "file": "projects/digital-delights-library/src/select/pipes/select-filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "SelectItem<any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SelectItem[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "SelectItem<any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddSelectFilter"
        },
        {
            "name": "ShortDatePipe",
            "id": "pipe-ShortDatePipe-d908c19456ae23500e50eaf28679b318be843360c0600df8d939c8059c5867e22c18ba348324708a6f033b61d2981c9896258fbc8e945e93132a32e2b1676cff",
            "file": "projects/digital-delights-library/src/pipes/pipes/short-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Short date format pipe (day and month).\nNote: This can removed if moment starts to support the short date format.</p>\n",
            "rawdescription": "\n\nShort date format pipe (day and month).\nNote: This can removed if moment starts to support the short date format.\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DdCulture>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddshortdate"
        },
        {
            "name": "SortPipe",
            "id": "pipe-SortPipe-17ab015eb15b361b4bf0cb9c4989552002a3012b9395fac6b8b447d298486c24ba09ff621055013c812eaeab898894efba4a1744b72aea25cba295ca3e98b0f7",
            "file": "projects/digital-delights-library/src/pipes/pipes/sort.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>SortPipe exposes possibility to give function which sorts the input array.</p>\n",
            "rawdescription": "\nSortPipe exposes possibility to give function which sorts the input array.",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "a",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "b",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortFunc",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "a",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "b",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "ddsort"
        },
        {
            "name": "TimePipe",
            "id": "pipe-TimePipe-3871aa0a91bdf9d439f4ffda1c768bb49f7024f8cc7a3e9b5f3e8bda9011c49513a0a1d0e313e271679a2febcdcfa13d3677c1c1c54d1a90db07942a4ad1e5e9",
            "file": "projects/digital-delights-library/src/pipes/pipes/time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>DatePipe uses moment to render a date value from input Date of date string.\nMoment locale is set in expert.master.ts</p>\n",
            "rawdescription": "\n\nDatePipe uses moment to render a date value from input Date of date string.\nMoment locale is set in expert.master.ts\n",
            "properties": [
                {
                    "name": "lastValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Locale>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "ddtime"
        }
    ],
    "interfaces": [
        {
            "name": "BindingsDictionary",
            "id": "interface-BindingsDictionary-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Handler",
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonGroupModel",
            "id": "interface-ButtonGroupModel-e32658f0aeac219a8fc84f3e270efc55b18e655a6656bb19ec5f05088851aff19478192411996e3532fcd877efd4e4377f68401dd621cb854590c2c2d3e2314a",
            "file": "projects/digital-delights-library/src/button/models/button-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Adds aria label to the individual button.</p>\n",
                    "line": 7,
                    "rawdescription": "\nAdds aria label to the individual button."
                },
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Function to be called on button click.</p>\n",
                    "line": 19,
                    "rawdescription": "\nFunction to be called on button click."
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Makes the button disabled, button does not output anything when it&#39;s disabled.</p>\n",
                    "line": 11,
                    "rawdescription": "\nMakes the button disabled, button does not output anything when it's disabled."
                },
                {
                    "name": "hideArrowIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Hide arrow icon on button.</p>\n",
                    "line": 21,
                    "rawdescription": "\nHide arrow icon on button."
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Adds dd-icon to button.</p>\n",
                    "line": 9,
                    "rawdescription": "\nAdds dd-icon to button."
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>Loading indicator</p>\n",
                    "line": 23,
                    "rawdescription": "\nLoading indicator"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Role attribute for individual button.</p>\n",
                    "line": 13,
                    "rawdescription": "\nRole attribute for individual button."
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 17,
                    "rawdescription": "\nAllows url to be opened in new tab."
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text for the button.</p>\n",
                    "line": 5,
                    "rawdescription": "\nText for the button."
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Adds url support to button click.</p>\n",
                    "line": 15,
                    "rawdescription": "\nAdds url support to button click."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmSelectionOverlayModel",
            "id": "interface-ConfirmSelectionOverlayModel-9887ba8e9f4f389574b8b714cb22ff0ec791786e807636c31d9fb1c28ba9aadd20b34a8c1ac3f2a526015c38034665508cfdaf6ae3d022cf15cb98f52eb5481d",
            "file": "projects/digital-delights-library/src/overlay/components/confirm-selection-overlay/confirm-selection-overlay.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "cancelButtonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "cancelSelection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>User can define action that is run when user clicks cancel button.</p>\n",
                    "line": 14,
                    "rawdescription": "\nUser can define action that is run when user clicks cancel button."
                },
                {
                    "name": "confirmButtonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "confirmSelection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "useAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DatepickerLegendTranslations",
            "id": "interface-DatepickerLegendTranslations-dd11c1db6507702b920f62223a86763bd88675777d45bfe58efc27fb45ced9c0b1abb2c51bf4714655630f8f84c235909effb81b7517957ba65caac248c9633f",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "allReserved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "freeSlots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "noSlotsAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Translations for the calendar legend.</p>\n",
            "rawdescription": "\n\nTranslations for the calendar legend.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "DatepickerOptions",
            "id": "interface-DatepickerOptions-dd11c1db6507702b920f62223a86763bd88675777d45bfe58efc27fb45ced9c0b1abb2c51bf4714655630f8f84c235909effb81b7517957ba65caac248c9633f",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "allSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If true, all dates within the min and max dates are selectable.</p>\n",
                    "line": 38,
                    "rawdescription": "\nIf true, all dates within the min and max dates are selectable."
                },
                {
                    "name": "firstCalendarDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The day to display as the first day of the week. Sunday is 0.</p>\n",
                    "line": 34,
                    "rawdescription": "\nThe day to display as the first day of the week. Sunday is 0."
                },
                {
                    "name": "legendTranslations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerLegendTranslations",
                    "optional": true,
                    "description": "<p>Translations for the calendar legend.</p>\n",
                    "line": 36,
                    "rawdescription": "\nTranslations for the calendar legend."
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": true,
                    "description": "<p>The latest date that can be selected.</p>\n",
                    "line": 32,
                    "rawdescription": "\nThe latest date that can be selected."
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": true,
                    "description": "<p>The earliest date that can be selected.</p>\n",
                    "line": 30,
                    "rawdescription": "\nThe earliest date that can be selected."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Configuration options for the datepicker.</p>\n",
            "rawdescription": "\n\nConfiguration options for the datepicker.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "Day",
            "id": "interface-Day-dd11c1db6507702b920f62223a86763bd88675777d45bfe58efc27fb45ced9c0b1abb2c51bf4714655630f8f84c235909effb81b7517957ba65caac248c9633f",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hasNoFreeSlots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inThisMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isHighlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>If the Day is found from selectableDates it will be highlighted as green.</p>\n",
                    "line": 21,
                    "rawdescription": "\nIf the Day is found from selectableDates it will be highlighted as green."
                },
                {
                    "name": "isSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isToday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Represents a day in the datepicker.</p>\n",
            "rawdescription": "\n\nRepresents a day in the datepicker.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "DdStep",
            "id": "interface-DdStep-7a3d4b3f1d7b586b222fa1c4fa6b257781450216a9d2bf01187e671cb9082b531bfc8805e752e58107881e08d9922d28a2b1dbc8a56a7342aaa2ee67a2d17fb1",
            "file": "projects/digital-delights-library/src/stepper/components/stepper/stepper.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon for the step.</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nIcon for the step.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title for the step.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nTitle for the step.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Router link url for the step.\nIf url is provided then the elements renders elements as div instead of a tag.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nRouter link url for the step.\nIf url is provided then the elements renders elements as div instead of a tag.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FileErrorMessages",
            "id": "interface-FileErrorMessages-d4f7da03aac72dfbd5095bdf135138628677a1f7d4c2201bdb5ccad55ecefe5598c64af628e3b734d5201db066ce99be1515ad5edd5500253c94ff2fe42cb6ba",
            "file": "projects/digital-delights-library/src/file-upload/file-validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "fileExtension",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "uniqueFileNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormFieldDatepickerModel",
            "id": "interface-FormFieldDatepickerModel-7552f4793e19bc4fc0d9f71a6e836d70928eeecc41c4f33060b34403ac4039ba558fcd10cd2bed9b560ed5abf22001e87c0dfd7838115e54edb1a0993e5523e0",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-field-datepicker/form-field-datepicker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerOptions",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectableDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataOverlay",
            "id": "interface-IDataOverlay-cee2669994c2cbc2c689c5ea87717cfe5333c659d1c181cf9bc071363c9568f0ab76547f9d2782e1ddae14ebc20f9ac3fdf13ec883d0e60e01f616f33c608580",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Data that is passed to the overlay.</p>\n",
            "rawdescription": "\n\nData that is passed to the overlay.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyboardKeyCodes",
            "id": "interface-KeyboardKeyCodes-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard key codes.</p>\n",
            "rawdescription": "\nModel for used keyboard key codes.",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyboardKeys",
            "id": "interface-KeyboardKeys-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "arrowdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "arrowup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "enter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "f1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard keys.</p>\n",
            "rawdescription": "\nModel for used keyboard keys.",
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyEvents",
            "id": "interface-KeyEvents-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "keydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "keyup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for used keyboard key events.</p>\n",
            "rawdescription": "\nModel for used keyboard key events.",
            "methods": [],
            "extends": []
        },
        {
            "name": "Listener",
            "id": "interface-Listener-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "bindings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BindingsDictionary",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "emitInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "terminal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListenerOptions",
            "id": "interface-ListenerOptions-4f5a33f75cfee626fe6e7e9ed3971a5c6991b660053b6ddac97689d5eb2122d291426b317f9536d1a815383cb756e35acdbca1720c8362fdb78b7c3f7fc2c3ef",
            "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "emitInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "terminal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Listener will stop here and not pass keyevent to lower priority listeners.\nDefault value true.</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nListener will stop here and not pass keyevent to lower priority listeners.\nDefault value true.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-8e46c9c26bab84cc0aac0e58a895cb43c7ef2db7c7e8f996656e574015689c0689058946e43cdebdf839b4c1282850f3705a3dd1d23adb117114a6220c52d6b0",
            "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "canNavigate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>If the user can navigate to the url.\nThe element is hidden if the user press the item.\nNOTE: this itself does not block the navigation to the item, only hides it.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nIf the user can navigate to the url.\nThe element is hidden if the user press the item.\nNOTE: this itself does not block the navigation to the item, only hides it.\n"
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "optional": true,
                    "description": "<p>Children for the navigation item. Only shown with &#39;collapsable&#39;.</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nChildren for the navigation item. Only shown with 'collapsable'.\n"
                },
                {
                    "name": "hideFavorite$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "<p>If the item is marked as favorite then icon for marking it as favorite is not shown.</p>\n<p>If item is marked as favorite, then it cannot be added from normal navigation.\nSetting this to true to all items will disable the feature.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nIf the item is marked as favorite then icon for marking it as favorite is not shown.\n\nIf item is marked as favorite, then it cannot be added from normal navigation.\nSetting this to true to all items will disable the feature.\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Icon for the navigation item.</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nIcon for the navigation item.\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Rendered with the tab to display the number of any notifications.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nRendered with the tab to display the number of any notifications.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title shown in the naviation item.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nTitle shown in the naviation item.\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"item\" | \"collapsable\" | \"title\"",
                    "optional": false,
                    "description": "<p>Navigation item type.\n&#39;title&#39; is a title for a group of &#39;collapsable&#39; or &#39;item&#39; typed navigation items.\n&#39;collapsable&#39; is a navigation item that can be expanded to show children.\n&#39;item&#39; is a normal navigation item.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nNavigation item type.\n'title' is a title for a group of 'collapsable' or 'item' typed navigation items.\n'collapsable' is a navigation item that can be expanded to show children.\n'item' is a normal navigation item.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>RouterLink url. Should only be undefined if type is &#39;collapsable&#39;</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nRouterLink url. Should only be undefined if type is 'collapsable'\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for navigation items, defines all necessary properties for navigation components.</p>\n",
            "rawdescription": "\n\nInterface for navigation items, defines all necessary properties for navigation components.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "OverlayOpenModel",
            "id": "interface-OverlayOpenModel-cee2669994c2cbc2c689c5ea87717cfe5333c659d1c181cf9bc071363c9568f0ab76547f9d2782e1ddae14ebc20f9ac3fdf13ec883d0e60e01f616f33c608580",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Closes the overlay.</p>\n",
                    "line": 17,
                    "rawdescription": "\nCloses the overlay."
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>Reference to the component instance so input data can be bound to the component.</p>\n",
                    "line": 14,
                    "rawdescription": "\nReference to the component instance so input data can be bound to the component."
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Opening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\nin addition to handling subscriptions necessary for the observable functions.</p>\n",
            "rawdescription": "\n\nOpening an overlay returns a interface that wraps all necessary functionalities for opening and closing the overlay,\nin addition to handling subscriptions necessary for the observable functions.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ProgressBarState",
            "id": "interface-ProgressBarState-0c7bf6fbf03542af01a51340df3cd17a7e11533a6cc49c0e823f83c8b03055742670e11e34cf7ffb2a69e23dfb0af215c52cbced8eb263021298240373409b77",
            "file": "projects/digital-delights-library/src/progress-bar/components/progress-bar/progress-bar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"dd-success\" | \"dd-accent\"",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectItem",
            "id": "interface-SelectItem-3029d2fd5b56863b43856e10501e06c2d87e7d171e2ad508526f714b57b63d0b014e75b8646c31ed92cb33e15d1f6a6f2888857170b267505ae283c6528b89f0",
            "file": "projects/digital-delights-library/src/select/select-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the item in the select list is disabled.</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nIf the item in the select list is disabled.\n\n",
                    "jsdoctags": [
                        {
                            "pos": 233,
                            "end": 256,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 234,
                                "end": 238,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 239,
                                "end": 248,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 240,
                                    "end": 247,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 136
                                }
                            }
                        },
                        {
                            "pos": 256,
                            "end": 282,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 257,
                                "end": 265,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "memberof"
                            },
                            "comment": "<p>SelectItem</p>\n"
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Single select item model.</p>\n",
            "rawdescription": "\nSingle select item model.",
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectListModel",
            "id": "interface-SelectListModel-3029d2fd5b56863b43856e10501e06c2d87e7d171e2ad508526f714b57b63d0b014e75b8646c31ed92cb33e15d1f6a6f2888857170b267505ae283c6528b89f0",
            "file": "projects/digital-delights-library/src/select/select-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "searchEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Enable select search filter</p>\n",
                    "line": 23,
                    "rawdescription": "\nEnable select search filter"
                },
                {
                    "name": "searchNoResultsMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": true,
                    "description": "<p>Id of the selected item.</p>\n",
                    "line": 21,
                    "rawdescription": "\nId of the selected item."
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectListComponentVariant",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Model for select list. Used by dd-select-menu to show menu of items.</p>\n",
            "rawdescription": "\nModel for select list. Used by dd-select-menu to show menu of items.",
            "methods": [],
            "extends": []
        },
        {
            "name": "SnackBar",
            "id": "interface-SnackBar-608a4ba2cf1d5baf683e873b41613a82504d871833c6a3ae3780533349fd51c141665b60bf993361fc95f91403d3ff10fb266466b62f934c18bdfff74cbc5dc2",
            "file": "projects/digital-delights-library/src/notification/models/notifications-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Boolean to trigger change detection when closed inside timeout.</p>\n",
                    "line": 8,
                    "rawdescription": "\nBoolean to trigger change detection when closed inside timeout."
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Timeout in ms. If left undefined, snackbar will only hide after close action.</p>\n",
                    "line": 5,
                    "rawdescription": "\nTimeout in ms. If left undefined, snackbar will only hide after close action."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarAdditionalButton",
            "id": "interface-TopbarAdditionalButton-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "badgeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Color of the badge.\nIf not provided, the defaults to danger color.</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nColor of the badge.\nIf not provided, the defaults to danger color.\n"
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Shows a badge with the given text.\nIf not provided, the badge is not rendered.</p>\n",
                    "line": 112,
                    "rawdescription": "\n\nShows a badge with the given text.\nIf not provided, the badge is not rendered.\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Icon for the button.</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nIcon for the button.\n"
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Click event for the topbar button.</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nClick event for the topbar button.\n"
                },
                {
                    "name": "showOnMobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the button should be shown on small screens mobile.\nOnly the first button where this is true is shown on mobile.</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nIf the button should be shown on small screens mobile.\nOnly the first button where this is true is shown on mobile.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Renders buttons on the right side of the top bar.\nThe buttons are placed on the left side of the user button.</p>\n",
            "rawdescription": "\n\nRenders buttons on the right side of the top bar.\nThe buttons are placed on the left side of the user button.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarConfiguration",
            "id": "interface-TopbarConfiguration-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "additionalButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarAdditionalButton[]",
                    "optional": true,
                    "description": "<p>Topbar additional buttons configuration.\nIf configuration is not provided, additional buttons are not rendered.</p>\n<p>Only one button can be shown on smallest mobile screen size.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nTopbar additional buttons configuration.\nIf configuration is not provided, additional buttons are not rendered.\n\nOnly one button can be shown on smallest mobile screen size.\n"
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarLogo",
                    "optional": true,
                    "description": "<p>Topbar logo configuration.\nIf configuration is not provided, logo is not rendered.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nTopbar logo configuration.\nIf configuration is not provided, logo is not rendered.\n"
                },
                {
                    "name": "menuText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Renders a text next to the menu button on larger screens.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nRenders a text next to the menu button on larger screens.\n"
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarSearchConfiguration",
                    "optional": true,
                    "description": "<p>Topbar search configuration.\nIf configuration is not provided, search is not rendered.</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nTopbar search configuration.\nIf configuration is not provided, search is not rendered.\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarUser",
                    "optional": true,
                    "description": "<p>Topbar user button configuration.\nIf configuration is not provided, user button is not rendered.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nTopbar user button configuration.\nIf configuration is not provided, user button is not rendered.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarLogo",
            "id": "interface-TopbarLogo-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "additionalText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Small text rendered on top of the logo.</p>\n",
                    "line": 150,
                    "rawdescription": "\n\nSmall text rendered on top of the logo.\n"
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Color of the background of the logo.</p>\n",
                    "line": 140,
                    "rawdescription": "\n\nColor of the background of the logo.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Title is rendered on the right side of the logo.</p>\n",
                    "line": 145,
                    "rawdescription": "\n\nTitle is rendered on the right side of the logo.\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Logo url.</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nLogo url.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Renders a logo to the top bar.\nThe logo is rendered on the left side of the top bar.\nThe logo will always route to the home (&#39;/&#39; route) page.</p>\n",
            "rawdescription": "\n\nRenders a logo to the top bar.\nThe logo is rendered on the left side of the top bar.\nThe logo will always route to the home ('/' route) page.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarSearchConfiguration",
            "id": "interface-TopbarSearchConfiguration-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "hotkeyList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "<p>List of hotkeys that are used to trigger the search.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nList of hotkeys that are used to trigger the search.\n"
                },
                {
                    "name": "searchEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Output event when user has searched for something.\nEmits a list that contains the search string and references the the search container.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nOutput event when user has searched for something.\nEmits a list that contains the search string and references the the search container.\n"
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Placeholder text for the search input.</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nPlaceholder text for the search input.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarUser",
            "id": "interface-TopbarUser-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Description text for the user button.\nThis is rendered under the user name.</p>\n",
                    "line": 78,
                    "rawdescription": "\n\nDescription text for the user button.\nThis is rendered under the user name.\n"
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>First name of the user.\nNames are split to two so initials can be rendered.</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nFirst name of the user.\nNames are split to two so initials can be rendered.\n"
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Image url for the user button.\nIf not provided, the user button is rendered with initials of the user.</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nImage url for the user button.\nIf not provided, the user button is rendered with initials of the user.\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Last name of the user.\nNames are split to two so initials can be rendered.</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nLast name of the user.\nNames are split to two so initials can be rendered.\n"
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Click event for the user button.</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nClick event for the user button.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Topbar user button configuration.</p>\n",
            "rawdescription": "\n\nTopbar user button configuration.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ValidationErrorMessages",
            "id": "interface-ValidationErrorMessages-db6176e6e9bc1ea6c453ff0f70beac4b93006cd5ac44fe1a7c18bed9d086554ad6160714ab84131643ef7675e78bbd6fe700bf4c110121dc5db3320b704e1559",
            "file": "projects/digital-delights-library/src/form-field/form-field-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "maxlength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "minlength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "past",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Type for the validation error messages.</p>\n",
            "rawdescription": "\nType for the validation error messages.",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DdLocaleService",
            "id": "injectable-DdLocaleService-a286cc34818048a3f8af005ac5e1d2b5d9ab569c583d6821817b971432e37601e74f02d26506dd5a575302c6ca426f56169b737cd1a58a4881a2a8a1f77f9084",
            "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
            "properties": [
                {
                    "name": "localeSubject",
                    "defaultValue": "new BehaviorSubject<DdLocale>('en')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<DdLocale>",
                    "optional": false,
                    "description": "<p>Subjects that stores the current locale.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nSubjects that stores the current locale.\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDateFormat",
                    "args": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets date format for the pipes.\n",
                    "description": "<p>Gets date format for the pipes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateLocale$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Locale>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the current date-fns Locale.\n",
                    "description": "<p>Gets the current date-fns Locale.</p>\n"
                },
                {
                    "name": "getDateTimeFormat",
                    "args": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets date time format for the pipes.\n",
                    "description": "<p>Gets date time format for the pipes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "Locale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalCulture$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DdCulture>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets current local culture for the pipes.\n",
                    "description": "<p>Gets current local culture for the pipes.</p>\n"
                },
                {
                    "name": "localeChanges$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DdLocale>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExposes locale changes property from the service.\n",
                    "description": "<p>Exposes locale changes property from the service.</p>\n"
                },
                {
                    "name": "updateLocale",
                    "args": [
                        {
                            "name": "l",
                            "type": "DdLocale",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the locale for the service.\n",
                    "description": "<p>Updates the locale for the service.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "l",
                            "type": "DdLocale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HotkeysService",
            "id": "injectable-HotkeysService-9319fdb70985ffbfc1004be45f088cc19b152408826e46142cd74e05e6bf36b6df1e7805bfd0fa172823d1db4ea6a90eeace452491d88428c536c15431519a35",
            "file": "projects/digital-delights-library/src/services/hotkeys.service.ts",
            "properties": [
                {
                    "name": "handleKeyboardEvent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handle the keyboard events for the root handler (and delegate to the listeners).</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nHandle the keyboard events for the root handler (and delegate to the listeners).\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listeners",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Listener[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addListener",
                    "args": [
                        {
                            "name": "listener",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Listener",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the listener to the internal collection in DESCENDING priority order.\n",
                    "description": "<p>Add the listener to the internal collection in DESCENDING priority order.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listener",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEventFromInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if the given event originated from a form input element.\n",
                    "description": "<p>Determine if the given event originated from a form input element.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "bindings",
                            "type": "BindingsDictionary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ListenerOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Unlisten",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfigure key-event listener at the given priority.\nReturns a Function that can be used to unbind the listener.\n",
                    "description": "<p>Configure key-event listener at the given priority.\nReturns a Function that can be used to unbind the listener.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "bindings",
                            "type": "BindingsDictionary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ListenerOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "normalizeTerminal",
                    "args": [
                        {
                            "name": "terminal",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNormalize the terminal option.\n",
                    "description": "<p>Normalize the terminal option.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "terminal",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListener",
                    "args": [
                        {
                            "name": "listenerToRemove",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the given listener from the internal collection.\n",
                    "description": "<p>Remove the given listener from the internal collection.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listenerToRemove",
                            "type": "Listener",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p><a href=\"https://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5\">https://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5</a></p>\n",
            "rawdescription": "\n\nhttps://github.com/bennadel/JavaScript-Demos/tree/master/demos/global-key-combos-angular5\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OverlayService",
            "id": "injectable-OverlayService-80e9d45604e910b3e092261dec68880f0548e7b7957c1895ab92e8351f04d96b20cb92de8045a65f8d7597e8c84db60d55fca8daa414b711ba4525a792a41f8f",
            "file": "projects/digital-delights-library/src/overlay/services/overlay.service.ts",
            "properties": [
                {
                    "name": "_unsubscribeSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "overLayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles closing and removing the overlay",
                    "description": "<p>Handles closing and removing the overlay</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "overLayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createInjector",
                    "args": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate injector to pass data to overlay.\n",
                    "description": "<p>Create injector to pass data to overlay.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfirmSelectionOverlayConfig",
                    "args": [
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a globally centered confirm selection overlay.",
                    "description": "<p>Config for a globally centered confirm selection overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConnectedToConfig",
                    "args": [
                        {
                            "name": "element",
                            "type": "FlexibleConnectedPositionStrategyOrigin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transformOrigin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfig for an overlay connected to an element.\nRequires class string of the provided overlay as the transformOrigin parameter.\n",
                    "description": "<p>Config for an overlay connected to an element.\nRequires class string of the provided overlay as the transformOrigin parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "FlexibleConnectedPositionStrategyOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformOrigin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogOverlayConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a dialog overlay opening from the right.",
                    "description": "<p>Config for a dialog overlay opening from the right.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogOverlaySizes",
                    "args": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns the width and height values for the overlay configurations.",
                    "description": "<p>Returns the width and height values for the overlay configurations.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "DialogOverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlexGlobalCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfig for a global centered flex overlay.\nFlex overlay defines only max width and height based on the input.\n",
                    "description": "<p>Config for a global centered flex overlay.\nFlex overlay defines only max width and height based on the input.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGlobalCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a global centered overlay.",
                    "description": "<p>Config for a global centered overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGlobalScrollableCenterConfig",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayProviderConfig<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfig for a global centered overlay that is fully scrollable on mobile.",
                    "description": "<p>Config for a global centered overlay that is fully scrollable on mobile.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlaySizes",
                    "args": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns the width and height values for the overlay configurations.",
                    "description": "<p>Returns the width and height values for the overlay configurations.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "OverlaySize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig<E>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayOpenModel<T>",
                    "typeParameters": [
                        "T",
                        "E"
                    ],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens an overlay with the provided component and config.\nMakes sure that the opened component actually contains a data property.\n",
                    "description": "<p>Opens an overlay with the provided component and config.\nMakes sure that the opened component actually contains a data property.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "OverlayProviderConfig<E>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackBarService",
            "id": "injectable-SnackBarService-13332751ecfc6caa93b02dd68a62fc4f672fb06d67282c9e1b905b11327230dc1d7d0ea957cc1f486d31b3425a3a1ab169b981bf4d1357609c39b91e03d8f34e",
            "file": "projects/digital-delights-library/src/notification/services/snack-bar.service.ts",
            "properties": [
                {
                    "name": "animationTimeMs",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Time in milliseconds that is reserved for the animation to execute.\nThis should match the css animation time in the SnackBarComponent.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nTime in milliseconds that is reserved for the animation to execute.\nThis should match the css animation time in the SnackBarComponent.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackBar[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notificationSubject",
                    "defaultValue": "new ReplaySubject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<SnackBar[]>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "\"error\" | \"success\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "\"error\" | \"success\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotifications$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SnackBar[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshNotifications",
                    "args": [
                        {
                            "name": "notifications",
                            "type": "SnackBar[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notifications",
                            "type": "SnackBar[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows error message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Shows error message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Shows message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccessMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow success message in snackbar and return a reference to the snackbar.\n",
                    "description": "<p>Show success message in snackbar and return a reference to the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FileValidators",
            "id": "class-FileValidators-d4f7da03aac72dfbd5095bdf135138628677a1f7d4c2201bdb5ccad55ecefe5598c64af628e3b734d5201db066ce99be1515ad5edd5500253c94ff2fe42cb6ba",
            "file": "projects/digital-delights-library/src/file-upload/file-validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "properties": [],
            "methods": [
                {
                    "name": "fileExtension",
                    "args": [
                        {
                            "name": "ext",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "ext",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "required",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uniqueFileNames",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OverlayProviderConfig",
            "id": "class-OverlayProviderConfig-cee2669994c2cbc2c689c5ea87717cfe5333c659d1c181cf9bc071363c9568f0ab76547f9d2782e1ddae14ebc20f9ac3fdf13ec883d0e60e01f616f33c608580",
            "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "properties": [
                {
                    "name": "closeOnBackdropClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Automatically add subscription to close on backdrop click.</p>\n",
                    "line": 25,
                    "rawdescription": "\nAutomatically add subscription to close on backdrop click."
                },
                {
                    "name": "closeOnOutsidePointerEvents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Automatically add subscription to close on outside pointer events.</p>\n",
                    "line": 28,
                    "rawdescription": "\nAutomatically add subscription to close on outside pointer events."
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "<p>Data to be injected into the dialog content.</p>\n",
                    "line": 22,
                    "rawdescription": "\nData to be injected into the dialog content."
                },
                {
                    "name": "overlayConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayConfig",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DragDropDirective",
            "id": "directive-DragDropDirective-ce70d2071758e0fc979841ac752b20958a08e8ed69740bc70d116b3b0c680a3fe4ab55880841aae13b050ba88b565fc950b452e9af9981b64b2b460cb80dfdff",
            "file": "projects/digital-delights-library/src/file-upload/drag-drop.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "selector": "[ddFileDragDrop]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "ddFileDragDrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileDropped",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<File[]>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.fileover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "dragOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.fileover'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-80175fe5217e0f66d1155d85fba5eb3981d724d97f5d53485acb3669827e192fc5636a414dcab9a6ae1ec44672cb9c5c63d9a180cbb10164e12eb8fa71f1088f",
            "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "selector": "[ddTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "ddTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "TooltipPosition",
                    "decorators": []
                },
                {
                    "name": "sticky",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                }
            ],
            "propertiesClass": [
                {
                    "name": "delayMs",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroyCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "offset",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHides tooltip.",
                    "description": "<p>Hides tooltip.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCreates tooltip, sets correct position and then shows it.",
                    "description": "<p>Creates tooltip, sets correct position and then shows it.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-74d2ea8b9e74cf27d02cf1dc544f71f654b9a93cba4138a3a440ed28338b15844b5915a25dbb2bd6c416a378ce2b6fa76b5926c2f0082b9dadbe869ae360058c",
            "file": "projects/digital-delights-library/src/accordion/components/accordion/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe header text of the accordion.",
                    "description": "<p>The header text of the accordion.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerBackground",
                    "defaultValue": "'dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe background color of the accordion header.",
                    "description": "<p>The background color of the accordion header.</p>\n",
                    "line": 40,
                    "type": "\"dark\" | \"light\"",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls if the accordion is open/closed.",
                    "description": "<p>Controls if the accordion is open/closed.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "preRenderContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to pre-render the content of the accordion.\nThis can be useful for performance reasons if the content is complex.\n",
                    "description": "<p>Whether to pre-render the content of the accordion.\nThis can be useful for performance reasons if the content is complex.</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe subheader text of the accordion.",
                    "description": "<p>The subheader text of the accordion.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA template that can be passed as an input.\nFor instance, this is used with external libraries when preRenderContent is false,\nbecause some do not work properly inside ng-content.\n",
                    "description": "<p>A template that can be passed as an input.\nFor instance, this is used with external libraries when preRenderContent is false,\nbecause some do not work properly inside ng-content.</p>\n",
                    "line": 46,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accordionClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event that is emitted when the accordion is clicked.",
                    "description": "<p>An event that is emitted when the accordion is clicked.</p>\n",
                    "line": 49,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides an interactive UI component that can be expanded or collapsed.</p>\n",
            "rawdescription": "\n\nProvides an interactive UI component that can be expanded or collapsed.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "accordionClasses": {
                    "name": "accordionClasses",
                    "getSignature": {
                        "name": "accordionClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 55,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.</p>\n"
                    }
                },
                "accordionHeaderClasses": {
                    "name": "accordionHeaderClasses",
                    "getSignature": {
                        "name": "accordionHeaderClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 66,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.</p>\n"
                    }
                }
            }
        },
        {
            "name": "AccordionV2Component",
            "id": "component-AccordionV2Component-b56d094ace6d33c2dc356c28a034a0a7f0d82d66b3e6f2845e94823ffbf82756bc9a64d1df54fdf6dc87f3b176ebd945a534758000ac448d7481dc4b8c8c39d3",
            "file": "projects/digital-delights-library/src/accordion/components/accordion-v2/accordion-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-accordion-v2",
            "styleUrls": [
                "./accordion-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "headerBackground",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe background color of the accordion header.",
                    "description": "<p>The background color of the accordion header.</p>\n",
                    "line": 33,
                    "type": "\"white\" | \"light\"",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls if the accordion is open/closed.",
                    "description": "<p>Controls if the accordion is open/closed.</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sideColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe side color of the accordion.",
                    "description": "<p>The side color of the accordion.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accordionClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event that is emitted when the accordion is clicked.",
                    "description": "<p>An event that is emitted when the accordion is clicked.</p>\n",
                    "line": 36,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides an interactive UI component that can be expanded or collapsed.</p>\n",
            "rawdescription": "\n\nProvides an interactive UI component that can be expanded or collapsed.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "accordionClasses": {
                    "name": "accordionClasses",
                    "getSignature": {
                        "name": "accordionClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 42,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion based on its state.</p>\n"
                    }
                },
                "accordionHeaderClasses": {
                    "name": "accordionHeaderClasses",
                    "getSignature": {
                        "name": "accordionHeaderClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 53,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the accordion header based on its state.</p>\n"
                    }
                },
                "sideColorClasses": {
                    "name": "sideColorClasses",
                    "getSignature": {
                        "name": "sideColorClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 65,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values.\nThese classes are used to style the side color of the accordion based on its state.\n",
                        "description": "<p>Returns an object that maps class names to boolean values.\nThese classes are used to style the side color of the accordion based on its state.</p>\n"
                    }
                }
            }
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-80d4f9580968c1218965eebef867274c05fa7c2cb59b19c828ccd2147a65af86e9077efe679b82a67bd47b4e4416fda08aecf0b1069184001881902f4fbfcf9b",
            "file": "projects/digital-delights-library/src/badge/components/badge/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allowMultiline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won't wrap.\n",
                    "description": "<p>Controls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won&#39;t wrap.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the badge.\n",
                    "description": "<p>The text to be displayed on the badge.</p>\n",
                    "line": 16,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "boldText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text is bold.\n",
                    "description": "<p>Controls whether the badge text is bold.</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant for the badge.\nSupports all color options in the format 'dd-{color}'.\n",
                    "description": "<p>The color variant for the badge.\nSupports all color options in the format &#39;dd-{color}&#39;.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the badge. This is optional.\n",
                    "description": "<p>The name of the icon to be displayed on the badge. This is optional.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textSizeVariant",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size variant for the badge text.\n",
                    "description": "<p>The size variant for the badge text.</p>\n",
                    "line": 32,
                    "type": "\"normal\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe font variant for the badge text.\n",
                    "description": "<p>The font variant for the badge text.</p>\n",
                    "line": 43,
                    "type": "\"data\" | \"default\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI component that displays a badge with optional text and icon.</p>\n",
            "rawdescription": "\n\nUI component that displays a badge with optional text and icon.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "BadgeInfoComponent",
            "id": "component-BadgeInfoComponent-ca1f5882c729fa5dbfbab284dfaaea1c583af895d2880db36831261d00baa632ce3dc8914b5d1d5d20f99801851873ee5ec8965de7d5e8a0090c67b914dda68e",
            "file": "projects/digital-delights-library/src/badge/components/badge-info/badge-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge-info",
            "styleUrls": [
                "./badge-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "infoText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to be shown in the tooltip.\n",
                    "description": "<p>Text to be shown in the tooltip.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "allowMultiline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won't wrap.\n",
                    "description": "<p>Controls whether the badge text can wrap to multiple lines.\nBy default, this is set to false, meaning the text won&#39;t wrap.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the badge.\n",
                    "description": "<p>The text to be displayed on the badge.</p>\n",
                    "line": 16,
                    "type": "string | number",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "boldText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls whether the badge text is bold.\n",
                    "description": "<p>Controls whether the badge text is bold.</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant for the badge.\nSupports all color options in the format 'dd-{color}'.\n",
                    "description": "<p>The color variant for the badge.\nSupports all color options in the format &#39;dd-{color}&#39;.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the badge. This is optional.\n",
                    "description": "<p>The name of the icon to be displayed on the badge. This is optional.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "textSizeVariant",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size variant for the badge text.\n",
                    "description": "<p>The size variant for the badge text.</p>\n",
                    "line": 32,
                    "type": "\"normal\" | \"small\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe font variant for the badge text.\n",
                    "description": "<p>The font variant for the badge text.</p>\n",
                    "line": 43,
                    "type": "\"data\" | \"default\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "BadgeComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<BadgeInfoOverlayComponent>",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses the tooltip and cleans up the overlay model.\n",
                    "description": "<p>Closes the tooltip and cleans up the overlay model.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the click event on the badge.\nIf the tooltip is open, it closes it.\nIf the tooltip is not open, it opens it.\n",
                    "description": "<p>Handles the click event on the badge.\nIf the tooltip is open, it closes it.\nIf the tooltip is not open, it opens it.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Extends the BadgeComponent to include additional information in a tooltip.</p>\n",
            "rawdescription": "\n\nExtends the BadgeComponent to include additional information in a tooltip.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BadgeComponent"
            ]
        },
        {
            "name": "BadgeInfoOverlayComponent",
            "id": "component-BadgeInfoOverlayComponent-6fd84e438d3c1a2446e6dfc9f52f332cd2981556a90287882ab480ab4feafd11a2a99060342735e31c11cae67542d3ebb33967c57b3efb0fcc0c69a1dcbbed86",
            "file": "projects/digital-delights-library/src/badge/components/badge-info-overlay/badge-info-overlay.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-badge-info-overlay",
            "styleUrls": [
                "./badge-info-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-info-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-1236dcd686fe98f68f21403bc92e21cafe05496b5c922ea91b6cef1cb2e22ba5cdf5d27a4bb95342a5da039121d6455afb55a3b63eec54f11dc4a1feb21d2fdd",
            "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn aria label for the button, for accessibility purposes.\n",
                    "description": "<p>An aria label for the button, for accessibility purposes.</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundHex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA custom background color for the button, specified as a hex code.\n",
                    "description": "<p>A custom background color for the button, specified as a hex code.</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of the button.\n'submit' should be used for buttons inside forms.\n",
                    "description": "<p>The type of the button.\n&#39;submit&#39; should be used for buttons inside forms.</p>\n",
                    "line": 70,
                    "type": "\"button\" | \"submit\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant of the button.\n",
                    "description": "<p>The color variant of the button.</p>\n",
                    "line": 34,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button is disabled and does not emit click events.\n",
                    "description": "<p>If true, the button is disabled and does not emit click events.</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button will use full width styles and take up all available space.\n",
                    "description": "<p>If true, the button will use full width styles and take up all available space.</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the icon to be displayed on the button.\n",
                    "description": "<p>The name of the icon to be displayed on the button.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size of the button.\n",
                    "description": "<p>The size of the button.</p>\n",
                    "line": 44,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf set, the URL will be opened in a new tab.\n",
                    "description": "<p>If set, the URL will be opened in a new tab.</p>\n",
                    "line": 64,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the button.\n",
                    "description": "<p>The text to be displayed on the button.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA URL or array of URL segments to be used as the link for the button.\n",
                    "description": "<p>A URL or array of URL segments to be used as the link for the button.</p>\n",
                    "line": 59,
                    "type": "string | string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn event that is emitted when the button is clicked.\n",
                    "description": "<p>An event that is emitted when the button is clicked.</p>\n",
                    "line": 75,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the buttonClick event if the button is not disabled.\n",
                    "description": "<p>Emits the buttonClick event if the button is not disabled.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>A versatile button component with various customization options.</p>\n",
            "rawdescription": "\n\nA versatile button component with various customization options.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 91,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values for styling the button.\n",
                        "description": "<p>Returns an object that maps class names to boolean values for styling the button.</p>\n"
                    }
                },
                "buttonIconClasses": {
                    "name": "buttonIconClasses",
                    "getSignature": {
                        "name": "buttonIconClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 106,
                        "rawdescription": "\n\nReturns an object that maps class names to boolean values for styling the button's icon.\n",
                        "description": "<p>Returns an object that maps class names to boolean values for styling the button&#39;s icon.</p>\n"
                    }
                }
            }
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-f3f3a362b8eaeddec7762e78605de85e4b0c385927dde17bf96a8fe9bec54bfbd0810a93e8efad13882bff3795a34efda7749eab7a82bd10059191857febc91e",
            "file": "projects/digital-delights-library/src/button/components/button-group/button-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button-group",
            "styleUrls": [
                "./button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for the button group, enhancing accessibility.\n",
                    "description": "<p>Aria label for the button group, enhancing accessibility.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn array of button models. Each model defines the properties of a button.\n",
                    "description": "<p>An array of button models. Each model defines the properties of a button.</p>\n",
                    "line": 17,
                    "type": "ButtonGroupModel[]",
                    "decorators": []
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRole attribute for the button group, providing information about the type of widget presented.\n",
                    "description": "<p>Role attribute for the button group, providing information about the type of widget presented.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Renders a group of buttons based on the provided model.</p>\n",
            "rawdescription": "\n\nRenders a group of buttons based on the provided model.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "ButtonGroupV2Component",
            "id": "component-ButtonGroupV2Component-ba14ac44a12397d11970b77ab4d8a87815d4b221100547c954bb452cdd6af1f24576ee3dea7a794733c7a58a8571c90024130ba25669612f87792b5f7608176b",
            "file": "projects/digital-delights-library/src/button/components/button-group-v2/button-group-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-button-group-v2",
            "styleUrls": [
                "./button-group-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for the button group. This label enhances accessibility by providing\na descriptive name for the button group.\n",
                    "description": "<p>Aria label for the button group. This label enhances accessibility by providing\na descriptive name for the button group.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of button models. Each model defines the properties of a button.\nThe buttons are rendered in the order they appear in the array.\n",
                    "description": "<p>Array of button models. Each model defines the properties of a button.\nThe buttons are rendered in the order they appear in the array.</p>\n",
                    "line": 19,
                    "type": "ButtonGroupModel[]",
                    "decorators": []
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRole attribute for the button group. This attribute provides information about\nthe type of widget presented. It can be used by assistive technologies to help users\nnavigate and interact with the button group.\n",
                    "description": "<p>Role attribute for the button group. This attribute provides information about\nthe type of widget presented. It can be used by assistive technologies to help users\nnavigate and interact with the button group.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Renders a group of buttons in a column layout.\nEach button can have its own properties and behavior.</p>\n",
            "rawdescription": "\n\nRenders a group of buttons in a column layout.\nEach button can have its own properties and behavior.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-58aa5e6ce74bee1db8ac077e229280dc4436c916cda11a667df5bf3732caa9376561f2716c141cc20fef2bee6fdd2594ecd9904dd2a89c7c68f6fce35d7b9134",
            "file": "projects/digital-delights-library/src/card/components/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the spacer of the card to smaller one.\n",
                    "description": "<p>Changes the spacer of the card to smaller one.</p>\n",
                    "line": 13,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "CardHeaderComponent",
            "id": "component-CardHeaderComponent-bef801f49c68a4875f0705b9fdfe719055aa12f2d1937617416e6cfa241b1c88b68a6b0b6a9b9dd6721f31f9d45a4fe05a24706df4fce1b158d7f804a6287c99",
            "file": "projects/digital-delights-library/src/card/components/card-header/card-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card-header",
            "styleUrls": [
                "./card-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines different spacers for card header.\nSmaller one is for now non-existent spacer.\n",
                    "description": "<p>Defines different spacers for card header.\nSmaller one is for now non-existent spacer.</p>\n",
                    "line": 17,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "CardRowComponent",
            "id": "component-CardRowComponent-b1d682b24732dcacc1568fc0e276dae740294dac4719bd5f2288f7a83f72fae1e10512bb3d807a179de002b2058de559bdbffbdddff7f1468e5be41eb5b1473d",
            "file": "projects/digital-delights-library/src/card/components/card-row/card-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-card-row",
            "styleUrls": [
                "./card-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-row.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines different spacers for card row.\nSmaller one is for now non-existent spacer.\n",
                    "description": "<p>Defines different spacers for card row.\nSmaller one is for now non-existent spacer.</p>\n",
                    "line": 14,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-6b66aa25c855715c35896530deb3966658f8d9f6ac1ef508cef3404a658c8f14463454ebbb873ab9425ef4ef5f1de4213f34c63ca8a044d409dbfea8709bf3a2",
            "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe text to be displayed on the chip.\n",
                    "description": "<p>The text to be displayed on the chip.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chipVariant",
                    "defaultValue": "'removable'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe variant of the chip.\n'removable' variant has a white background and red hover.\n'tag' variant changes hover to white button and secondary button when selected.\n",
                    "description": "<p>The variant of the chip.\n&#39;removable&#39; variant has a white background and red hover.\n&#39;tag&#39; variant changes hover to white button and secondary button when selected.</p>\n",
                    "line": 40,
                    "type": "ChipVariant",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon to be displayed on the chip.\nIf undefined, no icon is rendered.\n",
                    "description": "<p>The icon to be displayed on the chip.\nIf undefined, no icon is rendered.</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "'dd-accent-fg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color of the icon on the chip.\n",
                    "description": "<p>The color of the icon on the chip.</p>\n",
                    "line": 51,
                    "type": "ChipIconColor",
                    "decorators": []
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of notifications to be displayed on the chip.\nIf defined, the icon will not be shown.\n",
                    "description": "<p>The number of notifications to be displayed on the chip.\nIf defined, the icon will not be shown.</p>\n",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the chip is selected.\nA selected chip has a accent color.\n",
                    "description": "<p>Determines whether the chip is selected.\nA selected chip has a accent color.</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stopPropagation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the propagation of the click event should be stopped.\nWhen true, event.stopPropagation() is not called.\nThis is useful when used in tab navigation, as stopping the event from propagating can interfere with routing.\n",
                    "description": "<p>Determines whether the propagation of the click event should be stopped.\nWhen true, event.stopPropagation() is not called.\nThis is useful when used in tab navigation, as stopping the event from propagating can interfere with routing.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chipClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an event when the chip is clicked.\n",
                    "description": "<p>Emits an event when the chip is clicked.</p>\n",
                    "line": 69,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChipClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the click event on the chip.\nIf stopPropagation is true, it stops the event from bubbling up.\n",
                    "description": "<p>Handles the click event on the chip.\nIf stopPropagation is true, it stops the event from bubbling up.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component that provides a customizable chip element.\nIt can be used in various contexts.</p>\n",
            "rawdescription": "\n\nComponent that provides a customizable chip element.\nIt can be used in various contexts.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "chipClasses": {
                    "name": "chipClasses",
                    "getSignature": {
                        "name": "chipClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 87,
                        "rawdescription": "\n\nHelper method for rendering ngClass for the chip.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\n",
                        "description": "<p>Helper method for rendering ngClass for the chip.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.</p>\n"
                    }
                },
                "notificationClasses": {
                    "name": "notificationClasses",
                    "getSignature": {
                        "name": "notificationClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 103,
                        "rawdescription": "\n\nHelper method for rendering ngClass for the chip notifications.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.\n",
                        "description": "<p>Helper method for rendering ngClass for the chip notifications.\nIt returns an object where the keys are the class names and the values are boolean expressions determining whether the class should be applied.</p>\n"
                    }
                }
            }
        },
        {
            "name": "ConfirmSelectionOverlayComponent",
            "id": "component-ConfirmSelectionOverlayComponent-9887ba8e9f4f389574b8b714cb22ff0ec791786e807636c31d9fb1c28ba9aadd20b34a8c1ac3f2a526015c38034665508cfdaf6ae3d022cf15cb98f52eb5481d",
            "file": "projects/digital-delights-library/src/overlay/components/confirm-selection-overlay/confirm-selection-overlay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-confirm-selection-overlay",
            "styleUrls": [
                "./confirm-selection-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-selection-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmSelectionOverlayModel",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayAnimationState",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ConfirmSelectionOverlayModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ConfirmSelectionOverlayModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy",
                "OnInit"
            ]
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-dd11c1db6507702b920f62223a86763bd88675777d45bfe58efc27fb45ced9c0b1abb2c51bf4714655630f8f84c235909effb81b7517957ba65caac248c9633f",
            "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }",
                    "type": "component"
                }
            ],
            "selector": "dd-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe date (month) that the datepicker is currently showing.\nIf this value is initialized, that month is shown first.\n",
                    "description": "<p>The date (month) that the datepicker is currently showing.\nIf this value is initialized, that month is shown first.</p>\n",
                    "line": 99,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "noFreeSlotsDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDates that can be selected and have free slots.",
                    "description": "<p>Dates that can be selected and have free slots.</p>\n",
                    "line": 93,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{ ...defaultOptions }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfiguration for the datepicker.",
                    "description": "<p>Configuration for the datepicker.</p>\n",
                    "line": 87,
                    "type": "DatepickerOptions",
                    "decorators": []
                },
                {
                    "name": "selectableDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2917,
                            "end": 2953,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 354,
                            "tagName": {
                                "pos": 2918,
                                "end": 2921,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "see"
                            },
                            "comment": "<p>min and max.</p>\n",
                            "name": {
                                "pos": 2922,
                                "end": 2939,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 317,
                                "name": {
                                    "pos": 2922,
                                    "end": 2939,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "DatepickerOptions"
                                }
                            }
                        }
                    ],
                    "rawdescription": "\nDates that can be selected. Also affected by @see DatepickerOptions min and max.",
                    "description": "<p>Dates that can be selected. Also affected by @see DatepickerOptions min and max.</p>\n",
                    "line": 90,
                    "type": "Date[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Day",
                    "optional": true,
                    "description": "<p>The current date to display in the legend.</p>\n",
                    "line": 112,
                    "rawdescription": "\nThe current date to display in the legend."
                },
                {
                    "name": "dayNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>The names of the weekdays for the header row.</p>\n",
                    "line": 109,
                    "rawdescription": "\nThe names of the weekdays for the header row."
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Day[]",
                    "optional": false,
                    "description": "<p>The days currently being shown.</p>\n",
                    "line": 106,
                    "rawdescription": "\nThe days currently being shown."
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Locale",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "onChangeCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 272,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 271,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selected",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>The currently selected date.</p>\n",
                    "line": 104,
                    "rawdescription": "\nThe currently selected date."
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMonth",
                    "args": [
                        {
                            "name": "change",
                            "type": " | \"1\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": " | \"1\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inThisMonth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Day",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inThisMonth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasNoFreeSlots",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initDayNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRefreshes days array to match current date.",
                    "description": "<p>Refreshes days array to match current date.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSameDate",
                    "args": [
                        {
                            "name": "a",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCheck if two dates are equal. Ignores time.",
                    "description": "<p>Check if two dates are equal. Ignores time.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allSelectable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allSelectable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDay",
                    "args": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides a datepicker component.</p>\n",
            "rawdescription": "\n\nProvides a datepicker component.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 121,
                        "rawdescription": "\n\nReturns the title of the datepicker, which is the formatted date.\nMore info about formats: https://date-fns.org/v2.22.1/docs/format\n",
                        "description": "<p>Returns the title of the datepicker, which is the formatted date.\nMore info about formats: <a href=\"https://date-fns.org/v2.22.1/docs/format\">https://date-fns.org/v2.22.1/docs/format</a></p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 129,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Date",
                        "line": 125
                    }
                }
            }
        },
        {
            "name": "DialogBodyComponent",
            "id": "component-DialogBodyComponent-f9452c68dd1aaf10afa070a6350e645933db05a7d3dd6177b0c0730e29e93e619de71fe829cdcad02370505410fa2f968f3225603a214c5023e505038ead653d",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-body/dialog-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-body",
            "styleUrls": [
                "./dialog-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-body.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the body.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the body.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 15,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "bodyPaddingClasses": {
                    "name": "bodyPaddingClasses",
                    "getSignature": {
                        "name": "bodyPaddingClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nngClass selector for the body.\n",
                        "description": "<p>ngClass selector for the body.</p>\n"
                    }
                }
            }
        },
        {
            "name": "DialogFooterComponent",
            "id": "component-DialogFooterComponent-db1b767042ff1fcecc54a937f0d4a4860c622980c04f2efc470b62eff011d69346e476ab91594bae03d290b43f5d98169ea2a4a0491e35f9c9c206bd4ee2b0af",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-footer/dialog-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-footer",
            "styleUrls": [
                "./dialog-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the footer.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the footer.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 15,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "footerPaddingClasses": {
                    "name": "footerPaddingClasses",
                    "getSignature": {
                        "name": "footerPaddingClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nngClass selector for the body.\n",
                        "description": "<p>ngClass selector for the body.</p>\n"
                    }
                }
            }
        },
        {
            "name": "DialogHeaderComponent",
            "id": "component-DialogHeaderComponent-34b61d976387cc3c817841c90ecc8dcd9a6ad5c81931cb27672b6836b13a2b10abd47a9ca9594891f378c6c2129fd27a0420e0e32d7345c713ec68c36baee157",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-header/dialog-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-header",
            "styleUrls": [
                "./dialog-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeText",
                    "defaultValue": "'Close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasCloseButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHide close button from dialog by setting this false",
                    "description": "<p>Hide close button from dialog by setting this false</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerBackgroundColor",
                    "defaultValue": "'accent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"white\" | \"accent\"",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds title to the header.",
                    "description": "<p>Adds title to the header.</p>\n",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'dialog-wide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the header.\nDefault is 'dialog-wide'.\n",
                    "description": "<p>Determines the type of padding added to the header.\nDefault is &#39;dialog-wide&#39;.</p>\n",
                    "line": 19,
                    "type": "DialogOverlaySize",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "headerClasses": {
                    "name": "headerClasses",
                    "getSignature": {
                        "name": "headerClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "DialogWrapperComponent",
            "id": "component-DialogWrapperComponent-54bf062ee4f365b4496a585a19333fab90ca86da7cbdc76886061d3615b05dc9382d635328ff2324d84a0a7acbe31382d78bac465eb9340d494cfe91453f4a22",
            "file": "projects/digital-delights-library/src/overlay/components/dialog-wrapper/dialog-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-dialog-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "OverlayAnimationState",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "klass",
                    "defaultValue": "'dd-white-bg elevation-black h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "style_display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "@slideFromRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "OverlayAnimationState | undefined",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "'dd-white-bg elevation-black h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.flexDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Wrapper component for dialog. This component provides the overlay with a slideFromRight\nanimation and the classes used for the dialog panel. For an overlay wrapper\nwith a in-top animation, use OverlayWrapperComponent.</p>\n",
            "rawdescription": "\n\nWrapper component for dialog. This component provides the overlay with a slideFromRight\nanimation and the classes used for the dialog panel. For an overlay wrapper\nwith a in-top animation, use OverlayWrapperComponent.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "style_flexDirection": {
                    "name": "style_flexDirection",
                    "getSignature": {
                        "name": "style_flexDirection",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "slideFromRightState": {
                    "name": "slideFromRightState",
                    "getSignature": {
                        "name": "slideFromRightState",
                        "type": "",
                        "returnType": "OverlayAnimationState | undefined",
                        "line": 26
                    }
                },
                "hasAnimation": {
                    "name": "hasAnimation",
                    "getSignature": {
                        "name": "hasAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "DividerComponent",
            "id": "component-DividerComponent-d918e5a1f94bdca69c261870cf96c4fe249dbc9692e71c0903606d7ff43ac82a5b4639f8a85b59b2117312feeae24a3355e7805cf6d3c4931a7f2e8d41a3af0c",
            "file": "projects/digital-delights-library/src/shared/components/divider/divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorVariant",
                    "defaultValue": "'dd-primary-200'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe color variant to use for the divider.\nThis component supports all color variants.\n",
                    "description": "<p>The color variant to use for the divider.\nThis component supports all color variants.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "spacerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the spacer to use for adding a negative margin to the divider.\nThe parent component should have added a spacer with this name.\n",
                    "description": "<p>The name of the spacer to use for adding a negative margin to the divider.\nThe parent component should have added a spacer with this name.</p>\n",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.\n",
                    "description": "<p>Dynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Provides a divider component that can be customized with different colors and margins.</p>\n",
            "rawdescription": "\n\nProvides a divider component that can be customized with different colors and margins.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "string",
                        "returnType": "string",
                        "line": 29,
                        "rawdescription": "\n\nDynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.\n",
                        "description": "<p>Dynamically generates the class attribute for the host element.\nThis ensures the divider is displayed correctly based on the provided spacer and color variant.</p>\n"
                    }
                }
            }
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-7565260e3c23366db9daf637bb87336bad502a74e72c3c527f378a7f7f2ca9244253c9444036d54027d7bcfb607089e4d807e792d9d27d9f200637dc87e861b4",
            "file": "projects/digital-delights-library/src/file-upload/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FileUploadComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FileUploadComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows changing the background color of the input if the element is used on a different background color than white.\nUse color classes that define both background and font color from the library.\n",
                    "description": "<p>Allows changing the background color of the input if the element is used on a different background color than white.\nUse color classes that define both background and font color from the library.</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disclaimerText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional disclaimer text to display below the file upload area.",
                    "description": "<p>Optional disclaimer text to display below the file upload area.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for file validation.",
                    "description": "<p>Custom error messages for file validation.</p>\n",
                    "line": 41,
                    "type": "FileErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 44,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional label to display above the file upload area.",
                    "description": "<p>Optional label to display above the file upload area.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the component should accept multiple file inputs.",
                    "description": "<p>Determines whether the component should accept multiple file inputs.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether the form has been submitted.",
                    "description": "<p>Indicates whether the form has been submitted.</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "'Drop file or click to select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to display in the file upload area.",
                    "description": "<p>Text to display in the file upload area.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the default size of the file upload.\n'small' is the same size as form input and 'medium' has a minimum height of 200px.\n",
                    "description": "<p>Defines the default size of the file upload.\n&#39;small&#39; is the same size as form input and &#39;medium&#39; has a minimum height of 200px.</p>\n",
                    "line": 53,
                    "type": "\"small\" | \"medium\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits an event when the file input value changes.",
                    "description": "<p>Emits an event when the file input value changes.</p>\n",
                    "line": 62,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 220,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 221,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "<p>Array of files selected for upload.</p>\n",
                    "line": 65,
                    "rawdescription": "\nArray of files selected for upload."
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid file'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Default error message for invalid files.</p>\n",
                    "line": 74,
                    "rawdescription": "\nDefault error message for invalid files.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Utility function to get keys from an object.</p>\n",
                    "line": 78,
                    "rawdescription": "\nUtility function to get keys from an object."
                },
                {
                    "name": "showErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines whether errors should be displayed.</p>\n",
                    "line": 71,
                    "rawdescription": "\nDetermines whether errors should be displayed."
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<[] | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the file input.</p>\n",
                    "line": 68,
                    "rawdescription": "\nForm control for the file input."
                }
            ],
            "methodsClass": [
                {
                    "name": "checkForMultiple",
                    "args": [
                        {
                            "name": "fileArray",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileArray",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToArray",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList | File[] | File | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File[]",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList | File[] | File | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChanges",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileDropped",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the file select event.\nConverts the FileList to an array, checks for multiple files if necessary, and clears the input value.\n",
                    "description": "<p>Handles the file select event.\nConverts the FileList to an array, checks for multiple files if necessary, and clears the input value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a file upload functionality with validation and error handling.\nIt supports multiple file inputs and allows customization of the upload text, disclaimer text, and label.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a file upload functionality with validation and error handling.\nIt supports multiple file inputs and allows customization of the upload text, disclaimer text, and label.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 85,
                        "rawdescription": "\n\nReturns the appropriate error message for the current validation errors.\nIf a custom error message is provided for the current error, it will be used.\nOtherwise, a generic error message will be returned.\n",
                        "description": "<p>Returns the appropriate error message for the current validation errors.\nIf a custom error message is provided for the current error, it will be used.\nOtherwise, a generic error message will be returned.</p>\n"
                    }
                },
                "containerClass": {
                    "name": "containerClass",
                    "getSignature": {
                        "name": "containerClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 105,
                        "rawdescription": "\nReturns the appropriate classes for the file upload container based on the variant.",
                        "description": "<p>Returns the appropriate classes for the file upload container based on the variant.</p>\n"
                    }
                }
            }
        },
        {
            "name": "FormCheckboxComponent",
            "id": "component-FormCheckboxComponent-fc2cff8fbd7bb5f848a94ce35ce0a49191d935e9bf117163af43321f349dc081b4daa23f98708ae19a4604979de5eb367805d3085bca2c1f5cb83d75344f94a3",
            "file": "projects/digital-delights-library/src/form-field/components/form-checkbox/form-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormCheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-checkbox",
            "styleUrls": [
                "./form-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkboxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the checkbox is disabled.",
                    "description": "<p>Determines whether the checkbox is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for checkbox validation.",
                    "description": "<p>Custom error messages for checkbox validation.</p>\n",
                    "line": 38,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 41,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the checkbox should be validated on initialization.",
                    "description": "<p>Determines whether the checkbox should be validated on initialization.</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the checkbox.",
                    "description": "<p>Label for the checkbox.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the checkbox should be validated when the form is submitted.\nIf not provided, the component will mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines whether the checkbox should be validated when the form is submitted.\nIf not provided, the component will mark itself as touched whenever the value is changed.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Stores the submitted value for the checkbox.</p>\n",
                    "line": 56,
                    "rawdescription": "\nStores the submitted value for the checkbox.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines whether the checkbox is checked.</p>\n",
                    "line": 50,
                    "rawdescription": "\nDetermines whether the checkbox is checked."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Subject to emit when the component is destroyed.</p>\n",
                    "line": 59,
                    "rawdescription": "\nSubject to emit when the component is destroyed.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Checkbox required'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Default error message for invalid checkbox.</p>\n",
                    "line": 53,
                    "rawdescription": "\nDefault error message for invalid checkbox.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Utility function to get keys from an object.\n<a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 66,
                    "rawdescription": "\n\nUtility function to get keys from an object.\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 192
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean | undefined | null>",
                    "optional": false,
                    "description": "<p>Form control for the checkbox input.</p>\n",
                    "line": 47,
                    "rawdescription": "\nForm control for the checkbox input."
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the change event for the checkbox.\nToggles the checked state and propagates the change.\n",
                    "description": "<p>Handles the change event for the checkbox.\nToggles the checked state and propagates the change.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRuns one change detection and marks the form field as touched.\nThis allows the error to be shown if the form field is initialized with an invalid value.\n",
                    "description": "<p>Runs one change detection and marks the form field as touched.\nThis allows the error to be shown if the form field is initialized with an invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a checkbox input field with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a checkbox input field with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 73,
                        "rawdescription": "\n\nFinds the error message from the input.\n\n",
                        "description": "<p>Finds the error message from the input.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2674,
                                "end": 2753,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 349,
                                "tagName": {
                                    "pos": 2675,
                                    "end": 2682,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>The error message if found, otherwise the generic error message.</p>\n"
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "FormDatepickerFieldComponent",
            "id": "component-FormDatepickerFieldComponent-f8c0008503782be70eba1210763791feddec2d6012a8ae985164d305a31d475092a576eb62355834e2b18327997f3b7a5ee097e12061761c750aeea9228d783e",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-datepicker-field/form-datepicker-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormDatepickerFieldComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormDatepickerFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-datepicker-field",
            "styleUrls": [
                "./form-datepicker-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-datepicker-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on a different background color than white,\nyou can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on a different background color than white,\nyou can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for datepicker field.",
                    "description": "<p>Label for datepicker field.</p>\n",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages for datepicker validation.",
                    "description": "<p>Custom error messages for datepicker validation.</p>\n",
                    "line": 83,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors from the form control.",
                    "description": "<p>Validation errors from the form control.</p>\n",
                    "line": 80,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "interval",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInterval for the timepicker.",
                    "description": "<p>Interval for the timepicker.</p>\n",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum hour selectable.",
                    "description": "<p>Maximum hour selectable.</p>\n",
                    "line": 65,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMinimum hour selectable.",
                    "description": "<p>Minimum hour selectable.</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{\n        ...defaultOptions,\n        allSelectable: true,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the datepicker.\nBy default, all dates are selectable.\n",
                    "description": "<p>Configuration for the datepicker.\nBy default, all dates are selectable.</p>\n",
                    "line": 74,
                    "type": "DatepickerOptions",
                    "decorators": []
                },
                {
                    "name": "selectDateText",
                    "defaultValue": "'Select Date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to be shown when there is no selected item.",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCurrently selected date.",
                    "description": "<p>Currently selected date.</p>\n",
                    "line": 59,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "showTimePicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines whether the timepicker should also be shown.\nIf not shown, datepicker will fill the whole row.\n",
                    "description": "<p>Determines whether the timepicker should also be shown.\nIf not shown, datepicker will fill the whole row.</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines whether the datepicker should be validated when the form is submitted.",
                    "description": "<p>Determines whether the datepicker should be validated when the form is submitted.</p>\n",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for time select field.",
                    "description": "<p>Label for time select field.</p>\n",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOutput event that is emitted when an item is clicked in datepicker.",
                    "description": "<p>Output event that is emitted when an item is clicked in datepicker.</p>\n",
                    "line": 100,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 310
                },
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 122,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Locale",
                    "optional": true,
                    "description": "<p>Locale data for the datepicker.</p>\n",
                    "line": 106,
                    "rawdescription": "\nLocale data for the datepicker."
                },
                {
                    "name": "objectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 132,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 311
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<FormFieldDatepickerComponent>",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "selectableTimes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<>[]",
                    "optional": false,
                    "description": "<p>List of selectable times.</p>\n",
                    "line": 115,
                    "rawdescription": "\nList of selectable times."
                },
                {
                    "name": "selectedTimeString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>String representation of the selected time.</p>\n",
                    "line": 109,
                    "rawdescription": "\nString representation of the selected time."
                },
                {
                    "name": "selectedTimeValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "<p>Selected time value.</p>\n",
                    "line": 112,
                    "rawdescription": "\nSelected time value."
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<Date | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the datepicker input.</p>\n",
                    "line": 103,
                    "rawdescription": "\nForm control for the datepicker input."
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItemClick",
                    "args": [
                        {
                            "name": "time",
                            "type": "SelectItem<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "SelectItem<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDateValue",
                    "args": [
                        {
                            "name": "time",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a datepicker field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a datepicker field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localeService",
                        "type": "DdLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 137,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            }
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-240ef4996ca82bc244097f67ee8218b7205c1c6ddcc2d007b173cead3ff8c6d6e66d48038ec54188e604ae55c5a811c800a5e3a837c82b954d71339c577a3274",
            "file": "projects/digital-delights-library/src/form-field/components/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormFieldComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-field",
            "styleUrls": [
                "./form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow the field should be autocompleted.\nRefer to https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n",
                    "description": "<p>How the field should be autocompleted.\nRefer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a></p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if autofocus should be enabled.",
                    "description": "<p>Determines if autofocus should be enabled.</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the background color of the input.\nIf you are using the element on a different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\n",
                    "description": "<p>Sets the background color of the input.\nIf you are using the element on a different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom error messages.",
                    "description": "<p>Custom error messages.</p>\n",
                    "line": 53,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors.",
                    "description": "<p>Validation errors.</p>\n",
                    "line": 56,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "fieldDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if the form field should be disabled.",
                    "description": "<p>Determines if the form field should be disabled.</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if validation should be initialized.",
                    "description": "<p>Determines if validation should be initialized.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the form field.",
                    "description": "<p>Label for the form field.</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if a loading indicator should be displayed inside the form field.\n",
                    "description": "<p>Determines if a loading indicator should be displayed inside the form field.</p>\n",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the input field.\n",
                    "description": "<p>Name of the input field.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if padding reserved for hint and error elements should be removed.",
                    "description": "<p>Determines if padding reserved for hint and error elements should be removed.</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the form field should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines if the form field should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the tab index of the form field.\nTab index is null on default so that the attribute is set only if explicitly stated.\n",
                    "description": "<p>Sets the tab index of the form field.\nTab index is null on default so that the attribute is set only if explicitly stated.</p>\n",
                    "line": 100,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "textareaHeight",
                    "defaultValue": "'h-200'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets the height class for the textarea input.",
                    "description": "<p>Sets the height class for the textarea input.</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the input.\n'textarea' type converts the normal <input> to <textarea>.\n",
                    "description": "<p>Type of the input.\n&#39;textarea&#39; type converts the normal <input> to <textarea>.</p>\n",
                    "line": 50,
                    "type": "\"text\" | \"password\" | \"textarea\" | \"number\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 105,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "inputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "<p>Reference to the input field to be autofocused on.</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nReference to the input field to be autofocused on.\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 120,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a form field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.</p>\n",
            "rawdescription": "\n\nThis component provides a form field with validation and error handling.\nIt supports form submission and initialization validation.\nIt also provides a variant for different sizes and a customizable background color.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnChanges",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 125,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 144
                    }
                }
            }
        },
        {
            "name": "FormFieldDatepickerComponent",
            "id": "component-FormFieldDatepickerComponent-7552f4793e19bc4fc0d9f71a6e836d70928eeecc41c4f33060b34403ac4039ba558fcd10cd2bed9b560ed5abf22001e87c0dfd7838115e54edb1a0993e5523e0",
            "file": "projects/digital-delights-library/src/form-field-datepicker/components/form-field-datepicker/form-field-datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-form-field-datepicker",
            "styleUrls": [
                "./form-field-datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field-datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmit itemclick so that it can be used in form field.",
                    "description": "<p>Emit itemclick so that it can be used in form field.</p>\n",
                    "line": 24,
                    "type": "EventEmitter<Date>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormFieldDatepickerModel",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>Selected date.</p>\n",
                    "line": 27,
                    "rawdescription": "\nSelected date."
                },
                {
                    "name": "selectableDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "FormFieldDatepickerModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "FormFieldDatepickerModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "FormRadioComponent",
            "id": "component-FormRadioComponent-54cafe18b8e0ed979e83ca08caa47b07dcf9c3edd4d29d5b2d19c75ea80b22855c9faef841b05eb99d7942add0935dfa14c0afeae9861e1230570e0ce96a60c5",
            "file": "projects/digital-delights-library/src/form-field/components/form-radio/form-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormRadioComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-radio",
            "styleUrls": [
                "./form-radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-radio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors.",
                    "description": "<p>Validation errors.</p>\n",
                    "line": 37,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the radio button.",
                    "description": "<p>Label for the radio button.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName of the radio group.",
                    "description": "<p>Name of the radio group.</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if the radio button should be disabled.",
                    "description": "<p>Determines if the radio button should be disabled.</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the form radio should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>Determines if the form radio should be validated when the form is submitted.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of the radio button.",
                    "description": "<p>Value of the radio button.</p>\n",
                    "line": 40,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Internal state to keep track of form submission.</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nInternal state to keep track of form submission.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates whether the radio button is checked.</p>\n",
                    "line": 49,
                    "rawdescription": "\nIndicates whether the radio button is checked."
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | undefined | null>",
                    "optional": false,
                    "description": "<p>FormControl instance for the radio button.</p>\n",
                    "line": 46,
                    "rawdescription": "\nFormControl instance for the radio button."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 134
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\n\n",
                    "description": "<p>Handles event change for the component.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a radio button within a form with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a radio button within a form with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ]
        },
        {
            "name": "FormSelectComponent",
            "id": "component-FormSelectComponent-02728136003ca37249d77461bf4a5f8ade324547e5fcbe1e1bdb94df9d8fa1e0a5bfb643321c490ac0e543c937114d75f30e2f0cd6da786352ed891be5030f4f",
            "file": "projects/digital-delights-library/src/form-field/components/form-select/form-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormSelectComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormSelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-select",
            "styleUrls": [
                "./form-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nError messages.",
                    "description": "<p>Error messages.</p>\n",
                    "line": 41,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe icon to be displayed.",
                    "description": "<p>The icon to be displayed.</p>\n",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelectable items.",
                    "description": "<p>Selectable items.</p>\n",
                    "line": 35,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel to be shown on field.",
                    "description": "<p>Label to be shown on field.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multi",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf multiselect list should be used.",
                    "description": "<p>If multiselect list should be used.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf search functionality is enabled.",
                    "description": "<p>If search functionality is enabled.</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen form is submitted, form field is validated.\n",
                    "description": "<p>When form is submitted, form field is validated.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Invalid field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message.</p>\n",
                    "line": 79,
                    "rawdescription": "\nGeneric error message.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "multipleSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 94,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "showErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determine whether errors should be shown.</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nDetermine whether errors should be shown.\n"
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<SelectItem | [] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectMultiItem",
                    "args": [
                        {
                            "type": "[SelectItem<any>, (string | number)[]]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[SelectItem<any>, (string | number)[]]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component provides a select input field within a form with validation and error handling.\nIt supports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nThis component provides a select input field within a form with validation and error handling.\nIt supports form submission and initialization validation.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 99,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            }
        },
        {
            "name": "FormToggleSliderComponent",
            "id": "component-FormToggleSliderComponent-2e7a7db0fbed5df91029cf0ea6e9f4effbbe3aa94e91fc090a213dc4afee1d5267360dac44b8542004e5c0243493231e7cdeec30e84dc6abfe2106bd71d3bcda",
            "file": "projects/digital-delights-library/src/form-field/components/form-toggle-slider/form-toggle-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormToggleSliderComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "dd-form-toggle-slider",
            "styleUrls": [
                "./form-toggle-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-toggle-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether the toggle slider is disabled.",
                    "description": "<p>Indicates whether the toggle slider is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nError messages for the toggle slider.",
                    "description": "<p>Error messages for the toggle slider.</p>\n",
                    "line": 44,
                    "type": "ValidationErrorMessages",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidation errors for the toggle slider.",
                    "description": "<p>Validation errors for the toggle slider.</p>\n",
                    "line": 38,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "initValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIndicates whether to perform initial validation.",
                    "description": "<p>Indicates whether to perform initial validation.</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the toggle slider input.",
                    "description": "<p>Label for the toggle slider input.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen form is submitted, form toggle slider is validated and new detection cycle is triggered.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.\n",
                    "description": "<p>When form is submitted, form toggle slider is validated and new detection cycle is triggered.\nIf this input is not provided, the component will simply mark itself as touched whenever the value is changed.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "_submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Save the submitted value to the component.</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nSave the submitted value to the component.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates whether the toggle slider is checked.</p>\n",
                    "line": 50,
                    "rawdescription": "\nIndicates whether the toggle slider is checked."
                },
                {
                    "name": "destroySubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericError",
                    "defaultValue": "'Slider Required'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Generic error message for the toggle slider.</p>\n",
                    "line": 53,
                    "rawdescription": "\nGeneric error message for the toggle slider.",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ObjectKeys",
                    "defaultValue": "Object.keys as <T>(o: T) => Extract<keyof T, string>[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Returns the keys from the Object.keys as keyof T.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\">https://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723</a></p>\n",
                    "line": 67,
                    "rawdescription": "\n\nReturns the keys from the Object.keys as keyof T.\n\nhttps://github.com/microsoft/TypeScript/pull/12253#issuecomment-393954723\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "value",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean | null | undefined>",
                    "optional": false,
                    "description": "<p>Form control for the toggle slider value.</p>\n",
                    "line": 47,
                    "rawdescription": "\nForm control for the toggle slider value."
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the toggle slider component.\n",
                    "description": "<p>Handles event change for the toggle slider component.</p>\n"
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMarks the form control as touched.",
                    "description": "<p>Marks the form control as touched.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRun one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with an invalid value.\n",
                    "description": "<p>Run one change detection and mark the form field as touched,\nso the error is shown if the form field is initialized with an invalid value.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister callback function as an internal method.\n",
                    "description": "<p>Register callback function as an internal method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns form validation errors or null if form is valid.\n",
                    "description": "<p>Returns form validation errors or null if form is valid.</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value from form model into the view.\n",
                    "description": "<p>Write value from form model into the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for a toggle slider input within a form with validation and error handling.\nSupports form submission and initialization validation.</p>\n",
            "rawdescription": "\n\nComponent for a toggle slider input within a form with validation and error handling.\nSupports form submission and initialization validation.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 72,
                        "rawdescription": "\n\nFind the error message from the input.\n",
                        "description": "<p>Find the error message from the input.</p>\n"
                    }
                }
            }
        },
        {
            "name": "HeaderButtonComponent",
            "id": "component-HeaderButtonComponent-11fb3dddf116962298cab7b666cbe5381adf11ba535fd2b603d4162e2994af721e971532227373819c89495896e8159a54264b4e806a1e7cd1859ed08133c6cc",
            "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-header-button",
            "styleUrls": [
                "./header-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary-dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the color of the button.\n",
                    "description": "<p>Defines the color of the button.</p>\n",
                    "line": 40,
                    "type": "HeaderButtonColor",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports DesignLibrary icons.\nDoes not render icon if not defined.\n",
                    "description": "<p>Icon for the button.\nSupports DesignLibrary icons.\nDoes not render icon if not defined.</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf special icon color is needed.\nThis is needed for the header menu button icon.\nOnly supports 'white'\n",
                    "description": "<p>If special icon color is needed.\nThis is needed for the header menu button icon.\nOnly supports &#39;white&#39;</p>\n",
                    "line": 52,
                    "type": "HeaderButtonIconColor",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\nDoes not render text if not defined.\n",
                    "description": "<p>Text for the button.\nDoes not render text if not defined.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to url.\n",
                    "description": "<p>Navigates to url.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useNgContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRenders the text as ng content.\n",
                    "description": "<p>Renders the text as ng content.</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the button.\n",
                    "description": "<p>Click event for the button.</p>\n",
                    "line": 57,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for a header button with text, icon, and click event.</p>\n",
            "rawdescription": "\n\nComponent for a header button with text, icon, and click event.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-adc6d3b0d02ec95b3bf3099fa4736237ee4c4ce567b9c47aaaf0cf49b533193f20e6f54f58107c4ccb58c21a10b50665be2f1993a335b75c0536d24fd7ffd6ea",
            "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary-light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 47,
                    "type": "IconButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the button shows disabled styles.\nDisabled button does not emit event.\n",
                    "description": "<p>Check if the button shows disabled styles.\nDisabled button does not emit event.</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports Design library icons.\n",
                    "description": "<p>Icon for the button.\nSupports Design library icons.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel for the icon.\n",
                    "description": "<p>Label for the icon.</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the button.\n",
                    "description": "<p>Defines the size of the button.</p>\n",
                    "line": 25,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 57,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\n",
                    "description": "<p>Text for the button.</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds link support to button click.\n",
                    "description": "<p>Adds link support to button click.</p>\n",
                    "line": 52,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVariant of the icon button.\n",
                    "description": "<p>Variant of the icon button.</p>\n",
                    "line": 20,
                    "type": "\"basic\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 67,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for an icon button with text, icon, and click event.</p>\n",
            "rawdescription": "\n\nComponent for an icon button with text, icon, and click event.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 72,
                        "rawdescription": "\n\nClasses for the ngClass of the button.\n",
                        "description": "<p>Classes for the ngClass of the button.</p>\n"
                    }
                },
                "textColorClasses": {
                    "name": "textColorClasses",
                    "getSignature": {
                        "name": "textColorClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 85,
                        "rawdescription": "\n\nClasses for the text color of the button.\n",
                        "description": "<p>Classes for the text color of the button.</p>\n"
                    }
                },
                "buttonOutlineClasses": {
                    "name": "buttonOutlineClasses",
                    "getSignature": {
                        "name": "buttonOutlineClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 96,
                        "rawdescription": "\n\nClasses for the ngClass of the button outline.\n",
                        "description": "<p>Classes for the ngClass of the button outline.</p>\n"
                    }
                },
                "iconOutlineClasses": {
                    "name": "iconOutlineClasses",
                    "getSignature": {
                        "name": "iconOutlineClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 108,
                        "rawdescription": "\n\nClasses for the icon outline.\n",
                        "description": "<p>Classes for the icon outline.</p>\n"
                    }
                }
            }
        },
        {
            "name": "IconClickableComponent",
            "id": "component-IconClickableComponent-b25d86b651af4ea67e5f1d304a5756bb1b4148b9a931c1b9108bcb86062eb667da4395b90db52ecc235d29eb99baaac9533c32a6efa317c505a1d3978f33a0e0",
            "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon-clickable",
            "styleUrls": [
                "./icon-clickable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-clickable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 53,
                    "type": "undefined | \"light\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary-light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nColor support for the icon buttons.\n",
                    "description": "<p>Color support for the icon buttons.</p>\n",
                    "line": 48,
                    "type": "IconClickableColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the button shows disabled styles.\nDisabled button does not emit event.\n",
                    "description": "<p>Check if the button shows disabled styles.\nDisabled button does not emit event.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon for the button.\nSupports Design library icons.\n",
                    "description": "<p>Icon for the button.\nSupports Design library icons.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel for the icon.\n",
                    "description": "<p>Label for the icon.</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for an icon that triggers a click event.</p>\n",
            "rawdescription": "\n\nComponent for an icon that triggers a click event.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 63,
                        "rawdescription": "\n\nPicks style class based on color.\n",
                        "description": "<p>Picks style class based on color.</p>\n"
                    }
                }
            }
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-9679b1c87f1869238e1c36d26878533fa32b12a9c02ee23585529b3ad9797523734549b2271016995e6b6c7b2b3b070cff0cf7df26c9e7e8a120fe35d1824c9d",
            "file": "projects/digital-delights-library/src/icon/components/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon class for the i tag.\n",
                    "description": "<p>Icon class for the i tag.</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconAriaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the icon",
                    "description": "<p>Label for the icon</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize supports icon size helper class \"s-X\" where X supports values from 4 to 256 with increments of 2.\nDefaults to configured default icon size.\n",
                    "description": "<p>Size supports icon size helper class &quot;s-X&quot; where X supports values from 4 to 256 with increments of 2.\nDefaults to configured default icon size.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe default size variant for the icon.\n",
                    "description": "<p>The default size variant for the icon.</p>\n",
                    "line": 30,
                    "type": "\"default\" | \"mini\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for displaying an icon.</p>\n",
            "rawdescription": "\n\nComponent for displaying an icon.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "iconClassName": {
                    "name": "iconClassName",
                    "getSignature": {
                        "name": "iconClassName",
                        "type": "string",
                        "returnType": "string",
                        "line": 35,
                        "rawdescription": "\n\nGenerates the class name for the icon based on the provided icon.\n",
                        "description": "<p>Generates the class name for the icon based on the provided icon.</p>\n"
                    }
                },
                "iconAriaHidden": {
                    "name": "iconAriaHidden",
                    "getSignature": {
                        "name": "iconAriaHidden",
                        "type": "",
                        "returnType": "boolean | null",
                        "line": 54,
                        "rawdescription": "\n\nDetermines whether the icon should be hidden from accessibility based on the presence of an aria label.\n",
                        "description": "<p>Determines whether the icon should be hidden from accessibility based on the presence of an aria label.</p>\n"
                    }
                }
            }
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-801496da3de3a2dc27e24fa381ea4f58e894cb4e904a4f73694201c28b635b144a0583e18ce5b0964bdbd8359d6fb22354059b7091c453dae2fa5d1f98d2bf28",
            "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the input.",
                    "description": "<p>Label for the input.</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName can be used to define radio button group.",
                    "description": "<p>Name can be used to define radio button group.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of input component.\nSupports 'checkbox' and 'radio'.\n",
                    "description": "<p>The type of input component.\nSupports &#39;checkbox&#39; and &#39;radio&#39;.</p>\n",
                    "line": 23,
                    "type": "InputComponentType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to 'basic'.\n",
                    "description": "<p>Add support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to &#39;basic&#39;.</p>\n",
                    "line": 42,
                    "type": "InputComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an click event for the input.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits an click event for the input.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 48,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.\n",
                    "description": "<p>Handles event change for the component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for handling input elements such as checkboxes and radio buttons.</p>\n",
            "rawdescription": "\n\nComponent for handling input elements such as checkboxes and radio buttons.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "InputContentComponent",
            "id": "component-InputContentComponent-a20e5a968744e4613f5a88e167754230c79c834261ab8e3e8411f186e03b813532348380f8d59634da151f7deae511b2d2d0d5753e2220cdf7d266d430cc4697",
            "file": "projects/digital-delights-library/src/input/components/input-content/input-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-input-content",
            "styleUrls": [
                "../input/input.component.scss",
                "./input-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cursor",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the content uses cursor: pointer. Reasons for having this as default would be\n e.g content including a link that needs to be differentiated from rest of the text. Cursor: pointer indicates more clearly that whole\ncontent is clickable.",
                    "description": "<p>If the content uses cursor: pointer. Reasons for having this as default would be\n e.g content including a link that needs to be differentiated from rest of the text. Cursor: pointer indicates more clearly that whole\ncontent is clickable.</p>\n",
                    "line": 32,
                    "type": "\"pointer\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName can be used to define radio button group.",
                    "description": "<p>Name can be used to define radio button group.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of input component.\nSupports 'checkbox' and 'radio'.\nDefaults to 'checkbox'.\n",
                    "description": "<p>The type of input component.\nSupports &#39;checkbox&#39; and &#39;radio&#39;.\nDefaults to &#39;checkbox&#39;.</p>\n",
                    "line": 18,
                    "type": "InputComponentType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to 'basic'.\n",
                    "description": "<p>Add support for 24px and 16px checkboxes.\nThe height of the elements are 32px and 24px.\nDefaults to &#39;basic&#39;.</p>\n",
                    "line": 39,
                    "type": "InputComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a click event for the input content.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits a click event for the input content.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the input content component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outputs the input click event.\n",
                    "description": "<p>Handles event change for the input content component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outputs the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for handling the content of input elements such as checkboxes and radio buttons.</p>\n",
            "rawdescription": "\n\nComponent for handling the content of input elements such as checkboxes and radio buttons.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "LoaderOverlayComponent",
            "id": "component-LoaderOverlayComponent-29d8ed75144a48f0029fb9df5100da8c0025f4b3bd18aebde3798f4b2d00c41b84b8b7fb364bcf5e6214982fc64a85b36d3db4403974b16b54eb36dce3b6e26a",
            "file": "projects/digital-delights-library/src/loader/components/loader-overlay/loader-overlay.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-overlay",
            "styleUrls": [
                "./loader-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white-bg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the background color for the overlay.\n",
                    "description": "<p>Defines the background color for the overlay.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "diameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.\n",
                    "description": "<p>Defines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.</p>\n",
                    "line": 30,
                    "type": "LoaderSpinnerSizes",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "spinnerContainerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows user to define a custom class for the spinner container.\n",
                    "description": "<p>Allows user to define a custom class for the spinner container.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a text under the loader spinner.\nUsed mainly for giving user info what is going on.\n",
                    "description": "<p>Adds a text under the loader spinner.\nUsed mainly for giving user info what is going on.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for displaying a loading overlay with a spinner and optional text.</p>\n",
            "rawdescription": "\n\nComponent for displaying a loading overlay with a spinner and optional text.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "loaderBorderSizes": {
                    "name": "loaderBorderSizes",
                    "getSignature": {
                        "name": "loaderBorderSizes",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 45,
                        "rawdescription": "\n\nCalculate the border size, the original spinner had 120px height and width and 16px borders.\n",
                        "description": "<p>Calculate the border size, the original spinner had 120px height and width and 16px borders.</p>\n"
                    }
                }
            }
        },
        {
            "name": "LoaderPageComponent",
            "id": "component-LoaderPageComponent-1052be70ae51905ad9556e77213a6615f8d07f3841a5d8845ff07305c1fcdc61d8f30bf326390944e887e0c462ba0dce5658404946641faab815d87070f571ed",
            "file": "projects/digital-delights-library/src/loader/components/loader-page/loader-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-page",
            "styleUrls": [
                "./loader-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultDiameter",
                    "defaultValue": "64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderSpinnerSizes",
                    "optional": false,
                    "description": "<p>Defines the 64px diameter for the loader element.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nDefines the 64px diameter for the loader element.\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "LoaderSpinnerComponent",
            "id": "component-LoaderSpinnerComponent-ceb056c4717495eac825c7f552eb3aa4cb980e00ac69dcdd025578fe96401039dcf7f59d1ab8f58a5a603a8bc87fffb5674d445759187dc4cad91ec0ac885335",
            "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-loader-spinner",
            "styleUrls": [
                "./loader-spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader-spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "containerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows user to define a custom class for the spinner container.\n",
                    "description": "<p>Allows user to define a custom class for the spinner container.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "diameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.\n",
                    "description": "<p>Defines the diameter for the loader element.\nSupports the spacer element sizes and 128px for extra big loaders.</p>\n",
                    "line": 26,
                    "type": "LoaderSpinnerSizes",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the spinner is shown.\nIf false then renders the content with ng-content.\n",
                    "description": "<p>Determines if the spinner is shown.\nIf false then renders the content with ng-content.</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow defining the variant colors for the spinner.\n",
                    "description": "<p>Allow defining the variant colors for the spinner.</p>\n",
                    "line": 36,
                    "type": "\"secondary\" | \"primary\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Defines a spinner loader component that allows fast and easy usage of a loader.</p>\n",
            "rawdescription": "\n\nDefines a spinner loader component that allows fast and easy usage of a loader.\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "loaderBorderSizes": {
                    "name": "loaderBorderSizes",
                    "getSignature": {
                        "name": "loaderBorderSizes",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 41,
                        "rawdescription": "\n\nCalculate the border size, the original spinner had 120px height and width and 16px borders.\n",
                        "description": "<p>Calculate the border size, the original spinner had 120px height and width and 16px borders.</p>\n"
                    }
                }
            }
        },
        {
            "name": "MultiSelectListComponent",
            "id": "component-MultiSelectListComponent-23a76bf0dca0a71d55a4759a4cdbe39ae165bf70372001c5bf559da1e82db7b926dfec6bc22447b4561455208d393dcc6770acd2a999e5b3d05c31d21b4d6e2d",
            "file": "projects/digital-delights-library/src/select/components/multi-select-list/multi-select-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-multi-select-list",
            "styleUrls": [
                "./multi-select-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows for use of custom icons.\n",
                    "description": "<p>Allows for use of custom icons.</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of items that are selectable.\n",
                    "description": "<p>List of items that are selectable.</p>\n",
                    "line": 22,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel to be shown if used in a form.\n",
                    "description": "<p>Label to be shown if used in a form.</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multipleSelectionText",
                    "defaultValue": "'selected'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText that is shown when there are multiple selected.\nAppends the count before this text item.\n",
                    "description": "<p>Text that is shown when there are multiple selected.\nAppends the count before this text item.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the search is enabled.\n",
                    "description": "<p>If the search is enabled.</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchNoResultsMessage",
                    "defaultValue": "'No results'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows text if search does not have any results.\n",
                    "description": "<p>Shows text if search does not have any results.</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchPlaceHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlaceholder for the search.\n",
                    "description": "<p>Placeholder for the search.</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of selected items.\n",
                    "description": "<p>List of selected items.</p>\n",
                    "line": 27,
                    "type": "(string | number)[]",
                    "decorators": []
                },
                {
                    "name": "selectText",
                    "defaultValue": "'Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to be shown when there is no selected item.\n",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs which list item was clicked and the whole list.\n",
                    "description": "<p>Outputs which list item was clicked and the whole list.</p>\n",
                    "line": 70,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "<p>Reference to the opened modal.</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nReference to the opened modal.\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "anchorText": {
                    "name": "anchorText",
                    "getSignature": {
                        "name": "anchorText",
                        "type": "",
                        "returnType": "string | number",
                        "line": 79
                    }
                }
            }
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-8e05945f1d8f58f61ac61ce9b3ba9656501b7830afe284ceb3793746ff783429d4dab8f1d000b3eeb373266900e8687104f69d61db0369cf7108e106c2eb9478",
            "file": "projects/digital-delights-library/src/navigation/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "favoriteNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItems marked as favorites from the sidebar.\n",
                    "description": "<p>Items marked as favorites from the sidebar.</p>\n",
                    "line": 48,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "hideSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the side bar should be hidden.\nFor instance, some projects might want to hide the whole sidebar if user is not logged in.\n",
                    "description": "<p>If the side bar should be hidden.\nFor instance, some projects might want to hide the whole sidebar if user is not logged in.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigational items for sidebar.\n",
                    "description": "<p>Navigational items for sidebar.</p>\n",
                    "line": 43,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "topbarConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe full configuration for rendering different parts of the top bar.\n",
                    "description": "<p>The full configuration for rendering different parts of the top bar.</p>\n",
                    "line": 53,
                    "type": "TopbarConfiguration",
                    "decorators": []
                },
                {
                    "name": "useCustomNavigation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis switch indicates if the solution should use Design library's side navigation or a custom one.\nThe menu button is shown always when using custom navigation.\n\nNOTE: This should be used only during migration for applications that have custom navigation.\n",
                    "description": "<p>This switch indicates if the solution should use Design library&#39;s side navigation or a custom one.\nThe menu button is shown always when using custom navigation.</p>\n<p>NOTE: This should be used only during migration for applications that have custom navigation.</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 82,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event when menu button is clicked.\n",
                    "description": "<p>Output event when menu button is clicked.</p>\n",
                    "line": 72,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 77,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "fullWidthBreakpoint",
                    "defaultValue": "DdBreakPointsEnum['lt-sm']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lockedOpenBreakpoint",
                    "defaultValue": "DdBreakPointsEnum['gt-lg']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Breakpoint where the navigation should be locked open.</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nBreakpoint where the navigation should be locked open.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "sidebarBackDrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarFullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarLockedOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "sidebarOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the sidebar\n",
                    "description": "<p>Close the sidebar</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the backdrop\n",
                    "description": "<p>Hide the backdrop</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen the sidebar\n",
                    "description": "<p>Open the sidebar</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the backdrop\n",
                    "description": "<p>Show the backdrop</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleSidebarOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "NavigationItemCollapsableComponent",
            "id": "component-NavigationItemCollapsableComponent-2ccc8a50d162a4cf43611cb0954d859ce2c0390dcab33760ac2838f92456553bdf5b0dbf0f98dd7110d929de25fbb119bcdad960dbad2996f14b8dbc4672eecc",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item-collapsable/navigation-item-collapsable.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item-collapsable",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-item-collapsable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 18,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 28,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "childrenIsActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "classes",
                    "defaultValue": "'nav-collapsable nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.open'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollapse the collapsable navigation\n",
                    "description": "<p>Collapse the collapsable navigation</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExpand the collapsable navigation\n",
                    "description": "<p>Expand the collapsable navigation</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isUrlInChildren",
                    "args": [
                        {
                            "name": "parent",
                            "type": "NavigationItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the given url can be found\nin one of the given parent's children\n",
                    "description": "<p>Check if the given url can be found\nin one of the given parent&#39;s children</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "NavigationItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOpen",
                    "args": [
                        {
                            "name": "ev",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle collapse\n",
                    "description": "<p>Toggle collapse</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'nav-collapsable nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "NavigationItemComponent",
            "id": "component-NavigationItemComponent-8cacd3f3fa70d21727221d87e6fde6b27946ac3fa0c49b39e253fa02e5b787f094670c690ada777fa25d572d233d444af4f991a393c9301eee9fbbe636554db1",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item/navigation-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item",
            "styleUrls": [
                "./navigation-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isFavoriteList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 15,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 27,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 22,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classes",
                    "defaultValue": "'nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Binds the class of the host element to the component.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nBinds the class of the host element to the component.\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsFavoriteClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStops event propagation and emits the navigationClick event.\nEmits the markAsFavorite event if the item is marked as favorite.\n",
                    "description": "<p>Stops event propagation and emits the navigationClick event.\nEmits the markAsFavorite event if the item is marked as favorite.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'nav-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBinds the class of the host element to the component.\n",
                    "description": "<p>Binds the class of the host element to the component.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "NavigationItemTitleComponent",
            "id": "component-NavigationItemTitleComponent-c4065bf49218a9637372dad12f155d5c3c1c0503a1f43e019c8f95808200dc9be8e03f1521cc189356688115da88ba2dee83cf8905c75c9fe853995ec8ef0702",
            "file": "projects/digital-delights-library/src/navigation/components/navigation-item-title/navigation-item-title.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-navigation-item-title",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-item-title.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains all the necessary data for rendering a navigation item.\n",
                    "description": "<p>Contains all the necessary data for rendering a navigation item.</p>\n",
                    "line": 13,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 18,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-9bc04726b0997e2640c8ac904a8140df51a613b589da2f2024466f7e4c55d3e6ae95e4cf0a244b90b6056eb7e9aec9f629f5eccff2a4b2ce5d94389be46cfd2b",
            "file": "projects/digital-delights-library/src/notification/components/notification/notification.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDifferent styles for notification.\n'callout' should be used when customer action is required. 'callout' does not support icon.\n",
                    "description": "<p>Different styles for notification.\n&#39;callout&#39; should be used when customer action is required. &#39;callout&#39; does not support icon.</p>\n",
                    "line": 14,
                    "type": "\"error\" | \"info\" | \"success\" | \"callout\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "OverlayBodyComponent",
            "id": "component-OverlayBodyComponent-9412f097c5da0a074fb03205076d483fb2282589a28da3957dff89c396c20ee956327a9fbe141ac5e967f46b709eb8a62642db094491d121ebb42e5ce69582ac",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-body/overlay-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-body",
            "styleUrls": [
                "./overlay-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-body.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px, with 64px padding on the bottom.\nWhen used with variant input 'selection-menu', padding will only apply to bottom.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px, with 64px padding on the bottom.\nWhen used with variant input &#39;selection-menu&#39;, padding will only apply to bottom.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the type of padding added to the body.\n'dialog' adds p-24 padding class.\n'selection-menu' adds py-8 padding class to the body.\nDefault is 'dialog'.\n",
                    "description": "<p>Determines the type of padding added to the body.\n&#39;dialog&#39; adds p-24 padding class.\n&#39;selection-menu&#39; adds py-8 padding class to the body.\nDefault is &#39;dialog&#39;.</p>\n",
                    "line": 16,
                    "type": "\"selection-menu\" | \"dialog\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "OverlayFooterComponent",
            "id": "component-OverlayFooterComponent-01542cada4939ed5024c0b1f9c8db100dcb75e7ec08b8b35701d7cfbb63b6fd04689ec4d396561a75430c707d4d5860659db8e55a256cdfac0980ba5d8a0fe0b",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-footer/overlay-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-footer",
            "styleUrls": [
                "./overlay-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fxLayoutAlign",
                    "defaultValue": "'start center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines how the footer content should be aligned.",
                    "description": "<p>Determines how the footer content should be aligned.</p>\n",
                    "line": 11,
                    "type": "\"end center\" | \"start center\" | \"space-between center\"",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "OverlayHeaderComponent",
            "id": "component-OverlayHeaderComponent-5728a08b2ed88fbeece0831e7d854342ad8d8ef1ccfaa0655069018aa368390c8b6ee9456d95159a3026266a0a01decfa35dba69825795f30238e40d8d96fb3f",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-header/overlay-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-header",
            "styleUrls": [
                "./overlay-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasCloseButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds title to the header.",
                    "description": "<p>Adds title to the header.</p>\n",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideBorder",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFalse padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content",
                    "description": "<p>False padding is 16px and true is 32px.\nSmall overlays will often require smaller padding to fit all content</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'h5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the title.\nSupports plain h5 and h5.caption\n\nDefaults to h5.\n",
                    "description": "<p>Type of the title.\nSupports plain h5 and h5.caption</p>\n<p>Defaults to h5.</p>\n",
                    "line": 19,
                    "type": "\"caption\" | \"h5\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeOverlay",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "OverlayListActionsComponent",
            "id": "component-OverlayListActionsComponent-61cab8543d7d9b2a0defd35103824055cfcaee4093658b565b7d24b8111b22669324c8d0cfe063e8756158fc897e4b5bad8ffd3f2b958e11b51a2d4508290cee",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-list-actions/overlay-list-actions.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-list-actions",
            "styleUrls": [
                "./overlay-list-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-list-actions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines that header should be full width (aka without x-axis padding).",
                    "description": "<p>Determines that header should be full width (aka without x-axis padding).</p>\n",
                    "line": 11,
                    "type": "\"dialog\" | \"full-width-search\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "OverlayWrapperComponent",
            "id": "component-OverlayWrapperComponent-fb980bcb056430091f0caccc8a3ed7df534236bda73b83bdb77401ff202ec4d2ff27c2b531d4e5573a69a3b3f103f7fefe47e897e1597383bed2be7f6c6849ec",
            "file": "projects/digital-delights-library/src/overlay/components/overlay-wrapper/overlay-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-overlay-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "viewState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "OverlayAnimationState",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isScrollableOverlay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "klass",
                    "defaultValue": "'dd-white-bg border-radius-6 elevation-05 h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "style_display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "captureDoneEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "captureStartEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "@slideFromTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "OverlayAnimationState | ",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "'dd-white-bg border-radius-6 elevation-05 h-100-p'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.flexDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Wrapper component for overlay. This component provides the overlay with a slideFromTop\nanimation and the classes used for the overlay panel. Component also sets flex direction for parent component to keep a flex-column layout.\nFor a dialog wrapper with a slideFromRight animation, use DialogWrapperComponent.</p>\n",
            "rawdescription": "\n\nWrapper component for overlay. This component provides the overlay with a slideFromTop\nanimation and the classes used for the overlay panel. Component also sets flex direction for parent component to keep a flex-column layout.\nFor a dialog wrapper with a slideFromRight animation, use DialogWrapperComponent.\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "style_flexDirection": {
                    "name": "style_flexDirection",
                    "getSignature": {
                        "name": "style_flexDirection",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "slideFromTopState": {
                    "name": "slideFromTopState",
                    "getSignature": {
                        "name": "slideFromTopState",
                        "type": "",
                        "returnType": "OverlayAnimationState | ",
                        "line": 34
                    }
                },
                "hasAnimation": {
                    "name": "hasAnimation",
                    "getSignature": {
                        "name": "hasAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-671a0e4624b0d6d3517a2e520e0a5b29812f206eff18bd59f9c8dce7e90fe0493ebf7134c437e4899334669bfab0e3eeb6eb9ed044edbaea027506fefad3689e",
            "file": "projects/digital-delights-library/src/pagination/components/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTotal number of items that determine the pagecount when divided by pageSize.",
                    "description": "<p>Total number of items that determine the pagecount when divided by pageSize.</p>\n",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe start index of pagination.",
                    "description": "<p>The start index of pagination.</p>\n",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe number of items displayed on each page.",
                    "description": "<p>The number of items displayed on each page.</p>\n",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "arrayLengthBeforeAndAfterEllipses",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "displayedPages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(number | undefined)[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "maxVisiblePages",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "pageCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pagesBeforeAndAfterEllipses",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "startIndexat0",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDisplayedPages",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageClick",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-0c7bf6fbf03542af01a51340df3cd17a7e11533a6cc49c0e823f83c8b03055742670e11e34cf7ffb2a69e23dfb0af215c52cbced8eb263021298240373409b77",
            "file": "projects/digital-delights-library/src/progress-bar/components/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentStateIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum progress.",
                    "description": "<p>Maximum progress.</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of current progress in relation to max progress.",
                    "description": "<p>Value of current progress in relation to max progress.</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ProgressBarState[]",
                    "decorators": []
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "progressPercentage": {
                    "name": "progressPercentage",
                    "getSignature": {
                        "name": "progressPercentage",
                        "type": "number",
                        "returnType": "number",
                        "line": 28
                    }
                },
                "labelSpace": {
                    "name": "labelSpace",
                    "getSignature": {
                        "name": "labelSpace",
                        "type": "number",
                        "returnType": "number",
                        "line": 63
                    }
                },
                "verticalBarMinHeight": {
                    "name": "verticalBarMinHeight",
                    "getSignature": {
                        "name": "verticalBarMinHeight",
                        "type": "number",
                        "returnType": "number",
                        "line": 72
                    }
                },
                "statesReversed": {
                    "name": "statesReversed",
                    "getSignature": {
                        "name": "statesReversed",
                        "type": "[]",
                        "returnType": "ProgressBarState[]",
                        "line": 79
                    }
                },
                "barColor": {
                    "name": "barColor",
                    "getSignature": {
                        "name": "barColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 83
                    }
                }
            }
        },
        {
            "name": "ReadMoreAreaComponent",
            "id": "component-ReadMoreAreaComponent-98c47c2f1fc90448d768a62da1dcd3a326a6e07772a06509ee16ccd1f86d83c60de27123babc9f2317d7bd10d0e72384d9f9bf9a3237d27ba163ab17eb053f9f",
            "file": "projects/digital-delights-library/src/read-more-area/components/read-more-area/read-more-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-read-more-area",
            "styleUrls": [
                "./read-more-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./read-more-area.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonTextClosed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonTextOpen",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHeight of the visible area when closed.",
                    "description": "<p>Height of the visible area when closed.</p>\n",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the full text is visible or not.",
                    "description": "<p>Whether the full text is visible or not.</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "readMoreAreaClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "SearchInputComponent",
            "id": "component-SearchInputComponent-b58ba47ef8159e5fb76de7428b5d178109b37211cbbf9ae96ad953c1573297562b6da02c281227af22ab3e0482a18297a7abc68332d2be9b53ec8965dcdd9847",
            "file": "projects/digital-delights-library/src/input/components/search-input/search-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-search-input",
            "styleUrls": [
                "./search-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "inputValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "searchInputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SearchInputV2Component",
            "id": "component-SearchInputV2Component-87d136db3ac55fba37061180cdd41b1691a87e9c3c4d5e0023aada26e265fb476de1dbbbcdcf77e8ced7bd04fc2079d279647be08bf6ec64361b765e11eb8505",
            "file": "projects/digital-delights-library/src/input/components/search-input-v2/search-input-v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-search-input-v2",
            "styleUrls": [
                "./search-input-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-input-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initialValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeHolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits search icon click",
                    "description": "<p>Emits search icon click</p>\n",
                    "line": 37,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "inputValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Unsubscribe subject for handling the subscriptions.</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nUnsubscribe subject for handling the subscriptions.\n",
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "searchInputContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": true,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputContainer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchInputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInputElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>This component acts as a search input field that can be used in either light or dark mode.</p>\n<p>TODO: This does not support changing size dynamically, also should this be removed from the library?</p>\n",
            "rawdescription": "\n\nThis component acts as a search input field that can be used in either light or dark mode.\n\nTODO: This does not support changing size dynamically, also should this be removed from the library?\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SelectItemComponent",
            "id": "component-SelectItemComponent-92b3918718d54791c96dc52e6f363f1da79f418e7fd93fd360e61d7f579982acf459ccc261a3d68ca056bd736dcec50fc66f146876bef1e9eb71c134c7279db5",
            "file": "projects/digital-delights-library/src/select/components/select-item/select-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-item",
            "styleUrls": [
                "./select-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderBottom",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SelectItem<any>",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "SelectListComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "selectItemClasses": {
                    "name": "selectItemClasses",
                    "getSignature": {
                        "name": "selectItemClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 18
                    }
                }
            }
        },
        {
            "name": "SelectListComponent",
            "id": "component-SelectListComponent-3eabf3ee0a59d00e616b4f03a8a49f2f6422378948b78de9edfb24b85f0387eff8ce6f3170cc42b3272e02268fa6928aa27aab2e0e0f3a4ec92b8ef9b7402b13",
            "file": "projects/digital-delights-library/src/select/components/select-list/select-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-list",
            "styleUrls": [
                "./select-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.\n",
                    "description": "<p>If you are using the element on different background color than white, you can change the background color of the input.\nUse color classes that define both background and font color from the library.\nDefault is white background, with white some fonts are using lighter gray color than the contrast is.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'dd-icon-arrow-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SelectItem<any>[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchNoResultsMessage",
                    "defaultValue": "'No results'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchPlaceHolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string | number | undefined",
                    "decorators": []
                },
                {
                    "name": "selectText",
                    "defaultValue": "'Select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText to be shown when there is no selected item.",
                    "description": "<p>Text to be shown when there is no selected item.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "SelectListComponentVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<SelectItem<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompletes the exposed subject.",
                    "description": "<p>Completes the exposed subject.</p>\n"
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "anchorText": {
                    "name": "anchorText",
                    "getSignature": {
                        "name": "anchorText",
                        "type": "",
                        "returnType": "string | number",
                        "line": 46
                    }
                }
            }
        },
        {
            "name": "SelectMenuComponent",
            "id": "component-SelectMenuComponent-8e974ff55a705f9ffc2fc3ea7942ac404d8bbdcacba8bd49fe4ce45f2bc4c1df1ea2e06f38022a159caf969e5d1b1943f6e48061da69ad64027b409a19213820",
            "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-select-menu",
            "styleUrls": [
                "./select-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the selected element and the list of all selections as output.\n",
                    "description": "<p>Emits the selected element and the list of all selections as output.</p>\n",
                    "line": 20,
                    "type": "EventEmitter<SelectMenuOutput>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectListModel",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OVERLAY_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "selectedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(string | number)[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SelectItem<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchTermChange",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SelectListModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SelectListModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "SideNavigationComponent",
            "id": "component-SideNavigationComponent-d0fb1e76ff6dfd72e6a642cc26ae8e9fda21ffddca2ee79cd335bcf0c3a6d40d17980a7783cfc7706096032a40f969d3ad656014f7058f08273477607d0df35f",
            "file": "projects/digital-delights-library/src/navigation/components/side-navigation/side-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-side-navigation",
            "styleUrls": [
                "./side-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "favoriteNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItems marked as favorites from the sidebar.\n",
                    "description": "<p>Items marked as favorites from the sidebar.</p>\n",
                    "line": 18,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContains list of all the navigation elements.\n",
                    "description": "<p>Contains list of all the navigation elements.</p>\n",
                    "line": 13,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markAsFavorite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput event that item is marked as favorite.\n",
                    "description": "<p>Output event that item is marked as favorite.</p>\n",
                    "line": 28,
                    "type": "EventEmitter<NavigationItem>"
                },
                {
                    "name": "navigationClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick event for the navigation items. For instance, this is useful for analytics.\n",
                    "description": "<p>Click event for the navigation items. For instance, this is useful for analytics.</p>\n",
                    "line": 23,
                    "type": "EventEmitter<NavigationItem>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "SnackBarComponent",
            "id": "component-SnackBarComponent-3d4fe6351df946b5b40ec010876926b4577c79abd18a45f0bb348493ddb7335d44fb27fed4ab1e398f7e46b75f2e6e98048b4146302a88f4522a95cc0c51b363",
            "file": "projects/digital-delights-library/src/notification/components/snack-bar/snack-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-snack-bar",
            "styleUrls": [
                "./snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis input is here to trigger change detection.\nChange detection is not triggered when reference type (snack) changes inside a timeout, when closing notifications.\n",
                    "description": "<p>This input is here to trigger change detection.\nChange detection is not triggered when reference type (snack) changes inside a timeout, when closing notifications.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "snack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SnackBar",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<SnackBar>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<SnackBar>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "snackBarClasses": {
                    "name": "snackBarClasses",
                    "getSignature": {
                        "name": "snackBarClasses",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 20
                    }
                }
            }
        },
        {
            "name": "SnackBarListComponent",
            "id": "component-SnackBarListComponent-1b827694e74f9185d5e5a6811a2436304523e133dc43453aec9aabc732c6aefc974204b6baddddf1000e43c2f9fb721a55c9b9f6715594a989c8c82272aa29fc",
            "file": "projects/digital-delights-library/src/notification/components/snack-bar-list/snack-bar-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-snack-bar-list",
            "styleUrls": [
                "./snack-bar-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notifications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SnackBar[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "snack",
                            "type": "SnackBar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snack",
                            "type": "SnackBar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-7a3d4b3f1d7b586b222fa1c4fa6b257781450216a9d2bf01187e671cb9082b531bfc8805e752e58107881e08d9922d28a2b1dbc8a56a7342aaa2ee67a2d17fb1",
            "file": "projects/digital-delights-library/src/stepper/components/stepper/stepper.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndex of the selected step.\nSteps are only selectable backwards.\n\nSelected index is needed so we can identify backwards which steps are active.\nRouterLinkActive is not sufficient for this as we don't know previous routes that are active.\n",
                    "description": "<p>Index of the selected step.\nSteps are only selectable backwards.</p>\n<p>Selected index is needed so we can identify backwards which steps are active.\nRouterLinkActive is not sufficient for this as we don&#39;t know previous routes that are active.</p>\n",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput steps, does not render anything if steps are not defined.\n",
                    "description": "<p>Input steps, does not render anything if steps are not defined.</p>\n",
                    "line": 31,
                    "type": "DdStep[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "stepClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the index of step that was clicked.\n",
                    "description": "<p>Outputs the index of step that was clicked.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper for reducing the code in the template.",
                    "description": "<p>Helper for reducing the code in the template.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-69f3b173d9c49f7cab7dad55b96c189dd5ef1da98eb06e1fb512f4b6c69c5797602d06166a224af44aa4d7c74e3423948494fe57f0d94d1eeeb712a48fa6cad8",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUsed to determine the selected tab. Can be set as true to set initially selected one.",
                    "description": "<p>Used to determine the selected tab. Can be set as true to set initially selected one.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional icon for the tab. dd-icon.",
                    "description": "<p>Optional icon for the tab. dd-icon.</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRendered with the tab to display the number of any notifications.",
                    "description": "<p>Rendered with the tab to display the number of any notifications.</p>\n",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe title of the tab.",
                    "description": "<p>The title of the tab.</p>\n",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabActivated",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "TabNavigationComponent",
            "id": "component-TabNavigationComponent-71f3ffcf907aa82876db0d484c4f066ef0d023ec6fdf73011902ded34909191b38151d20b63837124cac5c61cf23832d7530f713cf4d9c52a1fd9d472c31bed5",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation/tab-navigation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation",
            "styleUrls": [
                "./tab-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editActiveHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeader string to show active edit view.\nThis will be shown instead of the tab navigation.\npreviousNavigation should always be defined together with this.\n",
                    "description": "<p>Header string to show active edit view.\nThis will be shown instead of the tab navigation.\npreviousNavigation should always be defined together with this.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "NavigationItem",
                    "decorators": []
                },
                {
                    "name": "tabNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isOverflowing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "overlayModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayOpenModel<SelectMenuComponent>",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "tabContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabs'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabNavigationSelectItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem<NavigationItem>[]",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "tabsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'navigationTab'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkOverflow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper function to get rid of things.",
                    "description": "<p>Helper function to get rid of things.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "constructCollapsedItems",
                    "args": [
                        {
                            "name": "tabs",
                            "type": "NavigationItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tabs",
                            "type": "NavigationItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnchorClick",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "TabNavigationPreviousComponent",
            "id": "component-TabNavigationPreviousComponent-c89fe82b61dbeef74692d2762bfa91808e85ae2669c4560ea88fc99e50c4140de398fa06f0ff17f5b3164c7e634217f96f7d73d72b544239c55401d70b875d34",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation-previous/tab-navigation-previous.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation-previous",
            "styleUrls": [
                "./tab-navigation-previous.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation-previous.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "editActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "TabNavigationV2Component",
            "id": "component-TabNavigationV2Component-69a368157f52db1ec07b91ef44b03c34603b45cdecf93153904c621f5db6c54b230fa27084b3ef25011bbe76e501f3528dbc0c392757a7acdfa04731a580a981",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tab-navigation-v2/tab-navigation-v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tab-navigation-v2",
            "styleUrls": [
                "./tab-navigation-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-navigation-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "previousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationItem",
                    "decorators": []
                },
                {
                    "name": "tabNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "NavigationItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-3a5c50ebce6c8e59952a3c440047e618065519776f5a2ad306867583907ae9cc9f91344b2b337ad35ef81d4bd8ca0ead5c72e24f866012cf40ebf973d5a618ea",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundVariant",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nComponents background can be set to one of the two variants, light or dark. Light background is default.",
                    "description": "<p>Components background can be set to one of the two variants, light or dark. Light background is default.</p>\n",
                    "line": 13,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                },
                {
                    "name": "container",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether there should be a container around the tab content. If not selected only a bottom border is shown.",
                    "description": "<p>Whether there should be a container around the tab content. If not selected only a bottom border is shown.</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets only one tab as active and displays its content.",
                    "description": "<p>Sets only one tab as active and displays its content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "TabsV2Component",
            "id": "component-TabsV2Component-c078e841c6633485f093b7f229f08a5179295f99575260dfccc3cae1e7bcc54d6b88f814345f713fd205271f23a5cde58e51a064c2a97e4986420e8f720b450d",
            "file": "projects/digital-delights-library/src/tab-navigation/components/tabs-v2/tabs-v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tabs-v2",
            "styleUrls": [
                "./tabs-v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs-v2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hideTabs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets only one tab as active and displays its content.",
                    "description": "<p>Sets only one tab as active and displays its content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "selectedTab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "TextButtonComponent",
            "id": "component-TextButtonComponent-422d3391e64fe9577c98449906406b63637a253c03804eba07a31101606f8a1d5c10b037d886f1781ec8b158668db5b5c3cdd50148623eddc93d04350fa69917",
            "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-text-button",
            "styleUrls": [
                "./text-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds aria label to the button.\n",
                    "description": "<p>Adds aria label to the button.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton type.\nSubmit should be used inside forms.\n",
                    "description": "<p>Button type.\nSubmit should be used inside forms.</p>\n",
                    "line": 51,
                    "type": "\"button\" | \"submit\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the color of the button.\n",
                    "description": "<p>Defines the color of the button.</p>\n",
                    "line": 25,
                    "type": "TextButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMakes the button disabled, button does not output anything when it's disabled.\n",
                    "description": "<p>Makes the button disabled, button does not output anything when it&#39;s disabled.</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the button.\n",
                    "description": "<p>Defines the size of the button.</p>\n",
                    "line": 30,
                    "type": "TextButtonSize",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 45,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for the button.\n",
                    "description": "<p>Text for the button.</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds link support to button click.\n",
                    "description": "<p>Adds link support to button click.</p>\n",
                    "line": 40,
                    "type": "string | string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the click event from the button.\n",
                    "description": "<p>Outputs the click event from the button.</p>\n",
                    "line": 56,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits click event for the button if it's not disabled.\n",
                    "description": "<p>Emits click event for the button if it&#39;s not disabled.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 72,
                        "rawdescription": "\n\nngClass selector for the button.\n",
                        "description": "<p>ngClass selector for the button.</p>\n"
                    }
                }
            }
        },
        {
            "name": "TileComponent",
            "id": "component-TileComponent-180abb2c158a8c341852a9aca5ad5db6aa498d99325d0ff6c151003834a532a9dd6c86e20e75c2f4cdc8f3bbb0980c45458cef4a238cf9e3ea3fc5a6f7b27d5d",
            "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [],
            "accessors": {
                "tileClass": {
                    "name": "tileClass",
                    "getSignature": {
                        "name": "tileClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 20,
                        "rawdescription": "\n\nHelper classes for the ngClass.\n",
                        "description": "<p>Helper classes for the ngClass.</p>\n"
                    }
                }
            }
        },
        {
            "name": "TileFixedComponent",
            "id": "component-TileFixedComponent-afd044b659b716fc2b0612eb4e4711593c67a60ebd07b41ba599c6a752606b29b636bd1ec578cbfb98da4ccd562fbf4cf2a8fb178ebed0914c6d18fca774d4e4",
            "file": "projects/digital-delights-library/src/tile/components/tile-fixed/tile-fixed.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile-fixed",
            "styleUrls": [
                "./tile-fixed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-fixed.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'dd-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional background color. Default is 'dd-white'.\n",
                    "description": "<p>Optional background color. Default is &#39;dd-white&#39;.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional body text. Too long text will be truncated.\n",
                    "description": "<p>Optional body text. Too long text will be truncated.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional heading for the tile.\n",
                    "description": "<p>Optional heading for the tile.</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the tile. 'Basic' is 272px and 'small' is 140px high.\nDefault is 'basic'.\n",
                    "description": "<p>Size of the tile. &#39;Basic&#39; is 272px and &#39;small&#39; is 140px high.\nDefault is &#39;basic&#39;.</p>\n",
                    "line": 15,
                    "type": "\"basic\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'dd-primary-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional text color. Default is 'dd-primary-500-fg'.\n",
                    "description": "<p>Optional text color. Default is &#39;dd-primary-500-fg&#39;.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSupports data and normal fonts.\n",
                    "description": "<p>Supports data and normal fonts.</p>\n",
                    "line": 30,
                    "type": "\"data\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [
                "TileComponent"
            ],
            "accessors": {
                "tileClass": {
                    "name": "tileClass",
                    "getSignature": {
                        "name": "tileClass",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 45,
                        "rawdescription": "\n\nHelper classes for the ngClass.\n",
                        "description": "<p>Helper classes for the ngClass.</p>\n"
                    }
                }
            }
        },
        {
            "name": "TileFooterComponent",
            "id": "component-TileFooterComponent-f692ea4e6f5ef5ebfd99ae032c3e02438e8e6ee46194a14419a2407c9664ce91234b44c4852e06d78711e3b1554d703593f1a9612eb90a50dcc0621b5b6d867a",
            "file": "projects/digital-delights-library/src/tile/components/tile-footer/tile-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-tile-footer",
            "styleUrls": [
                "./tile-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAlign text and icon. Default is 'start'.\n",
                    "description": "<p>Align text and icon. Default is &#39;start&#39;.</p>\n",
                    "line": 44,
                    "type": "\"start\" | \"center\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds aria label to the button.\n",
                    "description": "<p>Adds aria label to the button.</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional background color. If left out, footer will be transparent.\n",
                    "description": "<p>Optional background color. If left out, footer will be transparent.</p>\n",
                    "line": 14,
                    "type": "template literal type",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional icon.\n",
                    "description": "<p>Optional icon.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional icon color. Default is defined by textColor.\n",
                    "description": "<p>Optional icon color. Default is defined by textColor.</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the icons. Default is the configured default icon size.\n",
                    "description": "<p>Size of the icons. Default is the configured default icon size.</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows url to be opened in new tab.\n",
                    "description": "<p>Allows url to be opened in new tab.</p>\n",
                    "line": 54,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCTA text\n",
                    "description": "<p>CTA text</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'dd-primary-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional text color. Default is 'dd-primary-500'.\n",
                    "description": "<p>Optional text color. Default is &#39;dd-primary-500&#39;.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional url.\n",
                    "description": "<p>Optional url.</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional body text. Too long text will be truncated.\n",
                    "description": "<p>Optional body text. Too long text will be truncated.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional heading for the tile.\n",
                    "description": "<p>Optional heading for the tile.</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the tile. 'Basic' is 272px and 'small' is 140px high.\nDefault is 'basic'.\n",
                    "description": "<p>Size of the tile. &#39;Basic&#39; is 272px and &#39;small&#39; is 140px high.\nDefault is &#39;basic&#39;.</p>\n",
                    "line": 15,
                    "type": "\"basic\" | \"small\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "textVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSupports data and normal fonts.\n",
                    "description": "<p>Supports data and normal fonts.</p>\n",
                    "line": 30,
                    "type": "\"data\" | \"default\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileFixedComponent"
                    }
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault 'basic' variant renders tile without border radius.\n'border-radius' adds 'border-radius-6' class to the tile.\n",
                    "description": "<p>Default &#39;basic&#39; variant renders tile without border radius.\n&#39;border-radius&#39; adds &#39;border-radius-6&#39; class to the tile.</p>\n",
                    "line": 15,
                    "type": "TileVariant",
                    "decorators": [],
                    "inheritance": {
                        "file": "TileComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit the button click event.\n",
                    "description": "<p>Emit the button click event.</p>\n",
                    "line": 64,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": [
                "TileFixedComponent"
            ],
            "accessors": {
                "tileFooterFlexLayout": {
                    "name": "tileFooterFlexLayout",
                    "getSignature": {
                        "name": "tileFooterFlexLayout",
                        "type": "string",
                        "returnType": "string",
                        "line": 66
                    }
                }
            }
        },
        {
            "name": "ToggleSliderComponent",
            "id": "component-ToggleSliderComponent-c42a044576d6a8974e319c122b8ed0686313e27df56867addf317d7f9b5308c2f87fd9e3040d0a98a85f6be5994368799b8a36acd8ceca6901504ccf826a2492",
            "file": "projects/digital-delights-library/src/input/components/toggle-slider/toggle-slider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-toggle-slider",
            "styleUrls": [
                "./toggle-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is checked.",
                    "description": "<p>If the input is checked.</p>\n",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the input is disabled.",
                    "description": "<p>If the input is disabled.</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sliderClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an click event for the input.\nParent should always handle the event and switch the inputs for the component.\n",
                    "description": "<p>Emits an click event for the input.\nParent should always handle the event and switch the inputs for the component.</p>\n",
                    "line": 20,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uniqueId",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChangeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles event change for the component.\nFirst makes sure that the input's target.checked matches to the input's one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.\n",
                    "description": "<p>Handles event change for the component.\nFirst makes sure that the input&#39;s target.checked matches to the input&#39;s one so there is no chance that parent and this component are unsynced.\nThen outpus the input click event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "extends": []
        },
        {
            "name": "ToolbarTopComponent",
            "id": "component-ToolbarTopComponent-801ab1ac1b4c7570f2dd7161a7820a071e1af93d183ee16037ac0f8d8f6a4c840ce0ab433b7df3536f668a79e9284d0629b2a7fffd704c4f81d93b343cbdff14",
            "file": "projects/digital-delights-library/src/navigation/components/toolbar-top/toolbar-top.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dd-toolbar-top",
            "styleUrls": [
                "./toolbar-top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar-top.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the top bar.\n",
                    "description": "<p>Configuration for the top bar.</p>\n",
                    "line": 178,
                    "type": "TopbarConfiguration",
                    "decorators": []
                },
                {
                    "name": "hideButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHides the top bar button.",
                    "description": "<p>Hides the top bar button.</p>\n",
                    "line": 173,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 180,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAllSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 187,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SearchInputComponent",
                    "optional": true,
                    "description": "",
                    "line": 182,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SearchInputComponent, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "showMobileSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "unlisten",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Unlisten",
                    "optional": true,
                    "description": "",
                    "line": 186,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMobileSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the mobile search element.\n",
                    "description": "<p>Toggles the mobile search element.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "assetsDirs": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hotkeys",
                        "type": "HotkeysService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 159,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hotkeys",
                        "type": "HotkeysService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "userInitials": {
                    "name": "userInitials",
                    "getSignature": {
                        "name": "userInitials",
                        "type": "string",
                        "returnType": "string",
                        "line": 227,
                        "rawdescription": "\n\nGet user initials from the given user.\n",
                        "description": "<p>Get user initials from the given user.</p>\n"
                    }
                },
                "additionalMobileButtonIndex": {
                    "name": "additionalMobileButtonIndex",
                    "getSignature": {
                        "name": "additionalMobileButtonIndex",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 238,
                        "rawdescription": "\n\nGet the index of the first additional button that should be shown on mobile.\n",
                        "description": "<p>Get the index of the first additional button that should be shown on mobile.</p>\n"
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AccordionModule",
            "id": "module-AccordionModule-5e71c52aed38e11670c311eb3c6ab55f54bd72ecf929578541fd5c7ac10d971198b3a87d061062c7a2e259242243356b1a6889973ec36769633239fa3e1db228",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BadgeModule",
            "id": "module-BadgeModule-9ae699155599bc8bcf15a4e55e58b68880358d787c32ee24e0e6e2ab99a70a234f225bbc916cdab3c8e9f2e463378d299ca65d3f32d972cb60803dcd22008ee9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/badge/badge.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        },
                        {
                            "name": "BadgeInfoOverlayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-3c73170031a6f895c94db4c536f77d8679972ae613981912f3d13d0eb97a6d71ba54b4abe194733bf566a1cba434fb7d5771350adde4ebd32123bc974adf7df3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/button/button.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DdSharedModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "LoaderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "id": "module-CardModule-0a0009477acf549c448a9be2a04880d099623851e86c305cf5dd9f329883586966a0aa0185ddd479a7bb0cc468becca3f71042cf1d5de77daf62fd6aa7e97f02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/card/card.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChipModule",
            "id": "module-ChipModule-c4e3128874c9f497b370a3237dfce976516cdf718d1c0db1d1c6c5a9ecdbc61444ea6885925bbf64a4d527ae757395b26459275f5687de8154b2f57fdaae6c2d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/chip/chip.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatepickerModule",
            "id": "module-DatepickerModule-16e3a6fc512f99443956e5291fcb5a9f2a63c6d368535c01e938d4a6d042b004e86ae079c90846df666f8b774a54c6178a9190156967e6168504ebf8ebd05bad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DdSharedModule",
            "id": "module-DdSharedModule-109afca929eafa331eb51c86ed1759f859f8ad952de7b1fd53c04f95f53be4fe7446b763bcf7f81a17c78e0da16f312746d24109c55c869156527711c632bf7e",
            "description": "<p>Purpose of this Module is to hold basic functionalities that website might need.\nExample: DividerComponent mimics functionality of <code>&lt;hr&gt;</code> element with custom implementation.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/shared/shared.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DdSharedPipesModule",
            "id": "module-DdSharedPipesModule-d23b8976dd4fb0cbe15b99b127520ede511db06f374d24bbde94d990c4340dc50c8699d46856555b1f9d532a247fbf2b7a045589df35f053f5bc52d73615a898",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreakpointPipe"
                        },
                        {
                            "name": "CurrencyPipe"
                        },
                        {
                            "name": "DatePipe"
                        },
                        {
                            "name": "DateTimePipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "FindPipe"
                        },
                        {
                            "name": "SanitizerPipe"
                        },
                        {
                            "name": "ShortDatePipe"
                        },
                        {
                            "name": "SortPipe"
                        },
                        {
                            "name": "TimePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreakpointPipe"
                        },
                        {
                            "name": "CurrencyPipe"
                        },
                        {
                            "name": "DatePipe"
                        },
                        {
                            "name": "DateTimePipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "FindPipe"
                        },
                        {
                            "name": "SanitizerPipe"
                        },
                        {
                            "name": "ShortDatePipe"
                        },
                        {
                            "name": "SortPipe"
                        },
                        {
                            "name": "TimePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileUploadModule",
            "id": "module-FileUploadModule-0273cd2c132b17caaac7368a445a72b763dbec693cc58d2fa5d8012352a935787ef50600a435c1579e903fd6ac9ffe54752af1dd4750c4d829dcb56168eae671",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/file-upload/file-upload.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "ChipModule"
                        },
                        {
                            "name": "DragDropDirective"
                        },
                        {
                            "name": "FormFieldModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "NotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldDatepickerModule",
            "id": "module-FormFieldDatepickerModule-2782db24a2d251a8c22d7687d7cb1b24db2efe618980c3a9ec55967a339ea20e3daff40a07af0baa703a5a65fc399ee75c58e0f1004fd90cccaf4bcd04de7dd4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DatepickerModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "id": "module-FormFieldModule-665f2e617f3d009717dff44309406dfba4606586be2e20df5668de97548a9227a4664f612d9f0c3ff214d1763b07535af8a212a917e4183247736da1112a4b45",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-98475e74ef0dc2231dcf63ceb3fc0ec4b1b26b6f52aca65fb09a6a7965766654e4985b3471398c8385276f0194c55f4d5d8e7b311cd5caa4c633dde771ec14de",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/icon/icon.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-3ab1c877c559dabdb1f8c2682b2399fbf0d0241cd9d1945e2562087330fae1d1ce330de7d97ed6927bfb5e67ca37d504b6e3c4bae5a6383519fdda10ef5fa155",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/input/input.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoaderModule",
            "id": "module-LoaderModule-0bc7ae87374b9c91a5622f93179ddfa8bc873f859fc6a75146a84c0dabd8c05fd24dcb83b65c7702a46a46ccb2402a7ab5256da0cb00c94e0081fb3334e12507",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/loader/loader.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "id": "module-NavigationModule-d565037e207f18140cbe953e59973322e77de24c62e90ae6b1489da7a57da91010991c917b7e3a1dae74575a060ac80d6b5feaa155e923108534baf138e28231",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/navigation/navigation.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "NavigationItemCollapsableComponent"
                        },
                        {
                            "name": "NavigationItemComponent"
                        },
                        {
                            "name": "NavigationItemTitleComponent"
                        },
                        {
                            "name": "SideNavigationComponent"
                        },
                        {
                            "name": "ToolbarTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DdSharedModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LoaderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "id": "module-NotificationModule-6398b4ea981a8b6357fec322f059d467fdecd754f4780352b709c6c116ed386f05851acb34d4eeb02ec735a2895423fd875f590c2b4a0ad8c961ff8f25c6fbf1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/notification/notification.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SnackBarComponent"
                        },
                        {
                            "name": "SnackBarListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OverlayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SnackBarListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlayModule",
            "id": "module-OverlayModule-495f85515871b12104286a6158a5427a327393dd2c9d1a1074ee9ec71d5f6eb2b5a50cd65fea0a287d87cc4bfffa1ceaf715143fdb566306ddb88bfd56f08013",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "OverlayService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-1c3de6b46ea04f7d2be53cca0f81fe518c0f399519a75a78fcbb981568d5254845e4183cafffd99d9579f461bf33973757b79a5c5d795fe7d1f1e00b0e766036",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/pagination/pagination.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressBarModule",
            "id": "module-ProgressBarModule-280f159950a9c23592a7d7a0ece7ed587fd82ec50af365a40aef44a277cb304d04bc32983dcafe8ef767f1d856be6f5703ef916f29c4c377b1ccd05e2db18889",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/progress-bar/progress-bar.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReadMoreAreaModule",
            "id": "module-ReadMoreAreaModule-604406ba8339b14ee2e04890d0c63a5e851d38473e866806e347b985a3ae5a6edfa825bc4defb4cfc5f9e8e362492315ee4637e0bb8273d6dbba4819164ceae3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/read-more-area/read-more-area.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ReadMoreAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ReadMoreAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-963e563a2822eb37fac66dedd511068fc16b5e3e9c54933abfb703539b704527bda5fb8768d6c210300cf512e61ea0bed77c60c37a8ed845df214bcc334efc64",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/select/select.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        },
                        {
                            "name": "SelectFilterPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StepperModule",
            "id": "module-StepperModule-b51e6497b5c0f718731c9421a741c158a2b8717f0bdd1ca852d154113343920e749369acd9159a6ec3018740c4337b583886854995c92456d41f372f040831b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/stepper/stepper.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabNavigationModule",
            "id": "module-TabNavigationModule-a659bd6ce62baa20680c29b5d779126f81151ca0b401db79cd4a7b808c840813dd6eb5437dfbd4762f9eb62e0c7dd4f03672f0f68cb6680c50f5facec1dac260",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChipModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionV2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TileModule",
            "id": "module-TileModule-b2381b89e30590e066df2905a519a7fce2b2e2485c8d2fbe62c6279a62cee10b421cb9d13f17e82eefe76ad3c5c95470b7d6761fecd0b3393e0f4e54787ca866",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tile/tile.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileFixedComponent"
                        },
                        {
                            "name": "TileFooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileFixedComponent"
                        },
                        {
                            "name": "TileFooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-82de6a620ab7a8faf6e15e6feffeab8c63c333eb238012103c61d92b6e41fdf40203abb217f01ff719e5ebaa1721c871b980e4a53486444b6d00a37a28425c6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/digital-delights-library/src/tooltip/tooltip.module.ts",
            "methods": [],
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "animationInTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "200"
            },
            {
                "name": "animationOutTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "200"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    AccordionComponent, //\n    AccordionV2Component,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/badge/badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    BadgeComponent, //\n    BadgeInfoComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/button/button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    ButtonComponent, //\n    HeaderButtonComponent,\n    IconButtonComponent,\n    IconClickableComponent,\n    ButtonGroupComponent,\n    ButtonGroupV2Component,\n    TextButtonComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/card/card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    CardComponent, //\n    CardHeaderComponent,\n    CardRowComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    DatepickerComponent, //\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    FormFieldComponent, //\n    FormCheckboxComponent,\n    FormRadioComponent,\n    FormSelectComponent,\n    FormToggleSliderComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[FormFieldDatepickerComponent, FormDatepickerFieldComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/icon/icon.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    IconComponent, //\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/input/input.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    InputComponent, //\n    InputContentComponent,\n    SearchInputComponent,\n    ToggleSliderComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/loader/loader.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    LoaderSpinnerComponent, //\n    LoaderOverlayComponent,\n    LoaderPageComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    OverlayListActionsComponent, //\n    OverlayBodyComponent,\n    OverlayFooterComponent,\n    OverlayHeaderComponent,\n    ConfirmSelectionOverlayComponent,\n    DialogFooterComponent,\n    DialogBodyComponent,\n    DialogHeaderComponent,\n    DialogWrapperComponent,\n    OverlayWrapperComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/select/select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    SelectListComponent, //\n    SelectItemComponent,\n    SelectMenuComponent,\n    MultiSelectListComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    DividerComponent, //\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    TabNavigationComponent, //\n    TabNavigationPreviousComponent,\n    TabsComponent,\n    TabComponent,\n    TabNavigationV2Component,\n    TabsV2Component,\n]"
            },
            {
                "name": "defaultOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DatepickerOptions",
                "defaultValue": "{\n    minDate: new Date(),\n    maxDate: null,\n    firstCalendarDay: 1,\n    legendTranslations: undefined,\n    allSelectable: false,\n}",
                "rawdescription": "Default configuration options for the datepicker.",
                "description": "<p>Default configuration options for the datepicker.</p>\n"
            },
            {
                "name": "keyboardKeyCodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": true,
                "deprecationMessage": "KeyCodes are depricated (fallback to IE).",
                "type": "KeyboardKeyCodes",
                "defaultValue": "{\n    escape: 27,\n}",
                "rawdescription": "The deprecated key codes.",
                "description": "<p>The deprecated key codes.</p>\n"
            },
            {
                "name": "keyboardKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyboardKeys",
                "defaultValue": "{\n    arrowdown: 'ArrowDown',\n    arrowup: 'ArrowUp',\n    enter: 'Enter',\n    escape: 'Escape',\n    tab: 'Tab',\n    f1: 'F1',\n}",
                "rawdescription": "Exports a constant object that holds specific keyboard keys used in the project.\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",
                "description": "<p>Exports a constant object that holds specific keyboard keys used in the project.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values</a></p>\n"
            },
            {
                "name": "keyEvents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyEvents",
                "defaultValue": "{\n    keyup: 'keyup',\n    keydown: 'keydown',\n}",
                "rawdescription": "Holds the different key events that could be used.",
                "description": "<p>Holds the different key events that could be used.</p>\n"
            },
            {
                "name": "OVERLAY_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InjectionToken<literal type>",
                "defaultValue": "new InjectionToken<{}>('OverlayData')"
            },
            {
                "name": "OVERLAY_REF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InjectionToken<literal type>",
                "defaultValue": "new InjectionToken<OverlayRef>('OverlayRef')"
            },
            {
                "name": "OVERLAY_UNDEFINED_DATA_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/providers/test-providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValueProvider",
                "defaultValue": "{\n    provide: OVERLAY_DATA,\n    useValue: undefined,\n}",
                "rawdescription": "Provider for tests",
                "description": "<p>Provider for tests</p>\n"
            },
            {
                "name": "overlayAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n    // This animation can be added to parent DOM, when initial animation should be skipped.\n    blockInitialRenderAnimation: trigger(\n        'blockInitialRenderAnimation', //\n        [\n            transition(\n                ':enter', //\n                []\n            ),\n        ]\n    ),\n    slideFromTop: trigger('slideFromTop', [\n        // Transition states.\n        state(\n            'in-top',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        state(\n            'default',\n            style({\n                transform: 'translate3d(0, 0, 0)',\n            })\n        ),\n        // Void state (hidden).\n        state(\n            '*',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'in-top => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideFromLeft: trigger('slideFromLeft', [\n        state(\n            'in-left',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        state(\n            '*',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(-100%,0,0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Left slide transition.\n        transition(\n            'in-left => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideFromRight: trigger('slideFromRight', [\n        state(\n            'in-right',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(100%, 0, 0)',\n            })\n        ),\n        state(\n            'default',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            '*',\n            style({\n                transform: 'translate3d(100%, 0, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(100%,0,0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Right slide transition.\n        transition(\n            'in-right => hide',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(100%, 0, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideInOut: trigger('slideInOut', [\n        // Transition states.\n        state(\n            'in-top',\n            style({\n                transform: 'translate3d(0,0,0)',\n                'z-index': 20000001,\n            })\n        ),\n        state(\n            'in-left',\n            style({\n                transform: 'translate3d(0,0,0)',\n                'z-index': 20000001,\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n                'z-index': -1,\n            })\n        ),\n        // Top (modal) transition.\n        transition(\n            'in-top => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'hide => in-top',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0, -100%, 0)', 'z-index': 20000001 }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Left slide transition.\n        transition(\n            'in-left => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'hide => in-left',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(-100%,0,0)', 'z-index': 20000001 }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n    ]),\n    backdropInOut: trigger('backdropInOut', [\n        state(\n            'in',\n            style({\n                backgroundColor: '#5555',\n            })\n        ),\n        state(\n            'out',\n            style({\n                backgroundColor: 'transparent',\n            })\n        ),\n        transition('in => out', animate(`${animationOutTime}ms ease-in-out`)),\n        transition('out => in', animate(`${animationInTime}ms ease-in-out`)),\n    ]),\n}"
            },
            {
                "name": "sharedPipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    DatePipe, //\n    DateTimePipe,\n    CurrencyPipe,\n    TimePipe,\n    ShortDatePipe,\n    SanitizerPipe,\n    FilterPipe,\n    FindPipe,\n    SortPipe,\n    BreakpointPipe,\n]"
            },
            {
                "name": "styleClasses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StyleDict",
                "defaultValue": "{\n    'primary-light': 'dd-primary-500-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n    'primary-dark': 'dd-primary-400-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\n    'secondary-light': 'dd-accent-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n    'secondary-dark': 'dd-accent-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\n    white: 'dd-white-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary\" | \"green\" | \"gray\" | \"yellow\" | \"red\"",
                "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"large\" | \"normal\" | \"mini\"",
                "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipIconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dd-danger-fg\" | \"dd-accent-fg\"",
                "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported colors for chips.</p>\n",
                "kind": 192
            },
            {
                "name": "ChipVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"removable\" | \"tag\"",
                "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported variants for chip.</p>\n",
                "kind": 192
            },
            {
                "name": "DdCulture",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"da-dk\" | \"nb-no\" | \"fi-fi\" | \"sv-se\" | \"en-gb\"",
                "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DdLocale",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dk\" | \"no\" | \"fi\" | \"se\" | \"en\"",
                "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DialogOverlaySize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dialog-wide\" | \"dialog-narrow\" | \"dialog-mega\"",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Handler",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "HeaderButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-dark\" | \"secondary\"",
                "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the header button.</p>\n",
                "kind": 192
            },
            {
                "name": "HeaderButtonIconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the header button icon.</p>\n",
                "kind": 201
            },
            {
                "name": "IconButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"secondary\" | \"primary-light\" | \"primary-dark\"",
                "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the icon button.</p>\n",
                "kind": 192
            },
            {
                "name": "IconClickableColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary-light\" | \"secondary-dark\" | \"white\"",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for the color of the icon button.</p>\n",
                "kind": 192
            },
            {
                "name": "InputComponentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"radio\"",
                "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                "kind": 192
            },
            {
                "name": "InputComponentVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"mini\"",
                "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                "kind": 192
            },
            {
                "name": "LoaderSpinnerSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"16\" | \"24\" | \"32\" | \"36\" | \"48\" | \"64\" | \"128\"",
                "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Defines the spinner sizes for loaders.</p>\n",
                "kind": 192
            },
            {
                "name": "OverlayAnimationState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hide\" | \"in-left\" | \"in-right\" | \"in-top\" | \"default\"",
                "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "OverlaySize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectListComponentVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"small\"",
                "file": "projects/digital-delights-library/src/select/select-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The variant for the component. Default &#39;basic&#39; has 224px min-width and &#39;small&#39; has no minimun width.</p>\n",
                "kind": 192
            },
            {
                "name": "SelectMenuOutput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[any, (string | number)[]]",
                "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "StyleDict",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            },
            {
                "name": "TextButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\"",
                "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TextButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"large\" | \"normal\" | \"mini\"",
                "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TileVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"border-radius\"",
                "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Unlisten",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            }
        ],
        "enumerations": [
            {
                "name": "DdBreakPointsEnum",
                "childs": [
                    {
                        "name": "xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 599px)"
                    },
                    {
                        "name": "sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 600px) and (max-width: 959px)"
                    },
                    {
                        "name": "md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 960px) and (max-width: 1279px)"
                    },
                    {
                        "name": "lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1280px) and (max-width: 1919px)"
                    },
                    {
                        "name": "xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1920px) and (max-width: 5000px)"
                    },
                    {
                        "name": "lt-sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 599px)"
                    },
                    {
                        "name": "lt-md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 959px)"
                    },
                    {
                        "name": "lt-lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 1279px)"
                    },
                    {
                        "name": "lt-xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (max-width: 1919px)"
                    },
                    {
                        "name": "gt-xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 600px)"
                    },
                    {
                        "name": "gt-sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 960px)"
                    },
                    {
                        "name": "gt-md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1280px)"
                    },
                    {
                        "name": "gt-lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "screen and (min-width: 1920px)"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts"
            }
        ],
        "groupedVariables": {
            "projects/digital-delights-library/src/overlay/models/animations.ts": [
                {
                    "name": "animationInTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "200"
                },
                {
                    "name": "animationOutTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "200"
                },
                {
                    "name": "overlayAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n    // This animation can be added to parent DOM, when initial animation should be skipped.\n    blockInitialRenderAnimation: trigger(\n        'blockInitialRenderAnimation', //\n        [\n            transition(\n                ':enter', //\n                []\n            ),\n        ]\n    ),\n    slideFromTop: trigger('slideFromTop', [\n        // Transition states.\n        state(\n            'in-top',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        state(\n            'default',\n            style({\n                transform: 'translate3d(0, 0, 0)',\n            })\n        ),\n        // Void state (hidden).\n        state(\n            '*',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'in-top => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideFromLeft: trigger('slideFromLeft', [\n        state(\n            'in-left',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        state(\n            '*',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(-100%,0,0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Left slide transition.\n        transition(\n            'in-left => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideFromRight: trigger('slideFromRight', [\n        state(\n            'in-right',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(100%, 0, 0)',\n            })\n        ),\n        state(\n            'default',\n            style({\n                transform: 'translate3d(0,0,0)',\n            })\n        ),\n        state(\n            '*',\n            style({\n                transform: 'translate3d(100%, 0, 0)',\n            })\n        ),\n        transition(\n            ':enter',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(100%,0,0)' }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Right slide transition.\n        transition(\n            'in-right => hide',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(100%, 0, 0)' }), //\n                ])\n            )\n        ),\n    ]),\n    slideInOut: trigger('slideInOut', [\n        // Transition states.\n        state(\n            'in-top',\n            style({\n                transform: 'translate3d(0,0,0)',\n                'z-index': 20000001,\n            })\n        ),\n        state(\n            'in-left',\n            style({\n                transform: 'translate3d(0,0,0)',\n                'z-index': 20000001,\n            })\n        ),\n        state(\n            'hide',\n            style({\n                transform: 'translate3d(0, -100%, 0)',\n                'z-index': -1,\n            })\n        ),\n        // Top (modal) transition.\n        transition(\n            'in-top => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(0, -100%, 0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'hide => in-top',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0, -100%, 0)', 'z-index': 20000001 }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n        // Left slide transition.\n        transition(\n            'in-left => hide',\n            animate(\n                `${animationOutTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                    style({ transform: 'translate3d(-100%, 0, 0)' }), //\n                ])\n            )\n        ),\n        transition(\n            'hide => in-left',\n            animate(\n                `${animationInTime}ms ease-in-out`, //\n                keyframes([\n                    style({ transform: 'translate3d(-100%,0,0)', 'z-index': 20000001 }), //\n                    style({ transform: 'translate3d(0,0,0)' }), //\n                ])\n            )\n        ),\n    ]),\n    backdropInOut: trigger('backdropInOut', [\n        state(\n            'in',\n            style({\n                backgroundColor: '#5555',\n            })\n        ),\n        state(\n            'out',\n            style({\n                backgroundColor: 'transparent',\n            })\n        ),\n        transition('in => out', animate(`${animationOutTime}ms ease-in-out`)),\n        transition('out => in', animate(`${animationInTime}ms ease-in-out`)),\n    ]),\n}"
                }
            ],
            "projects/digital-delights-library/src/accordion/accordion.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/accordion/accordion.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    AccordionComponent, //\n    AccordionV2Component,\n]"
                }
            ],
            "projects/digital-delights-library/src/badge/badge.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/badge/badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    BadgeComponent, //\n    BadgeInfoComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/button/button.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/button/button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    ButtonComponent, //\n    HeaderButtonComponent,\n    IconButtonComponent,\n    IconClickableComponent,\n    ButtonGroupComponent,\n    ButtonGroupV2Component,\n    TextButtonComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/card/card.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/card/card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    CardComponent, //\n    CardHeaderComponent,\n    CardRowComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/datepicker/datepicker.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/datepicker/datepicker.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    DatepickerComponent, //\n]"
                }
            ],
            "projects/digital-delights-library/src/form-field/form-field.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/form-field/form-field.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    FormFieldComponent, //\n    FormCheckboxComponent,\n    FormRadioComponent,\n    FormSelectComponent,\n    FormToggleSliderComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/form-field-datepicker/form-field-datepicker.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[FormFieldDatepickerComponent, FormDatepickerFieldComponent]"
                }
            ],
            "projects/digital-delights-library/src/icon/icon.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/icon/icon.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    IconComponent, //\n]"
                }
            ],
            "projects/digital-delights-library/src/input/input.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/input/input.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    InputComponent, //\n    InputContentComponent,\n    SearchInputComponent,\n    ToggleSliderComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/loader/loader.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/loader/loader.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    LoaderSpinnerComponent, //\n    LoaderOverlayComponent,\n    LoaderPageComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/overlay/overlay.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/overlay.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    OverlayListActionsComponent, //\n    OverlayBodyComponent,\n    OverlayFooterComponent,\n    OverlayHeaderComponent,\n    ConfirmSelectionOverlayComponent,\n    DialogFooterComponent,\n    DialogBodyComponent,\n    DialogHeaderComponent,\n    DialogWrapperComponent,\n    OverlayWrapperComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/select/select.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/select/select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    SelectListComponent, //\n    SelectItemComponent,\n    SelectMenuComponent,\n    MultiSelectListComponent,\n]"
                }
            ],
            "projects/digital-delights-library/src/shared/shared.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    DividerComponent, //\n]"
                }
            ],
            "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/tab-navigation/tab-navigation.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    TabNavigationComponent, //\n    TabNavigationPreviousComponent,\n    TabsComponent,\n    TabComponent,\n    TabNavigationV2Component,\n    TabsV2Component,\n]"
                }
            ],
            "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts": [
                {
                    "name": "defaultOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/datepicker/components/datepicker/datepicker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatepickerOptions",
                    "defaultValue": "{\n    minDate: new Date(),\n    maxDate: null,\n    firstCalendarDay: 1,\n    legendTranslations: undefined,\n    allSelectable: false,\n}",
                    "rawdescription": "Default configuration options for the datepicker.",
                    "description": "<p>Default configuration options for the datepicker.</p>\n"
                }
            ],
            "projects/digital-delights-library/src/services/models/keyboard.ts": [
                {
                    "name": "keyboardKeyCodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": true,
                    "deprecationMessage": "KeyCodes are depricated (fallback to IE).",
                    "type": "KeyboardKeyCodes",
                    "defaultValue": "{\n    escape: 27,\n}",
                    "rawdescription": "The deprecated key codes.",
                    "description": "<p>The deprecated key codes.</p>\n"
                },
                {
                    "name": "keyboardKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyboardKeys",
                    "defaultValue": "{\n    arrowdown: 'ArrowDown',\n    arrowup: 'ArrowUp',\n    enter: 'Enter',\n    escape: 'Escape',\n    tab: 'Tab',\n    f1: 'F1',\n}",
                    "rawdescription": "Exports a constant object that holds specific keyboard keys used in the project.\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",
                    "description": "<p>Exports a constant object that holds specific keyboard keys used in the project.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values</a></p>\n"
                },
                {
                    "name": "keyEvents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyEvents",
                    "defaultValue": "{\n    keyup: 'keyup',\n    keydown: 'keydown',\n}",
                    "rawdescription": "Holds the different key events that could be used.",
                    "description": "<p>Holds the different key events that could be used.</p>\n"
                }
            ],
            "projects/digital-delights-library/src/overlay/models/overlay.ts": [
                {
                    "name": "OVERLAY_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InjectionToken<literal type>",
                    "defaultValue": "new InjectionToken<{}>('OverlayData')"
                },
                {
                    "name": "OVERLAY_REF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InjectionToken<literal type>",
                    "defaultValue": "new InjectionToken<OverlayRef>('OverlayRef')"
                }
            ],
            "projects/digital-delights-library/src/providers/test-providers.ts": [
                {
                    "name": "OVERLAY_UNDEFINED_DATA_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/providers/test-providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValueProvider",
                    "defaultValue": "{\n    provide: OVERLAY_DATA,\n    useValue: undefined,\n}",
                    "rawdescription": "Provider for tests",
                    "description": "<p>Provider for tests</p>\n"
                }
            ],
            "projects/digital-delights-library/src/pipes/pipes.module.ts": [
                {
                    "name": "sharedPipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/pipes/pipes.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    DatePipe, //\n    DateTimePipe,\n    CurrencyPipe,\n    TimePipe,\n    ShortDatePipe,\n    SanitizerPipe,\n    FilterPipe,\n    FindPipe,\n    SortPipe,\n    BreakpointPipe,\n]"
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts": [
                {
                    "name": "styleClasses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StyleDict",
                    "defaultValue": "{\n    'primary-light': 'dd-primary-500-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n    'primary-dark': 'dd-primary-400-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\n    'secondary-light': 'dd-accent-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n    'secondary-dark': 'dd-accent-fg dd-primary-200-fg-hover dd-primary-100-fg-active',\n    white: 'dd-white-fg dd-accent-darker-fg-hover dd-accent-darkest-fg-active',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/digital-delights-library/src/navigation/models/navigation-models.ts": [
                {
                    "name": "DdBreakPointsEnum",
                    "childs": [
                        {
                            "name": "xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 599px)"
                        },
                        {
                            "name": "sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 600px) and (max-width: 959px)"
                        },
                        {
                            "name": "md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 960px) and (max-width: 1279px)"
                        },
                        {
                            "name": "lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1280px) and (max-width: 1919px)"
                        },
                        {
                            "name": "xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1920px) and (max-width: 5000px)"
                        },
                        {
                            "name": "lt-sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 599px)"
                        },
                        {
                            "name": "lt-md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 959px)"
                        },
                        {
                            "name": "lt-lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 1279px)"
                        },
                        {
                            "name": "lt-xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (max-width: 1919px)"
                        },
                        {
                            "name": "gt-xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 600px)"
                        },
                        {
                            "name": "gt-sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 960px)"
                        },
                        {
                            "name": "gt-md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1280px)"
                        },
                        {
                            "name": "gt-lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "screen and (min-width: 1920px)"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/digital-delights-library/src/navigation/models/navigation-models.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/digital-delights-library/src/button/components/button/button.component.ts": [
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary\" | \"green\" | \"gray\" | \"yellow\" | \"red\"",
                    "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"large\" | \"normal\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/button/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/chip/components/chip/chip.component.ts": [
                {
                    "name": "ChipIconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dd-danger-fg\" | \"dd-accent-fg\"",
                    "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported colors for chips.</p>\n",
                    "kind": 192
                },
                {
                    "name": "ChipVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"removable\" | \"tag\"",
                    "file": "projects/digital-delights-library/src/chip/components/chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported variants for chip.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/pipes/services/locale.service.ts": [
                {
                    "name": "DdCulture",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"da-dk\" | \"nb-no\" | \"fi-fi\" | \"sv-se\" | \"en-gb\"",
                    "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DdLocale",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dk\" | \"no\" | \"fi\" | \"se\" | \"en\"",
                    "file": "projects/digital-delights-library/src/pipes/services/locale.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/overlay/models/overlay.ts": [
                {
                    "name": "DialogOverlaySize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dialog-wide\" | \"dialog-narrow\" | \"dialog-mega\"",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "OverlaySize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "projects/digital-delights-library/src/overlay/models/overlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/services/models/keyboard.ts": [
                {
                    "name": "Handler",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Unlisten",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/digital-delights-library/src/services/models/keyboard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts": [
                {
                    "name": "HeaderButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-dark\" | \"secondary\"",
                    "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the header button.</p>\n",
                    "kind": 192
                },
                {
                    "name": "HeaderButtonIconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/digital-delights-library/src/button/components/header-button/header-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the header button icon.</p>\n",
                    "kind": 201
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts": [
                {
                    "name": "IconButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"secondary\" | \"primary-light\" | \"primary-dark\"",
                    "file": "projects/digital-delights-library/src/button/components/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the icon button.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts": [
                {
                    "name": "IconClickableColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary-light\" | \"primary-dark\" | \"secondary-light\" | \"secondary-dark\" | \"white\"",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for the color of the icon button.</p>\n",
                    "kind": 192
                },
                {
                    "name": "StyleDict",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/digital-delights-library/src/button/components/icon-clickable/icon-clickable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                }
            ],
            "projects/digital-delights-library/src/input/components/input/input.component.ts": [
                {
                    "name": "InputComponentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"radio\"",
                    "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                    "kind": 192
                },
                {
                    "name": "InputComponentVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/input/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; is 24px and &#39;mini&#39; is 16px.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts": [
                {
                    "name": "LoaderSpinnerSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"16\" | \"24\" | \"32\" | \"36\" | \"48\" | \"64\" | \"128\"",
                    "file": "projects/digital-delights-library/src/loader/components/loader-spinner/loader-spinner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Defines the spinner sizes for loaders.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/overlay/models/animations.ts": [
                {
                    "name": "OverlayAnimationState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hide\" | \"in-left\" | \"in-right\" | \"in-top\" | \"default\"",
                    "file": "projects/digital-delights-library/src/overlay/models/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/select/select-models.ts": [
                {
                    "name": "SelectListComponentVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"small\"",
                    "file": "projects/digital-delights-library/src/select/select-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The variant for the component. Default &#39;basic&#39; has 224px min-width and &#39;small&#39; has no minimun width.</p>\n",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts": [
                {
                    "name": "SelectMenuOutput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[any, (string | number)[]]",
                    "file": "projects/digital-delights-library/src/select/components/select-menu/select-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts": [
                {
                    "name": "TextButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\"",
                    "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TextButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"large\" | \"normal\" | \"mini\"",
                    "file": "projects/digital-delights-library/src/button/components/text-button/text-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/tile/components/tile/tile.component.ts": [
                {
                    "name": "TileVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"border-radius\"",
                    "file": "projects/digital-delights-library/src/tile/components/tile/tile.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/digital-delights-library/src/tooltip/tooltip.directive.ts": [
                {
                    "name": "TooltipPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/digital-delights-library/src/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    }
}